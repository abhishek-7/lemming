/*
Package bgpgue is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by ygnmi version: v0.3.1: (ygot: v0.25.2)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package bgpgue

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// BgpGuePolicy_DstPortPath represents the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy/state/dst-port YANG schema element.
type BgpGuePolicy_DstPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGuePolicy_DstPortPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy/state/dst-port YANG schema element.
type BgpGuePolicy_DstPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGuePolicyPath) State() ygnmi.SingletonQuery[*oc.BgpGuePolicy] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.BgpGuePolicy](
		"BgpGuePolicy",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGuePolicyPathAny) State() ygnmi.WildcardQuery[*oc.BgpGuePolicy] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.BgpGuePolicy](
		"BgpGuePolicy",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGuePolicyPath) Config() ygnmi.ConfigQuery[*oc.BgpGuePolicy] {
	return ygnmi.NewNonLeafConfigQuery[*oc.BgpGuePolicy](
		"BgpGuePolicy",
		false,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGuePolicyPathAny) Config() ygnmi.WildcardQuery[*oc.BgpGuePolicy] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.BgpGuePolicy](
		"BgpGuePolicy",
		false,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/state/dst-port"
func (n *BgpGuePolicy_DstPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewLeafSingletonQuery[uint16](
		"BgpGuePolicy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGuePolicy).DstPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/state/dst-port"
func (n *BgpGuePolicy_DstPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGuePolicy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGuePolicy).DstPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/config/dst-port"
func (n *BgpGuePolicy_DstPortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewLeafConfigQuery[uint16](
		"BgpGuePolicy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGuePolicy).DstPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/config/dst-port"
func (n *BgpGuePolicy_DstPortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGuePolicy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGuePolicy).DstPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/prefix"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/state/prefix"
func (n *BgpGuePolicy_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"BgpGuePolicy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/prefix"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/state/prefix"
func (n *BgpGuePolicy_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGuePolicy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/prefix"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/config/prefix"
func (n *BgpGuePolicy_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"BgpGuePolicy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/prefix"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/config/prefix"
func (n *BgpGuePolicy_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGuePolicy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/state/src-ip"
func (n *BgpGuePolicy_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"BgpGuePolicy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/state/src-ip"
func (n *BgpGuePolicy_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGuePolicy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/src-ip"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/config/src-ip"
func (n *BgpGuePolicy_SrcIpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"BgpGuePolicy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/src-ip"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/config/src-ip"
func (n *BgpGuePolicy_SrcIpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGuePolicy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGuePolicy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGuePolicy) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// BgpGuePolicy_PrefixPath represents the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy/state/prefix YANG schema element.
type BgpGuePolicy_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGuePolicy_PrefixPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy/state/prefix YANG schema element.
type BgpGuePolicy_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGuePolicy_SrcIpPath represents the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy/state/src-ip YANG schema element.
type BgpGuePolicy_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGuePolicy_SrcIpPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy/state/src-ip YANG schema element.
type BgpGuePolicy_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGuePolicyPath represents the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy YANG schema element.
type BgpGuePolicyPath struct {
	*ygnmi.NodePath
}

// BgpGuePolicyPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-policies/bgp-gue-policy YANG schema element.
type BgpGuePolicyPathAny struct {
	*ygnmi.NodePath
}

// DstPort (leaf): Destination port of UDP encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/*/dst-port"
func (n *BgpGuePolicyPath) DstPort() *BgpGuePolicy_DstPortPath {
	return &BgpGuePolicy_DstPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// DstPort (leaf): Destination port of UDP encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/*/dst-port"
func (n *BgpGuePolicyPathAny) DstPort() *BgpGuePolicy_DstPortPathAny {
	return &BgpGuePolicy_DstPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Prefix (leaf): Prefix to which the GUE policy applies.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/*/prefix"
func (n *BgpGuePolicyPath) Prefix() *BgpGuePolicy_PrefixPath {
	return &BgpGuePolicy_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Prefix (leaf): Prefix to which the GUE policy applies.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/*/prefix"
func (n *BgpGuePolicyPathAny) Prefix() *BgpGuePolicy_PrefixPathAny {
	return &BgpGuePolicy_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SrcIp (leaf): Source IP address of IP encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/*/src-ip"
func (n *BgpGuePolicyPath) SrcIp() *BgpGuePolicy_SrcIpPath {
	return &BgpGuePolicy_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SrcIp (leaf): Source IP address of IP encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-policies/bgp-gue-policy/*/src-ip"
func (n *BgpGuePolicyPathAny) SrcIp() *BgpGuePolicy_SrcIpPathAny {
	return &BgpGuePolicy_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}
