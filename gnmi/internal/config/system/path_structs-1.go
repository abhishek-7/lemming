/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/wenbli/gocode/pkg/mod/github.com/openconfig/ygot@v0.24.2/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	oc "github.com/openconfig/lemming/gnmi/internal/config"
	"github.com/openconfig/ygot/ygot"
)

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygot.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygot.NodePath
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	return &System_License_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygot.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygot.NodePath
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/config/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygot.NodePath
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/config/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/config/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygot.NodePath
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/active"
// Path from root: "/system/license/licenses/license/config/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	return &System_License_License_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/active"
// Path from root: "/system/license/licenses/license/config/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	return &System_License_License_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-data"
// Path from root: "/system/license/licenses/license/config/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	return &System_License_License_LicenseDataPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-data"
// Path from root: "/system/license/licenses/license/config/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	return &System_License_License_LicenseDataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-id"
// Path from root: "/system/license/licenses/license/config/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	return &System_License_License_LicenseIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-id"
// Path from root: "/system/license/licenses/license/config/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	return &System_License_License_LicenseIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygot.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygot.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	return &System_Logging_ConsolePath{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	return &System_Logging_ConsolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	return &System_Logging_RemoteServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygot.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygot.NodePath
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	return &System_Logging_Console_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/config/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/config/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/config/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/config/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	return &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	return &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	return &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	return &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServerPath represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServerPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/host"
// Path from root: "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServerPath) Host() *System_Logging_RemoteServer_HostPath {
	return &System_Logging_RemoteServer_HostPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/host"
// Path from root: "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServerPathAny) Host() *System_Logging_RemoteServer_HostPathAny {
	return &System_Logging_RemoteServer_HostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServerPath) RemotePort() *System_Logging_RemoteServer_RemotePortPath {
	return &System_Logging_RemoteServer_RemotePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServerPathAny) RemotePort() *System_Logging_RemoteServer_RemotePortPathAny {
	return &System_Logging_RemoteServer_RemotePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnySeverity(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnyFacility(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPath {
	return &System_Logging_RemoteServer_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServerPath) SourceAddress() *System_Logging_RemoteServer_SourceAddressPath {
	return &System_Logging_RemoteServer_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServerPathAny) SourceAddress() *System_Logging_RemoteServer_SourceAddressPathAny {
	return &System_Logging_RemoteServer_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServer_SelectorPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_SelectorPath) Facility() *System_Logging_RemoteServer_Selector_FacilityPath {
	return &System_Logging_RemoteServer_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_SelectorPathAny) Facility() *System_Logging_RemoteServer_Selector_FacilityPathAny {
	return &System_Logging_RemoteServer_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_SelectorPath) Severity() *System_Logging_RemoteServer_Selector_SeverityPath {
	return &System_Logging_RemoteServer_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_SelectorPathAny) Severity() *System_Logging_RemoteServer_Selector_SeverityPathAny {
	return &System_Logging_RemoteServer_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MacAddressPath represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPath struct {
	*ygot.NodePath
}

// System_MacAddressPathAny represents the wildcard version of the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPathAny struct {
	*ygot.NodePath
}

// System_MacAddress_RoutingMacPath represents the /openconfig-system/system/mac-address/config/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPath struct {
	*ygot.NodePath
}

// System_MacAddress_RoutingMacPathAny represents the wildcard version of the /openconfig-system/system/mac-address/config/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPathAny struct {
	*ygot.NodePath
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/routing-mac"
// Path from root: "/system/mac-address/config/routing-mac"
func (n *System_MacAddressPath) RoutingMac() *System_MacAddress_RoutingMacPath {
	return &System_MacAddress_RoutingMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "routing-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/routing-mac"
// Path from root: "/system/mac-address/config/routing-mac"
func (n *System_MacAddressPathAny) RoutingMac() *System_MacAddress_RoutingMacPathAny {
	return &System_MacAddress_RoutingMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "routing-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MemoryPath represents the /openconfig-system/system/memory YANG schema element.
type System_MemoryPath struct {
	*ygot.NodePath
}

// System_MemoryPathAny represents the wildcard version of the /openconfig-system/system/memory YANG schema element.
type System_MemoryPathAny struct {
	*ygot.NodePath
}

// System_MessagesPath represents the /openconfig-system/system/messages YANG schema element.
type System_MessagesPath struct {
	*ygot.NodePath
}

// System_MessagesPathAny represents the wildcard version of the /openconfig-system/system/messages YANG schema element.
type System_MessagesPathAny struct {
	*ygot.NodePath
}

// System_Messages_SeverityPath represents the /openconfig-system/system/messages/config/severity YANG schema element.
type System_Messages_SeverityPath struct {
	*ygot.NodePath
}

// System_Messages_SeverityPathAny represents the wildcard version of the /openconfig-system/system/messages/config/severity YANG schema element.
type System_Messages_SeverityPathAny struct {
	*ygot.NodePath
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePath {
	return &System_Messages_DebugServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/messages/config/severity"
func (n *System_MessagesPath) Severity() *System_Messages_SeverityPath {
	return &System_Messages_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/messages/config/severity"
func (n *System_MessagesPathAny) Severity() *System_Messages_SeverityPathAny {
	return &System_Messages_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_DebugServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPath represents the /openconfig-system/system/messages/debug-entries/debug-service/config/enabled YANG schema element.
type System_Messages_DebugService_EnabledPath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/config/enabled YANG schema element.
type System_Messages_DebugService_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service/config/service YANG schema element.
type System_Messages_DebugService_ServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/config/service YANG schema element.
type System_Messages_DebugService_ServicePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugServicePath) Enabled() *System_Messages_DebugService_EnabledPath {
	return &System_Messages_DebugService_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugServicePathAny) Enabled() *System_Messages_DebugService_EnabledPathAny {
	return &System_Messages_DebugService_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/service"
// Path from root: "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugServicePath) Service() *System_Messages_DebugService_ServicePath {
	return &System_Messages_DebugService_ServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/service"
// Path from root: "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugServicePathAny) Service() *System_Messages_DebugService_ServicePathAny {
	return &System_Messages_DebugService_ServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_NtpPath represents the /openconfig-system/system/ntp YANG schema element.
type System_NtpPath struct {
	*ygot.NodePath
}

// System_NtpPathAny represents the wildcard version of the /openconfig-system/system/ntp YANG schema element.
type System_NtpPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPath represents the /openconfig-system/system/ntp/config/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPath struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPath represents the /openconfig-system/system/ntp/config/enabled YANG schema element.
type System_Ntp_EnabledPath struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/enabled YANG schema element.
type System_Ntp_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPath represents the /openconfig-system/system/ntp/config/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpSourceAddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/ntp-source-address YANG schema element.
type System_Ntp_NtpSourceAddressPathAny struct {
	*ygot.NodePath
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable-ntp-auth"
// Path from root: "/system/ntp/config/enable-ntp-auth"
func (n *System_NtpPath) EnableNtpAuth() *System_Ntp_EnableNtpAuthPath {
	return &System_Ntp_EnableNtpAuthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable-ntp-auth"
// Path from root: "/system/ntp/config/enable-ntp-auth"
func (n *System_NtpPathAny) EnableNtpAuth() *System_Ntp_EnableNtpAuthPathAny {
	return &System_Ntp_EnableNtpAuthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/ntp/config/enabled"
func (n *System_NtpPath) Enabled() *System_Ntp_EnabledPath {
	return &System_Ntp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/ntp/config/enabled"
func (n *System_NtpPathAny) Enabled() *System_Ntp_EnabledPathAny {
	return &System_Ntp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPath) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPathAny) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPath) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPath {
	return &System_Ntp_NtpKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPathAny) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ntp-source-address"
// Path from root: "/system/ntp/config/ntp-source-address"
func (n *System_NtpPath) NtpSourceAddress() *System_Ntp_NtpSourceAddressPath {
	return &System_Ntp_NtpSourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpSourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ntp-source-address"
// Path from root: "/system/ntp/config/ntp-source-address"
func (n *System_NtpPathAny) NtpSourceAddress() *System_Ntp_NtpSourceAddressPathAny {
	return &System_Ntp_NtpSourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ntp-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPath) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPathAny) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPath) Server(Address string) *System_Ntp_ServerPath {
	return &System_Ntp_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPathAny) Server(Address string) *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Ntp_NtpKeyPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKeyPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePathAny struct {
	*ygot.NodePath
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKeyPath) KeyId() *System_Ntp_NtpKey_KeyIdPath {
	return &System_Ntp_NtpKey_KeyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKeyPathAny) KeyId() *System_Ntp_NtpKey_KeyIdPathAny {
	return &System_Ntp_NtpKey_KeyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKeyPath) KeyType() *System_Ntp_NtpKey_KeyTypePath {
	return &System_Ntp_NtpKey_KeyTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKeyPathAny) KeyType() *System_Ntp_NtpKey_KeyTypePathAny {
	return &System_Ntp_NtpKey_KeyTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKeyPath) KeyValue() *System_Ntp_NtpKey_KeyValuePath {
	return &System_Ntp_NtpKey_KeyValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKeyPathAny) KeyValue() *System_Ntp_NtpKey_KeyValuePathAny {
	return &System_Ntp_NtpKey_KeyValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Ntp_ServerPath represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPath struct {
	*ygot.NodePath
}

// System_Ntp_ServerPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPath represents the /openconfig-system/system/ntp/servers/server/config/address YANG schema element.
type System_Ntp_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/address YANG schema element.
type System_Ntp_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePath represents the /openconfig-system/system/ntp/servers/server/config/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPath represents the /openconfig-system/system/ntp/servers/server/config/iburst YANG schema element.
type System_Ntp_Server_IburstPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/iburst YANG schema element.
type System_Ntp_Server_IburstPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPath represents the /openconfig-system/system/ntp/servers/server/config/port YANG schema element.
type System_Ntp_Server_PortPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/port YANG schema element.
type System_Ntp_Server_PortPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPath represents the /openconfig-system/system/ntp/servers/server/config/prefer YANG schema element.
type System_Ntp_Server_PreferPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/prefer YANG schema element.
type System_Ntp_Server_PreferPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPath represents the /openconfig-system/system/ntp/servers/server/config/version YANG schema element.
type System_Ntp_Server_VersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/version YANG schema element.
type System_Ntp_Server_VersionPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/ntp/servers/server/config/address"
func (n *System_Ntp_ServerPath) Address() *System_Ntp_Server_AddressPath {
	return &System_Ntp_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/ntp/servers/server/config/address"
func (n *System_Ntp_ServerPathAny) Address() *System_Ntp_Server_AddressPathAny {
	return &System_Ntp_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/association-type"
// Path from root: "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_ServerPath) AssociationType() *System_Ntp_Server_AssociationTypePath {
	return &System_Ntp_Server_AssociationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/association-type"
// Path from root: "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_ServerPathAny) AssociationType() *System_Ntp_Server_AssociationTypePathAny {
	return &System_Ntp_Server_AssociationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/iburst"
// Path from root: "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_ServerPath) Iburst() *System_Ntp_Server_IburstPath {
	return &System_Ntp_Server_IburstPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/iburst"
// Path from root: "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_ServerPathAny) Iburst() *System_Ntp_Server_IburstPathAny {
	return &System_Ntp_Server_IburstPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/ntp/servers/server/config/port"
func (n *System_Ntp_ServerPath) Port() *System_Ntp_Server_PortPath {
	return &System_Ntp_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/ntp/servers/server/config/port"
func (n *System_Ntp_ServerPathAny) Port() *System_Ntp_Server_PortPathAny {
	return &System_Ntp_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/prefer"
// Path from root: "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_ServerPath) Prefer() *System_Ntp_Server_PreferPath {
	return &System_Ntp_Server_PreferPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/prefer"
// Path from root: "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_ServerPathAny) Prefer() *System_Ntp_Server_PreferPathAny {
	return &System_Ntp_Server_PreferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/version"
// Path from root: "/system/ntp/servers/server/config/version"
func (n *System_Ntp_ServerPath) Version() *System_Ntp_Server_VersionPath {
	return &System_Ntp_Server_VersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/version"
// Path from root: "/system/ntp/servers/server/config/version"
func (n *System_Ntp_ServerPathAny) Version() *System_Ntp_Server_VersionPathAny {
	return &System_Ntp_Server_VersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_SshServerPath represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPath struct {
	*ygot.NodePath
}

// System_SshServerPathAny represents the wildcard version of the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPathAny struct {
	*ygot.NodePath
}

// System_SshServer_EnablePath represents the /openconfig-system/system/ssh-server/config/enable YANG schema element.
type System_SshServer_EnablePath struct {
	*ygot.NodePath
}

// System_SshServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/enable YANG schema element.
type System_SshServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPath represents the /openconfig-system/system/ssh-server/config/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPath struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPathAny struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPath represents the /openconfig-system/system/ssh-server/config/rate-limit YANG schema element.
type System_SshServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/rate-limit YANG schema element.
type System_SshServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPath represents the /openconfig-system/system/ssh-server/config/session-limit YANG schema element.
type System_SshServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/session-limit YANG schema element.
type System_SshServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPath represents the /openconfig-system/system/ssh-server/config/timeout YANG schema element.
type System_SshServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/timeout YANG schema element.
type System_SshServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/ssh-server/config/enable"
func (n *System_SshServerPath) Enable() *System_SshServer_EnablePath {
	return &System_SshServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/ssh-server/config/enable"
func (n *System_SshServerPathAny) Enable() *System_SshServer_EnablePathAny {
	return &System_SshServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/protocol-version"
// Path from root: "/system/ssh-server/config/protocol-version"
func (n *System_SshServerPath) ProtocolVersion() *System_SshServer_ProtocolVersionPath {
	return &System_SshServer_ProtocolVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/protocol-version"
// Path from root: "/system/ssh-server/config/protocol-version"
func (n *System_SshServerPathAny) ProtocolVersion() *System_SshServer_ProtocolVersionPathAny {
	return &System_SshServer_ProtocolVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/ssh-server/config/rate-limit"
func (n *System_SshServerPath) RateLimit() *System_SshServer_RateLimitPath {
	return &System_SshServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/ssh-server/config/rate-limit"
func (n *System_SshServerPathAny) RateLimit() *System_SshServer_RateLimitPathAny {
	return &System_SshServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/ssh-server/config/session-limit"
func (n *System_SshServerPath) SessionLimit() *System_SshServer_SessionLimitPath {
	return &System_SshServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/ssh-server/config/session-limit"
func (n *System_SshServerPathAny) SessionLimit() *System_SshServer_SessionLimitPathAny {
	return &System_SshServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/ssh-server/config/timeout"
func (n *System_SshServerPath) Timeout() *System_SshServer_TimeoutPath {
	return &System_SshServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/ssh-server/config/timeout"
func (n *System_SshServerPathAny) Timeout() *System_SshServer_TimeoutPathAny {
	return &System_SshServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_TelnetServerPath represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPath struct {
	*ygot.NodePath
}

// System_TelnetServerPathAny represents the wildcard version of the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePath represents the /openconfig-system/system/telnet-server/config/enable YANG schema element.
type System_TelnetServer_EnablePath struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/enable YANG schema element.
type System_TelnetServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPath represents the /openconfig-system/system/telnet-server/config/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPath represents the /openconfig-system/system/telnet-server/config/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPath represents the /openconfig-system/system/telnet-server/config/timeout YANG schema element.
type System_TelnetServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/timeout YANG schema element.
type System_TelnetServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/telnet-server/config/enable"
func (n *System_TelnetServerPath) Enable() *System_TelnetServer_EnablePath {
	return &System_TelnetServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/telnet-server/config/enable"
func (n *System_TelnetServerPathAny) Enable() *System_TelnetServer_EnablePathAny {
	return &System_TelnetServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServerPath) RateLimit() *System_TelnetServer_RateLimitPath {
	return &System_TelnetServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServerPathAny) RateLimit() *System_TelnetServer_RateLimitPathAny {
	return &System_TelnetServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/telnet-server/config/session-limit"
func (n *System_TelnetServerPath) SessionLimit() *System_TelnetServer_SessionLimitPath {
	return &System_TelnetServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/telnet-server/config/session-limit"
func (n *System_TelnetServerPathAny) SessionLimit() *System_TelnetServer_SessionLimitPathAny {
	return &System_TelnetServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/telnet-server/config/timeout"
func (n *System_TelnetServerPath) Timeout() *System_TelnetServer_TimeoutPath {
	return &System_TelnetServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/telnet-server/config/timeout"
func (n *System_TelnetServerPathAny) Timeout() *System_TelnetServer_TimeoutPathAny {
	return &System_TelnetServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}
