/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/wenbli/gocode/pkg/mod/github.com/openconfig/ygot@v0.24.2/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package networkinstance

import (
	oc "github.com/openconfig/lemming/gnmi/internal/telemetry"
	"github.com/openconfig/ygot/ygot"
)

// NetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePath struct {
	*ygot.NodePath
}

// NetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/state/description YANG schema element.
type NetworkInstance_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/description YANG schema element.
type NetworkInstance_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/state/enabled YANG schema element.
type NetworkInstance_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/enabled YANG schema element.
type NetworkInstance_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledAddressFamiliesPath represents the /openconfig-network-instance/network-instances/network-instance/state/enabled-address-families YANG schema element.
type NetworkInstance_EnabledAddressFamiliesPath struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledAddressFamiliesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/enabled-address-families YANG schema element.
type NetworkInstance_EnabledAddressFamiliesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_MtuPath represents the /openconfig-network-instance/network-instances/network-instance/state/mtu YANG schema element.
type NetworkInstance_MtuPath struct {
	*ygot.NodePath
}

// NetworkInstance_MtuPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/mtu YANG schema element.
type NetworkInstance_MtuPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_NamePath represents the /openconfig-network-instance/network-instances/network-instance/state/name YANG schema element.
type NetworkInstance_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/name YANG schema element.
type NetworkInstance_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/state/router-id YANG schema element.
type NetworkInstance_RouterIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/router-id YANG schema element.
type NetworkInstance_RouterIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TypePath represents the /openconfig-network-instance/network-instances/network-instance/state/type YANG schema element.
type NetworkInstance_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/type YANG schema element.
type NetworkInstance_TypePathAny struct {
	*ygot.NodePath
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afts"
// Path from root: "/network-instances/network-instance/afts"
func (n *NetworkInstancePath) Afts() *NetworkInstance_AftsPath {
	return &NetworkInstance_AftsPath{
		NodePath: ygot.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afts"
// Path from root: "/network-instances/network-instance/afts"
func (n *NetworkInstancePathAny) Afts() *NetworkInstance_AftsPathAny {
	return &NetworkInstance_AftsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId (wildcarded): string
func (n *NetworkInstancePath) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	return &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId (wildcarded): string
func (n *NetworkInstancePathAny) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	return &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId: string
func (n *NetworkInstancePath) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPath {
	return &NetworkInstance_ConnectionPointPath{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId: string
func (n *NetworkInstancePathAny) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPathAny {
	return &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/state/description"
func (n *NetworkInstancePath) Description() *NetworkInstance_DescriptionPath {
	return &NetworkInstance_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/state/description"
func (n *NetworkInstancePathAny) Description() *NetworkInstance_DescriptionPathAny {
	return &NetworkInstance_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the network instance should be configured to be
// active on the network element
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/state/enabled"
func (n *NetworkInstancePath) Enabled() *NetworkInstance_EnabledPath {
	return &NetworkInstance_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the network instance should be configured to be
// active on the network element
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/state/enabled"
func (n *NetworkInstancePathAny) Enabled() *NetworkInstance_EnabledPathAny {
	return &NetworkInstance_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnabledAddressFamilies (leaf-list): The address families that are to be enabled for this
// network instance.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled-address-families"
// Path from root: "/network-instances/network-instance/state/enabled-address-families"
func (n *NetworkInstancePath) EnabledAddressFamilies() *NetworkInstance_EnabledAddressFamiliesPath {
	return &NetworkInstance_EnabledAddressFamiliesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnabledAddressFamilies (leaf-list): The address families that are to be enabled for this
// network instance.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled-address-families"
// Path from root: "/network-instances/network-instance/state/enabled-address-families"
func (n *NetworkInstancePathAny) EnabledAddressFamilies() *NetworkInstance_EnabledAddressFamiliesPathAny {
	return &NetworkInstance_EnabledAddressFamiliesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "encapsulation"
// Path from root: "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePath) Encapsulation() *NetworkInstance_EncapsulationPath {
	return &NetworkInstance_EncapsulationPath{
		NodePath: ygot.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "encapsulation"
// Path from root: "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePathAny) Encapsulation() *NetworkInstance_EncapsulationPathAny {
	return &NetworkInstance_EncapsulationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn"
// Path from root: "/network-instances/network-instance/evpn"
func (n *NetworkInstancePath) Evpn() *NetworkInstance_EvpnPath {
	return &NetworkInstance_EvpnPath{
		NodePath: ygot.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn"
// Path from root: "/network-instances/network-instance/evpn"
func (n *NetworkInstancePathAny) Evpn() *NetworkInstance_EvpnPathAny {
	return &NetworkInstance_EvpnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "fdb"
// Path from root: "/network-instances/network-instance/fdb"
func (n *NetworkInstancePath) Fdb() *NetworkInstance_FdbPath {
	return &NetworkInstance_FdbPath{
		NodePath: ygot.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "fdb"
// Path from root: "/network-instances/network-instance/fdb"
func (n *NetworkInstancePathAny) Fdb() *NetworkInstance_FdbPathAny {
	return &NetworkInstance_FdbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "inter-instance-policies"
// Path from root: "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePath) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPath {
	return &NetworkInstance_InterInstancePoliciesPath{
		NodePath: ygot.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "inter-instance-policies"
// Path from root: "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePathAny) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPathAny {
	return &NetworkInstance_InterInstancePoliciesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id (wildcarded): string
func (n *NetworkInstancePath) InterfaceAny() *NetworkInstance_InterfacePathAny {
	return &NetworkInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id (wildcarded): string
func (n *NetworkInstancePathAny) InterfaceAny() *NetworkInstance_InterfacePathAny {
	return &NetworkInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Interface (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id: string
func (n *NetworkInstancePath) Interface(Id string) *NetworkInstance_InterfacePath {
	return &NetworkInstance_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Interface (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id: string
func (n *NetworkInstancePathAny) Interface(Id string) *NetworkInstance_InterfacePathAny {
	return &NetworkInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls"
// Path from root: "/network-instances/network-instance/mpls"
func (n *NetworkInstancePath) Mpls() *NetworkInstance_MplsPath {
	return &NetworkInstance_MplsPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls"
// Path from root: "/network-instances/network-instance/mpls"
func (n *NetworkInstancePathAny) Mpls() *NetworkInstance_MplsPathAny {
	return &NetworkInstance_MplsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The maximum frame size which should be supported for this
// instance for Layer 2 frames
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mtu"
// Path from root: "/network-instances/network-instance/state/mtu"
func (n *NetworkInstancePath) Mtu() *NetworkInstance_MtuPath {
	return &NetworkInstance_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The maximum frame size which should be supported for this
// instance for Layer 2 frames
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mtu"
// Path from root: "/network-instances/network-instance/state/mtu"
func (n *NetworkInstancePathAny) Mtu() *NetworkInstance_MtuPathAny {
	return &NetworkInstance_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/state/name"
func (n *NetworkInstancePath) Name() *NetworkInstance_NamePath {
	return &NetworkInstance_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/state/name"
func (n *NetworkInstancePathAny) Name() *NetworkInstance_NamePathAny {
	return &NetworkInstance_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
// ----------------------------------------
// Defining module: "openconfig-policy-forwarding"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding"
// Path from root: "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePath) PolicyForwarding() *NetworkInstance_PolicyForwardingPath {
	return &NetworkInstance_PolicyForwardingPath{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
// ----------------------------------------
// Defining module: "openconfig-policy-forwarding"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding"
// Path from root: "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePathAny) PolicyForwarding() *NetworkInstance_PolicyForwardingPathAny {
	return &NetworkInstance_PolicyForwardingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePath) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePathAny) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
}

// ProtocolAnyName (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePath) ProtocolAnyName(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": "*"},
			n,
		),
	}
}

// ProtocolAnyName (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePathAny) ProtocolAnyName(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": "*"},
			n,
		),
	}
}

// ProtocolAnyIdentifier (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePath) ProtocolAnyIdentifier(Name string) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": Name},
			n,
		),
	}
}

// ProtocolAnyIdentifier (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePathAny) ProtocolAnyIdentifier(Name string) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": Name},
			n,
		),
	}
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePath) Protocol(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPath {
	return &NetworkInstance_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePathAny) Protocol(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/route-distinguisher"
// Path from root: "/network-instances/network-instance/state/route-distinguisher"
func (n *NetworkInstancePath) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPath {
	return &NetworkInstance_RouteDistinguisherPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/route-distinguisher"
// Path from root: "/network-instances/network-instance/state/route-distinguisher"
func (n *NetworkInstancePathAny) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPathAny {
	return &NetworkInstance_RouteDistinguisherPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteLimitAny (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	return &NetworkInstance_RouteLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
}

// RouteLimitAny (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	return &NetworkInstance_RouteLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
}

// RouteLimit (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) RouteLimit(Afi oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPath {
	return &NetworkInstance_RouteLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
}

// RouteLimit (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) RouteLimit(Afi oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPathAny {
	return &NetworkInstance_RouteLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-id"
// Path from root: "/network-instances/network-instance/state/router-id"
func (n *NetworkInstancePath) RouterId() *NetworkInstance_RouterIdPath {
	return &NetworkInstance_RouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-id"
// Path from root: "/network-instances/network-instance/state/router-id"
func (n *NetworkInstancePathAny) RouterId() *NetworkInstance_RouterIdPathAny {
	return &NetworkInstance_RouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePath) SegmentRouting() *NetworkInstance_SegmentRoutingPath {
	return &NetworkInstance_SegmentRoutingPath{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePathAny) SegmentRouting() *NetworkInstance_SegmentRoutingPathAny {
	return &NetworkInstance_SegmentRoutingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableAny() *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableAny() *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableAnyAddressFamily (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableAnyAddressFamily(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": "*"},
			n,
		),
	}
}

// TableAnyAddressFamily (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableAnyAddressFamily(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": "*"},
			n,
		),
	}
}

// TableAnyProtocol (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableAnyProtocol(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableAnyProtocol (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableAnyProtocol(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) Table(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePath {
	return &NetworkInstance_TablePath{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) Table(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyDstProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnyDstProtocolAnyAddressFamily(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyDstProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnyDstProtocolAnyAddressFamily(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnySrcProtocolAnyAddressFamily(DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnySrcProtocolAnyAddressFamily(DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnyAddressFamily(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnyAddressFamily(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnySrcProtocolAnyDstProtocol(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnySrcProtocolAnyDstProtocol(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnyDstProtocol(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnyDstProtocol(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnySrcProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnySrcProtocol(DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnySrcProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnySrcProtocol(DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnection(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPath {
	return &NetworkInstance_TableConnectionPath{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnection(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/state/type"
func (n *NetworkInstancePath) Type() *NetworkInstance_TypePath {
	return &NetworkInstance_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/state/type"
func (n *NetworkInstancePathAny) Type() *NetworkInstance_TypePathAny {
	return &NetworkInstance_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanAny (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId (wildcarded): uint16
func (n *NetworkInstancePath) VlanAny() *NetworkInstance_VlanPathAny {
	return &NetworkInstance_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
}

// VlanAny (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId (wildcarded): uint16
func (n *NetworkInstancePathAny) VlanAny() *NetworkInstance_VlanPathAny {
	return &NetworkInstance_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
}

// Vlan (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId: uint16
func (n *NetworkInstancePath) Vlan(VlanId uint16) *NetworkInstance_VlanPath {
	return &NetworkInstance_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
}

// Vlan (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId: uint16
func (n *NetworkInstancePathAny) Vlan(VlanId uint16) *NetworkInstance_VlanPathAny {
	return &NetworkInstance_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
}

// NetworkInstance_AftsPath represents the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPath struct {
	*ygot.NodePath
}

// NetworkInstance_AftsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPathAny struct {
	*ygot.NodePath
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPath) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	return &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPathAny) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	return &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix: string
func (n *NetworkInstance_AftsPath) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPath {
	return &NetworkInstance_Afts_Ipv4EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPathAny {
	return &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPath) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	return &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPathAny) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	return &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix: string
func (n *NetworkInstance_AftsPath) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPath {
	return &NetworkInstance_Afts_Ipv6EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPathAny {
	return &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label (wildcarded): [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPath) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	return &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label (wildcarded): [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPathAny) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	return &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPath) LabelEntry(Label oc.NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPath {
	return &NetworkInstance_Afts_LabelEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPathAny) LabelEntry(Label oc.NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPathAny {
	return &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_AftsPath) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	return &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_AftsPathAny) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	return &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress: string
func (n *NetworkInstance_AftsPath) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPath {
	return &NetworkInstance_Afts_MacEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress: string
func (n *NetworkInstance_AftsPathAny) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPathAny {
	return &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPath) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPathAny) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_AftsPath) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPath {
	return &NetworkInstance_Afts_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_AftsPathAny) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id (wildcarded): uint64
func (n *NetworkInstance_AftsPath) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id (wildcarded): uint64
func (n *NetworkInstance_AftsPathAny) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id: uint64
func (n *NetworkInstance_AftsPath) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPath {
	return &NetworkInstance_Afts_NextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id: uint64
func (n *NetworkInstance_AftsPathAny) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPath) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index: uint64
func (n *NetworkInstance_AftsPath) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPath {
	return &NetworkInstance_Afts_PolicyForwardingEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index: uint64
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-synced"
// Path from root: "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPath) StateSynced() *NetworkInstance_Afts_StateSyncedPath {
	return &NetworkInstance_Afts_StateSyncedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-synced"
// Path from root: "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPathAny) StateSynced() *NetworkInstance_Afts_StateSyncedPathAny {
	return &NetworkInstance_Afts_StateSyncedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv4EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_PrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_PrefixPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv4EntryPath) Counters() *NetworkInstance_Afts_Ipv4Entry_CountersPath {
	return &NetworkInstance_Afts_Ipv4Entry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) Counters() *NetworkInstance_Afts_Ipv4Entry_CountersPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv4EntryPath) DecapsulateHeader() *NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath {
	return &NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) DecapsulateHeader() *NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv4EntryPath) EntryMetadata() *NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath {
	return &NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) EntryMetadata() *NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv4EntryPath) OriginProtocol() *NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath {
	return &NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) OriginProtocol() *NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv4 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv4EntryPath) Prefix() *NetworkInstance_Afts_Ipv4Entry_PrefixPath {
	return &NetworkInstance_Afts_Ipv4Entry_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv4 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) Prefix() *NetworkInstance_Afts_Ipv4Entry_PrefixPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv4Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv6EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_PrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_PrefixPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv6EntryPath) Counters() *NetworkInstance_Afts_Ipv6Entry_CountersPath {
	return &NetworkInstance_Afts_Ipv6Entry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) Counters() *NetworkInstance_Afts_Ipv6Entry_CountersPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv6EntryPath) DecapsulateHeader() *NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath {
	return &NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) DecapsulateHeader() *NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv6EntryPath) EntryMetadata() *NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath {
	return &NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) EntryMetadata() *NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv6EntryPath) OriginProtocol() *NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath {
	return &NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) OriginProtocol() *NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv6 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv6EntryPath) Prefix() *NetworkInstance_Afts_Ipv6Entry_PrefixPath {
	return &NetworkInstance_Afts_Ipv6Entry_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv6 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) Prefix() *NetworkInstance_Afts_Ipv6Entry_PrefixPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv6Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_LabelEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_LabelEntry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/label YANG schema element.
type NetworkInstance_Afts_LabelEntry_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/label YANG schema element.
type NetworkInstance_Afts_LabelEntry_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters"
func (n *NetworkInstance_Afts_LabelEntryPath) Counters() *NetworkInstance_Afts_LabelEntry_CountersPath {
	return &NetworkInstance_Afts_LabelEntry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters"
func (n *NetworkInstance_Afts_LabelEntryPathAny) Counters() *NetworkInstance_Afts_LabelEntry_CountersPathAny {
	return &NetworkInstance_Afts_LabelEntry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_LabelEntryPath) EntryMetadata() *NetworkInstance_Afts_LabelEntry_EntryMetadataPath {
	return &NetworkInstance_Afts_LabelEntry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_LabelEntryPathAny) EntryMetadata() *NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): The top-most MPLS label that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/label"
func (n *NetworkInstance_Afts_LabelEntryPath) Label() *NetworkInstance_Afts_LabelEntry_LabelPath {
	return &NetworkInstance_Afts_LabelEntry_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): The top-most MPLS label that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/label"
func (n *NetworkInstance_Afts_LabelEntryPathAny) Label() *NetworkInstance_Afts_LabelEntry_LabelPathAny {
	return &NetworkInstance_Afts_LabelEntry_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoppedMplsLabelStack (leaf-list): The MPLS label stack to be popped from the packet when
// switched by the system. The stack is encoded as a leaf-list
// such that the first entry is the label that is outer-most (i.e.,
// furthest from the bottom of the stack).
//
// If the local system pops the outer-most label 400, then the
// value of this list is [400,]. If the local system removes two
// labels, the outer-most being 500, and the second of which is
// 400, then the value of the list is [500, 400].
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/popped-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack"
func (n *NetworkInstance_Afts_LabelEntryPath) PoppedMplsLabelStack() *NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath {
	return &NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "popped-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoppedMplsLabelStack (leaf-list): The MPLS label stack to be popped from the packet when
// switched by the system. The stack is encoded as a leaf-list
// such that the first entry is the label that is outer-most (i.e.,
// furthest from the bottom of the stack).
//
// If the local system pops the outer-most label 400, then the
// value of this list is [400,]. If the local system removes two
// labels, the outer-most being 500, and the second of which is
// 400, then the value of the list is [500, 400].
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/popped-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack"
func (n *NetworkInstance_Afts_LabelEntryPathAny) PoppedMplsLabelStack() *NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny {
	return &NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "popped-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_LabelEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_MacEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_MacEntry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_MacEntry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_MacEntry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_MacEntry_MacAddressPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters"
func (n *NetworkInstance_Afts_MacEntryPath) Counters() *NetworkInstance_Afts_MacEntry_CountersPath {
	return &NetworkInstance_Afts_MacEntry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters"
func (n *NetworkInstance_Afts_MacEntryPathAny) Counters() *NetworkInstance_Afts_MacEntry_CountersPathAny {
	return &NetworkInstance_Afts_MacEntry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_MacEntryPath) EntryMetadata() *NetworkInstance_Afts_MacEntry_EntryMetadataPath {
	return &NetworkInstance_Afts_MacEntry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_MacEntryPathAny) EntryMetadata() *NetworkInstance_Afts_MacEntry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_MacEntry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The outer MAC address of the Ethernet frame that must
// be matched for the AFT entry to be utilised.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address"
func (n *NetworkInstance_Afts_MacEntryPath) MacAddress() *NetworkInstance_Afts_MacEntry_MacAddressPath {
	return &NetworkInstance_Afts_MacEntry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The outer MAC address of the Ethernet frame that must
// be matched for the AFT entry to be utilised.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address"
func (n *NetworkInstance_Afts_MacEntryPathAny) MacAddress() *NetworkInstance_Afts_MacEntry_MacAddressPathAny {
	return &NetworkInstance_Afts_MacEntry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_MacEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_DecapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_EncapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_IpAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_IpAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_LspNamePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name YANG schema element.
type NetworkInstance_Afts_NextHop_LspNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_LspNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name YANG schema element.
type NetworkInstance_Afts_NextHop_LspNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_Afts_NextHop_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_Afts_NextHop_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_NextHop_OriginProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_NextHop_OriginProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PopTopLabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_Afts_NextHop_PopTopLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PopTopLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_Afts_NextHop_PopTopLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_ProgrammedIndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_Afts_NextHop_ProgrammedIndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_VniLabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label YANG schema element.
type NetworkInstance_Afts_NextHop_VniLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_VniLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label YANG schema element.
type NetworkInstance_Afts_NextHop_VniLabelPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters"
func (n *NetworkInstance_Afts_NextHopPath) Counters() *NetworkInstance_Afts_NextHop_CountersPath {
	return &NetworkInstance_Afts_NextHop_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters"
func (n *NetworkInstance_Afts_NextHopPathAny) Counters() *NetworkInstance_Afts_NextHop_CountersPathAny {
	return &NetworkInstance_Afts_NextHop_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_Afts_NextHopPath) DecapsulateHeader() *NetworkInstance_Afts_NextHop_DecapsulateHeaderPath {
	return &NetworkInstance_Afts_NextHop_DecapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_Afts_NextHopPathAny) DecapsulateHeader() *NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny {
	return &NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_Afts_NextHopPath) EncapsulateHeader() *NetworkInstance_Afts_NextHop_EncapsulateHeaderPath {
	return &NetworkInstance_Afts_NextHop_EncapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_Afts_NextHopPathAny) EncapsulateHeader() *NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny {
	return &NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopPath) Index() *NetworkInstance_Afts_NextHop_IndexPath {
	return &NetworkInstance_Afts_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopPathAny) Index() *NetworkInstance_Afts_NextHop_IndexPathAny {
	return &NetworkInstance_Afts_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Afts_NextHopPath) InterfaceRef() *NetworkInstance_Afts_NextHop_InterfaceRefPath {
	return &NetworkInstance_Afts_NextHop_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Afts_NextHopPathAny) InterfaceRef() *NetworkInstance_Afts_NextHop_InterfaceRefPathAny {
	return &NetworkInstance_Afts_NextHop_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpAddress (leaf): The IP address of the next-hop system.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_Afts_NextHopPath) IpAddress() *NetworkInstance_Afts_NextHop_IpAddressPath {
	return &NetworkInstance_Afts_NextHop_IpAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpAddress (leaf): The IP address of the next-hop system.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_Afts_NextHopPathAny) IpAddress() *NetworkInstance_Afts_NextHop_IpAddressPathAny {
	return &NetworkInstance_Afts_NextHop_IpAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpInIp (container): When specified, the packet has an IP-in-IP header applied to it before
// forwarding to the specified next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ip-in-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip"
func (n *NetworkInstance_Afts_NextHopPath) IpInIp() *NetworkInstance_Afts_NextHop_IpInIpPath {
	return &NetworkInstance_Afts_NextHop_IpInIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ip-in-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpInIp (container): When specified, the packet has an IP-in-IP header applied to it before
// forwarding to the specified next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ip-in-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip"
func (n *NetworkInstance_Afts_NextHopPathAny) IpInIp() *NetworkInstance_Afts_NextHop_IpInIpPathAny {
	return &NetworkInstance_Afts_NextHop_IpInIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ip-in-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LspName (leaf): Where applicable, the protocol name for the next-hop labelled
// forwarding entry. This leaf is applicable only to next-hops
// which include MPLS label information, and its value typically
// corresponds to the RSVP-TE LSP name.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsp-name"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name"
func (n *NetworkInstance_Afts_NextHopPath) LspName() *NetworkInstance_Afts_NextHop_LspNamePath {
	return &NetworkInstance_Afts_NextHop_LspNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsp-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// LspName (leaf): Where applicable, the protocol name for the next-hop labelled
// forwarding entry. This leaf is applicable only to next-hops
// which include MPLS label information, and its value typically
// corresponds to the RSVP-TE LSP name.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsp-name"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name"
func (n *NetworkInstance_Afts_NextHopPathAny) LspName() *NetworkInstance_Afts_NextHop_LspNamePathAny {
	return &NetworkInstance_Afts_NextHop_LspNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsp-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_Afts_NextHopPath) MacAddress() *NetworkInstance_Afts_NextHop_MacAddressPath {
	return &NetworkInstance_Afts_NextHop_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_Afts_NextHopPathAny) MacAddress() *NetworkInstance_Afts_NextHop_MacAddressPathAny {
	return &NetworkInstance_Afts_NextHop_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_Afts_NextHopPath) OriginProtocol() *NetworkInstance_Afts_NextHop_OriginProtocolPath {
	return &NetworkInstance_Afts_NextHop_OriginProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_Afts_NextHopPathAny) OriginProtocol() *NetworkInstance_Afts_NextHop_OriginProtocolPathAny {
	return &NetworkInstance_Afts_NextHop_OriginProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pop-top-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_Afts_NextHopPath) PopTopLabel() *NetworkInstance_Afts_NextHop_PopTopLabelPath {
	return &NetworkInstance_Afts_NextHop_PopTopLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pop-top-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_Afts_NextHopPathAny) PopTopLabel() *NetworkInstance_Afts_NextHop_PopTopLabelPathAny {
	return &NetworkInstance_Afts_NextHop_PopTopLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_Afts_NextHopPath) ProgrammedIndex() *NetworkInstance_Afts_NextHop_ProgrammedIndexPath {
	return &NetworkInstance_Afts_NextHop_ProgrammedIndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_Afts_NextHopPathAny) ProgrammedIndex() *NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny {
	return &NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
// - the stack is encoded as a leaf list whereby the order of the
//
//	entries is such that the first entry in the list is the
//	label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pushed-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_Afts_NextHopPath) PushedMplsLabelStack() *NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath {
	return &NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
// - the stack is encoded as a leaf list whereby the order of the
//
//	entries is such that the first entry in the list is the
//	label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pushed-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_Afts_NextHopPathAny) PushedMplsLabelStack() *NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny {
	return &NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// TunnelSrcIpAddress (leaf): Where applicable this represents the tunnel source ip address.
// For VXLAN this represents the source VTEP ip address
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tunnel-src-ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHopPath) TunnelSrcIpAddress() *NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath {
	return &NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// TunnelSrcIpAddress (leaf): Where applicable this represents the tunnel source ip address.
// For VXLAN this represents the source VTEP ip address
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tunnel-src-ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHopPathAny) TunnelSrcIpAddress() *NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny {
	return &NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniLabel (leaf): Where applicable, the next hop label representing the virtual
// network identifier (VNI) for the forwarding entry. This leaf is
// applicable only to next-hops which include VXLAN encapsulation
// header information
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label"
func (n *NetworkInstance_Afts_NextHopPath) VniLabel() *NetworkInstance_Afts_NextHop_VniLabelPath {
	return &NetworkInstance_Afts_NextHop_VniLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniLabel (leaf): Where applicable, the next hop label representing the virtual
// network identifier (VNI) for the forwarding entry. This leaf is
// applicable only to next-hops which include VXLAN encapsulation
// header information
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label"
func (n *NetworkInstance_Afts_NextHopPathAny) VniLabel() *NetworkInstance_Afts_NextHop_VniLabelPathAny {
	return &NetworkInstance_Afts_NextHop_VniLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ColorPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ColorPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ColorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ColorPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny struct {
	*ygot.NodePath
}

// BackupNextHopGroup (leaf): The backup next-hop-group for the current group. When all
// entries within the next-hop group become unusable, the backup
// next-hop group is used if specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/backup-next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroupPath) BackupNextHopGroup() *NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath {
	return &NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "backup-next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackupNextHopGroup (leaf): The backup next-hop-group for the current group. When all
// entries within the next-hop group become unusable, the backup
// next-hop group is used if specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/backup-next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) BackupNextHopGroup() *NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "backup-next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Color (leaf): An arbitrary colour that is used as an identifier for the next-hop
// group. Some next-hop resolutions may utilise the colour to select
// the particular next-hop-group that a routing entry should be resolved
// to. In this case, next-hop-group selection may be based on colour
// matches rather than the protocol specified next-hop.
//
// Regardless of whether the next-hop-group's specified colour is
// used to select an AFT's active forwarding entry, the next-hop-group
// referenced by an entry should be the currently active value.
//
// Next-hop-groups that are installed on the system through a protocol
// that allows injection of such entries (e.g., BGP using the SR-TE
// Policy SAFI, or gRPC-based RIB programming) should have the colour
// specified in the injecting protocol within this leaf.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/color"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color"
func (n *NetworkInstance_Afts_NextHopGroupPath) Color() *NetworkInstance_Afts_NextHopGroup_ColorPath {
	return &NetworkInstance_Afts_NextHopGroup_ColorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "color"},
			map[string]interface{}{},
			n,
		),
	}
}

// Color (leaf): An arbitrary colour that is used as an identifier for the next-hop
// group. Some next-hop resolutions may utilise the colour to select
// the particular next-hop-group that a routing entry should be resolved
// to. In this case, next-hop-group selection may be based on colour
// matches rather than the protocol specified next-hop.
//
// Regardless of whether the next-hop-group's specified colour is
// used to select an AFT's active forwarding entry, the next-hop-group
// referenced by an entry should be the currently active value.
//
// Next-hop-groups that are installed on the system through a protocol
// that allows injection of such entries (e.g., BGP using the SR-TE
// Policy SAFI, or gRPC-based RIB programming) should have the colour
// specified in the injecting protocol within this leaf.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/color"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) Color() *NetworkInstance_Afts_NextHopGroup_ColorPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ColorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "color"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConditionAny (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) ConditionAny() *NetworkInstance_Afts_NextHopGroup_ConditionPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// ConditionAny (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) ConditionAny() *NetworkInstance_Afts_NextHopGroup_ConditionPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Condition (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id: uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) Condition(Id uint64) *NetworkInstance_Afts_NextHopGroup_ConditionPath {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPath{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Condition (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id: uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) Condition(Id uint64) *NetworkInstance_Afts_NextHopGroup_ConditionPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index
// is not expected to be consistent across reboots, or
// reprogramming of the next-hop-group. When updating
// a next-hop-group, if the group is removed by the system
// or assigned an alternate identifier, the system should
// send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group
// is changed, all AFT entries that reference it must
// also be updated.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Afts_NextHopGroupPath) Id() *NetworkInstance_Afts_NextHopGroup_IdPath {
	return &NetworkInstance_Afts_NextHopGroup_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index
// is not expected to be consistent across reboots, or
// reprogramming of the next-hop-group. When updating
// a next-hop-group, if the group is removed by the system
// or assigned an alternate identifier, the system should
// send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group
// is changed, all AFT entries that reference it must
// also be updated.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) Id() *NetworkInstance_Afts_NextHopGroup_IdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) NextHopAny() *NetworkInstance_Afts_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Afts_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Afts_NextHopGroup_NextHopPath {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Afts_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ProgrammedId (leaf): In some routing protocols or route injection mechanisms it
// is possible to supply the ID of the next-hop-group via
// configuration or the protocol itself. In some systems, it
// may not be possible to use this same ID when returning the
// NHG via telemetry.
//
// This leaf reflects the ID of the next-hop group that was
// used by the original programming mechanism.
//
// This leaf allows a client to create an association between
// a programmed next-hop's original ID, and the ID that is
// extracted via telemetry as a key in the next-hop-group AFT
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id"
func (n *NetworkInstance_Afts_NextHopGroupPath) ProgrammedId() *NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath {
	return &NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedId (leaf): In some routing protocols or route injection mechanisms it
// is possible to supply the ID of the next-hop-group via
// configuration or the protocol itself. In some systems, it
// may not be possible to use this same ID when returning the
// NHG via telemetry.
//
// This leaf reflects the ID of the next-hop group that was
// used by the original programming mechanism.
//
// This leaf allows a client to create an association between
// a programmed next-hop's original ID, and the ID that is
// extracted via telemetry as a key in the next-hop-group AFT
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) ProgrammedId() *NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroup_ConditionPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the conditional criteria.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the conditional criteria.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id (wildcarded): string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id (wildcarded): string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Id (leaf): A unique reference for the input interface.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique reference for the input interface.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny struct {
	*ygot.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/weight"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/weight"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHop_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHop_IpInIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny struct {
	*ygot.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dst-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPath {
	return &NetworkInstance_Afts_NextHop_IpInIp_DstIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dst-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny {
	return &NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/src-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath {
	return &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/src-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny {
	return &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_PolicyForwardingEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) Counters() *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) Counters() *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) EntryMetadata() *NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) EntryMetadata() *NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): An arbitrary 64-bit index identifying the policy forwarding
// AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) Index() *NetworkInstance_Afts_PolicyForwardingEntry_IndexPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): An arbitrary 64-bit index identifying the policy forwarding
// AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) Index() *NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpDscp (leaf): The value of the differentiated services code point (DSCP) to
// be matched for the forwarding entry. The value is specified in
// cases where specific class-based forwarding based on IP is
// implemented by the device.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-dscp"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) IpDscp() *NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpDscp (leaf): The value of the differentiated services code point (DSCP) to
// be matched for the forwarding entry. The value is specified in
// cases where specific class-based forwarding based on IP is
// implemented by the device.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-dscp"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) IpDscp() *NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The IP prefix that the forwarding entry matches.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-prefix"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) IpPrefix() *NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The IP prefix that the forwarding entry matches.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-prefix"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) IpPrefix() *NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpProtocol (leaf): The value of the IP protocol field of an IPv4 packet, or the
// next-header field of an IPv6 packet which is to be matched by
// the AFT entry. This field is utilised where forwarding is
// performed based on L4 information.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-protocol"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) IpProtocol() *NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpProtocol (leaf): The value of the IP protocol field of an IPv4 packet, or the
// next-header field of an IPv6 packet which is to be matched by
// the AFT entry. This field is utilised where forwarding is
// performed based on L4 information.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-protocol"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) IpProtocol() *NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4DstPort (leaf): The value of the destination port field of the transport
// header that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-dst-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) L4DstPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-dst-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4DstPort (leaf): The value of the destination port field of the transport
// header that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-dst-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) L4DstPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-dst-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4SrcPort (leaf): The value of the source port field of the transport header
// that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-src-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) L4SrcPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-src-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4SrcPort (leaf): The value of the source port field of the transport header
// that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-src-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) L4SrcPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-src-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address that the forwarding entry matches. Used for
// Layer 2 forwarding entries, e.g., within a VSI instance.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) MacAddress() *NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address that the forwarding entry matches. Used for
// Layer 2 forwarding entries, e.g., within a VSI instance.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) MacAddress() *NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label that the forwarding entry matches. Used for
// MPLS forwarding entries, whereby the local device acts as an
// LSR.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) MplsLabel() *NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label that the forwarding entry matches. Used for
// MPLS forwarding entries, whereby the local device acts as an
// LSR.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) MplsLabel() *NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTc (leaf): The value of the MPLS Traffic Class bits (formerly known as
// the MPLS experimental bits) that are to be matched by the AFT
// entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-tc"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) MplsTc() *NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTc (leaf): The value of the MPLS Traffic Class bits (formerly known as
// the MPLS experimental bits) that are to be matched by the AFT
// entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-tc"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) MplsTc() *NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_StateSyncedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSyncedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny struct {
	*ygot.NodePath
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv4-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPath {
	return &NetworkInstance_Afts_StateSynced_Ipv4UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv4-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny {
	return &NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv6-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPath {
	return &NetworkInstance_Afts_StateSynced_Ipv6UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv6-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny {
	return &NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/state/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/state/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny struct {
	*ygot.NodePath
}

// ConnectionPointId (leaf): An identifier for a connection point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/connection-point-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/state/connection-point-id"
func (n *NetworkInstance_ConnectionPointPath) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPath {
	return &NetworkInstance_ConnectionPoint_ConnectionPointIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionPointId (leaf): An identifier for a connection point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/connection-point-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/state/connection-point-id"
func (n *NetworkInstance_ConnectionPointPathAny) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny {
	return &NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId (wildcarded): string
func (n *NetworkInstance_ConnectionPointPath) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	return &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId (wildcarded): string
func (n *NetworkInstance_ConnectionPointPathAny) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	return &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId: string
func (n *NetworkInstance_ConnectionPointPath) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPath {
	return &NetworkInstance_ConnectionPoint_EndpointPath{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId: string
func (n *NetworkInstance_ConnectionPointPathAny) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPathAny {
	return &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_EndpointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePathAny struct {
	*ygot.NodePath
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointId (leaf): An identifier for the endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/endpoint-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointId (leaf): An identifier for the endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/endpoint-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_LocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/precedence"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "precedence"},
			map[string]interface{}{},
			n,
		),
	}
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/precedence"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "precedence"},
			map[string]interface{}{},
			n,
		),
	}
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "remote"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_RemotePath{
		NodePath: ygot.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "remote"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_VxlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-label-block-offset"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-label-block-offset"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-label-block-size"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-label-block-size"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny struct {
	*ygot.NodePath
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/remote-system"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/remote-system"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/virtual-circuit-identifier"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/virtual-circuit-identifier"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny struct {
	*ygot.NodePath
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress (wildcarded): string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress (wildcarded): string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
}

// EndpointPeer (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
}

// EndpointPeer (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni (wildcarded): uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni (wildcarded): uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
}

// SourceInterface (leaf): Source loopback interface name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceInterface (leaf): Source loopback interface name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny struct {
	*ygot.NodePath
}

// ControlPlaneVnis (leaf): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/control-plane-vnis"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
	}
}

// ControlPlaneVnis (leaf): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/control-plane-vnis"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-address"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-address"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterMac (leaf): MAC address of the remote VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-mac"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterMac (leaf): MAC address of the remote VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-mac"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/uptime"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/uptime"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny struct {
	*ygot.NodePath
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bridge-domain"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bridge-domain"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vrf-name"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vrf-name"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/learning-mode"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/learning-mode"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multidestination-traffic"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multidestination-traffic"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
	}
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/svi-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/svi-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): L2VNI or L3VNI Identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): L2VNI or L3VNI Identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniType (leaf): The type of virtual network identfier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniType (leaf): The type of virtual network identfier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_EncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPath struct {
	*ygot.NodePath
}

// NetworkInstance_EncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_ControlWordPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPath struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_ControlWordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_LabelAllocationModePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_LabelAllocationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePathAny struct {
	*ygot.NodePath
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/control-word"
// Path from root: "/network-instances/network-instance/encapsulation/state/control-word"
func (n *NetworkInstance_EncapsulationPath) ControlWord() *NetworkInstance_Encapsulation_ControlWordPath {
	return &NetworkInstance_Encapsulation_ControlWordPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "control-word"},
			map[string]interface{}{},
			n,
		),
	}
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/control-word"
// Path from root: "/network-instances/network-instance/encapsulation/state/control-word"
func (n *NetworkInstance_EncapsulationPathAny) ControlWord() *NetworkInstance_Encapsulation_ControlWordPathAny {
	return &NetworkInstance_Encapsulation_ControlWordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "control-word"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulation-type"
// Path from root: "/network-instances/network-instance/encapsulation/state/encapsulation-type"
func (n *NetworkInstance_EncapsulationPath) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePath {
	return &NetworkInstance_Encapsulation_EncapsulationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulation-type"
// Path from root: "/network-instances/network-instance/encapsulation/state/encapsulation-type"
func (n *NetworkInstance_EncapsulationPathAny) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePathAny {
	return &NetworkInstance_Encapsulation_EncapsulationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-allocation-mode"
// Path from root: "/network-instances/network-instance/encapsulation/state/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPath) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePath {
	return &NetworkInstance_Encapsulation_LabelAllocationModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-allocation-mode"
// Path from root: "/network-instances/network-instance/encapsulation/state/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPathAny) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePathAny {
	return &NetworkInstance_Encapsulation_LabelAllocationModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_EvpnPath represents the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPath struct {
	*ygot.NodePath
}

// NetworkInstance_EvpnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPathAny struct {
	*ygot.NodePath
}

// EthernetSegmentAny (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name (wildcarded): string
func (n *NetworkInstance_EvpnPath) EthernetSegmentAny() *NetworkInstance_Evpn_EthernetSegmentPathAny {
	return &NetworkInstance_Evpn_EthernetSegmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// EthernetSegmentAny (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name (wildcarded): string
func (n *NetworkInstance_EvpnPathAny) EthernetSegmentAny() *NetworkInstance_Evpn_EthernetSegmentPathAny {
	return &NetworkInstance_Evpn_EthernetSegmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// EthernetSegment (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name: string
func (n *NetworkInstance_EvpnPath) EthernetSegment(Name string) *NetworkInstance_Evpn_EthernetSegmentPath {
	return &NetworkInstance_Evpn_EthernetSegmentPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// EthernetSegment (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name: string
func (n *NetworkInstance_EvpnPathAny) EthernetSegment(Name string) *NetworkInstance_Evpn_EthernetSegmentPathAny {
	return &NetworkInstance_Evpn_EthernetSegmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi (wildcarded): string
func (n *NetworkInstance_EvpnPath) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi (wildcarded): string
func (n *NetworkInstance_EvpnPathAny) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi: string
func (n *NetworkInstance_EvpnPath) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePath {
	return &NetworkInstance_Evpn_EvpnInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi: string
func (n *NetworkInstance_EvpnPathAny) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
}

// NetworkInstance_Evpn_EthernetSegmentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment YANG schema element.
type NetworkInstance_Evpn_EthernetSegmentPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegmentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment YANG schema element.
type NetworkInstance_Evpn_EthernetSegmentPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi-type YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi-type YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/interface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/interface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_NamePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/name YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/name YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_RedundancyModePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/redundancy-mode YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_RedundancyModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/redundancy-mode YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny struct {
	*ygot.NodePath
}

// DfElection (container): Top container for the configuration and state parameters
// for the Designated forwarding Election
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "df-election"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) DfElection() *NetworkInstance_Evpn_EthernetSegment_DfElectionPath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElectionPath{
		NodePath: ygot.NewNodePath(
			[]string{"df-election"},
			map[string]interface{}{},
			n,
		),
	}
}

// DfElection (container): Top container for the configuration and state parameters
// for the Designated forwarding Election
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "df-election"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) DfElection() *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"df-election"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI) value.
// For ESI Type 0: The esi leaf value is directly configured by the operator.
// For ESI Type 1: The AUTO enum must be used.
// For ESI Type 2: The AUTO enum must be used.
// For ESI Type 3: The directly configured or AUTO enum must be used.
// For ESI Type 4: The directly configured or AUTO enum must be used.
// For ESI Type 5: The directly configured or AUTO enum must be used.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Esi() *NetworkInstance_Evpn_EthernetSegment_EsiPath {
	return &NetworkInstance_Evpn_EthernetSegment_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI) value.
// For ESI Type 0: The esi leaf value is directly configured by the operator.
// For ESI Type 1: The AUTO enum must be used.
// For ESI Type 2: The AUTO enum must be used.
// For ESI Type 3: The directly configured or AUTO enum must be used.
// For ESI Type 4: The directly configured or AUTO enum must be used.
// For ESI Type 5: The directly configured or AUTO enum must be used.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Esi() *NetworkInstance_Evpn_EthernetSegment_EsiPathAny {
	return &NetworkInstance_Evpn_EthernetSegment_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// EsiType (leaf): ESI Type is a 1-octet field (most significant octet) that
// specifies the format of the remaining 9 octets (ESI Value).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi-type"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi-type"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) EsiType() *NetworkInstance_Evpn_EthernetSegment_EsiTypePath {
	return &NetworkInstance_Evpn_EthernetSegment_EsiTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EsiType (leaf): ESI Type is a 1-octet field (most significant octet) that
// specifies the format of the remaining 9 octets (ESI Value).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi-type"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/esi-type"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) EsiType() *NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/interface"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Interface() *NetworkInstance_Evpn_EthernetSegment_InterfacePath {
	return &NetworkInstance_Evpn_EthernetSegment_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/interface"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Interface() *NetworkInstance_Evpn_EthernetSegment_InterfacePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Ethernet Segment name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/name"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Name() *NetworkInstance_Evpn_EthernetSegment_NamePath {
	return &NetworkInstance_Evpn_EthernetSegment_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Ethernet Segment name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/name"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Name() *NetworkInstance_Evpn_EthernetSegment_NamePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedundancyMode (leaf): Multihoming options for load balancing of
// traffic in the Ethernet Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/redundancy-mode"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/redundancy-mode"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) RedundancyMode() *NetworkInstance_Evpn_EthernetSegment_RedundancyModePath {
	return &NetworkInstance_Evpn_EthernetSegment_RedundancyModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "redundancy-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedundancyMode (leaf): Multihoming options for load balancing of
// traffic in the Ethernet Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/redundancy-mode"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/redundancy-mode"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) RedundancyMode() *NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "redundancy-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/subinterface"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Subinterface() *NetworkInstance_Evpn_EthernetSegment_SubinterfacePath {
	return &NetworkInstance_Evpn_EthernetSegment_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/state/subinterface"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Subinterface() *NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EthernetSegment_DfElectionPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElectionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/df-election-method YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/df-election-method YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/election-wait-time YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/election-wait-time YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/preference YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/preference YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/revertive YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/revertive YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny struct {
	*ygot.NodePath
}

// DfElectionMethod (leaf): Select the Designated Forwarder Election (DF) election method
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/df-election-method"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/df-election-method"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) DfElectionMethod() *NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "df-election-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// DfElectionMethod (leaf): Select the Designated Forwarder Election (DF) election method
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/df-election-method"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/df-election-method"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) DfElectionMethod() *NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "df-election-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// ElectionWaitTime (leaf): Designated Forwarder Election wait-time. When the DF timer expires,
// the PE device selects the DF based on the highest preference value
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/election-wait-time"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/election-wait-time"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) ElectionWaitTime() *NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "election-wait-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// ElectionWaitTime (leaf): Designated Forwarder Election wait-time. When the DF timer expires,
// the PE device selects the DF based on the highest preference value
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/election-wait-time"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/election-wait-time"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) ElectionWaitTime() *NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "election-wait-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Defines a 2-octet value that indicates the PE
// preference to become the DF in the Ethernet-Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/preference"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) Preference() *NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Defines a 2-octet value that indicates the PE
// preference to become the DF in the Ethernet-Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/preference"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) Preference() *NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Revertive (leaf): The 'preempt' or 'revertive' behavior. This option will allow a
// non-revertive behavior in the DF election.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/revertive"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/revertive"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) Revertive() *NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "revertive"},
			map[string]interface{}{},
			n,
		),
	}
}

// Revertive (leaf): The 'preempt' or 'revertive' behavior. This option will allow a
// non-revertive behavior in the DF election.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/revertive"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/state/revertive"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) Revertive() *NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "revertive"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EviPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny struct {
	*ygot.NodePath
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName (wildcarded): string
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName (wildcarded): string
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulation-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath {
	return &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulation-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance (EVI) identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPath {
	return &NetworkInstance_Evpn_EvpnInstance_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance (EVI) identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/replication-mode"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath {
	return &NetworkInstance_Evpn_EvpnInstance_ReplicationModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "replication-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/replication-mode"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "replication-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/route-distinguisher"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePath) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath {
	return &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/route-distinguisher"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/service-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath {
	return &NetworkInstance_Evpn_EvpnInstance_ServiceTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "service-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/service-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "service-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPath {
	return &NetworkInstance_Evpn_EvpnInstance_VxlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_VxlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny struct {
	*ygot.NodePath
}

// BComponentName (leaf): Type of the associated b-component
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/b-component-name"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "b-component-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// BComponentName (leaf): Type of the associated b-component
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/b-component-name"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "b-component-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/backbone-src-mac"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/backbone-src-mac"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// IComponentAny (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid (wildcarded): uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
}

// IComponentAny (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid (wildcarded): uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
}

// IComponent (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
}

// IComponent (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny struct {
	*ygot.NodePath
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/i-sid"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "i-sid"},
			map[string]interface{}{},
			n,
		),
	}
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/i-sid"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "i-sid"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygot.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/export-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/export-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/import-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/import-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny struct {
	*ygot.NodePath
}

// AnycastSourceInterface (container): Anycast source interface references
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "anycast-source-interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// AnycastSourceInterface (container): Anycast source interface references
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "anycast-source-interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-reachability-bgp"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-reachability-bgp"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/overlay-endpoint"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/overlay-endpoint"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/overlay-endpoint-network-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/overlay-endpoint-network-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_FdbPath represents the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPath struct {
	*ygot.NodePath
}

// NetworkInstance_FdbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_AnycastGatewayMacPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_AnycastGatewayMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacAgingTimePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacAgingTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacLearningPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacLearningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MaximumEntriesPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MaximumEntriesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPathAny struct {
	*ygot.NodePath
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/anycast-gateway-mac"
// Path from root: "/network-instances/network-instance/fdb/state/anycast-gateway-mac"
func (n *NetworkInstance_FdbPath) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPath {
	return &NetworkInstance_Fdb_AnycastGatewayMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/anycast-gateway-mac"
// Path from root: "/network-instances/network-instance/fdb/state/anycast-gateway-mac"
func (n *NetworkInstance_FdbPathAny) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPathAny {
	return &NetworkInstance_Fdb_AnycastGatewayMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// ArpProxy (container): Top Container related to ARP-Proxy
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "arp-proxy"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPath) ArpProxy() *NetworkInstance_Fdb_ArpProxyPath {
	return &NetworkInstance_Fdb_ArpProxyPath{
		NodePath: ygot.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ArpProxy (container): Top Container related to ARP-Proxy
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "arp-proxy"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPathAny) ArpProxy() *NetworkInstance_Fdb_ArpProxyPathAny {
	return &NetworkInstance_Fdb_ArpProxyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/flood-unknown-unicast-supression"
// Path from root: "/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPath) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath {
	return &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
	}
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/flood-unknown-unicast-supression"
// Path from root: "/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPathAny) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny {
	return &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2rib"
// Path from root: "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPath) L2Rib() *NetworkInstance_Fdb_L2RibPath {
	return &NetworkInstance_Fdb_L2RibPath{
		NodePath: ygot.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2rib"
// Path from root: "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPathAny) L2Rib() *NetworkInstance_Fdb_L2RibPathAny {
	return &NetworkInstance_Fdb_L2RibPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-aging-time"
// Path from root: "/network-instances/network-instance/fdb/state/mac-aging-time"
func (n *NetworkInstance_FdbPath) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePath {
	return &NetworkInstance_Fdb_MacAgingTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-aging-time"
// Path from root: "/network-instances/network-instance/fdb/state/mac-aging-time"
func (n *NetworkInstance_FdbPathAny) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePathAny {
	return &NetworkInstance_Fdb_MacAgingTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-learning"
// Path from root: "/network-instances/network-instance/fdb/state/mac-learning"
func (n *NetworkInstance_FdbPath) MacLearning() *NetworkInstance_Fdb_MacLearningPath {
	return &NetworkInstance_Fdb_MacLearningPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-learning"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-learning"
// Path from root: "/network-instances/network-instance/fdb/state/mac-learning"
func (n *NetworkInstance_FdbPathAny) MacLearning() *NetworkInstance_Fdb_MacLearningPathAny {
	return &NetworkInstance_Fdb_MacLearningPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-learning"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPath) MacMobility() *NetworkInstance_Fdb_MacMobilityPath {
	return &NetworkInstance_Fdb_MacMobilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPathAny) MacMobility() *NetworkInstance_Fdb_MacMobilityPathAny {
	return &NetworkInstance_Fdb_MacMobilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPath) MacTable() *NetworkInstance_Fdb_MacTablePath {
	return &NetworkInstance_Fdb_MacTablePath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPathAny) MacTable() *NetworkInstance_Fdb_MacTablePathAny {
	return &NetworkInstance_Fdb_MacTablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/maximum-entries"
// Path from root: "/network-instances/network-instance/fdb/state/maximum-entries"
func (n *NetworkInstance_FdbPath) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPath {
	return &NetworkInstance_Fdb_MaximumEntriesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/maximum-entries"
// Path from root: "/network-instances/network-instance/fdb/state/maximum-entries"
func (n *NetworkInstance_FdbPathAny) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPathAny {
	return &NetworkInstance_Fdb_MaximumEntriesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdProxy (container): Top Container related to ND-Proxy.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "nd-proxy"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPath) NdProxy() *NetworkInstance_Fdb_NdProxyPath {
	return &NetworkInstance_Fdb_NdProxyPath{
		NodePath: ygot.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdProxy (container): Top Container related to ND-Proxy.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "nd-proxy"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPathAny) NdProxy() *NetworkInstance_Fdb_NdProxyPathAny {
	return &NetworkInstance_Fdb_NdProxyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_ArpProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/arp-suppression"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPath) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath {
	return &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/arp-suppression"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny {
	return &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/enable"
func (n *NetworkInstance_Fdb_ArpProxyPath) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePath {
	return &NetworkInstance_Fdb_ArpProxy_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/enable"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePathAny {
	return &NetworkInstance_Fdb_ArpProxy_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2RibPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2RibPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPathAny struct {
	*ygot.NodePath
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-ip-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTablePath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-ip-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePath {
	return &NetworkInstance_Fdb_L2Rib_MacTablePath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
}

// EntryAnyHostIp (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAnyHostIp(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": "*"},
			n,
		),
	}
}

// EntryAnyHostIp (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAnyHostIp(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": "*"},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAnyMacAddress(HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": HostIp},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAnyMacAddress(HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": HostIp},
			n,
		),
	}
}

// Entry (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
}

// Entry (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer (wildcarded): oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer (wildcarded): oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny struct {
	*ygot.NodePath
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer (wildcarded): oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer (wildcarded): oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny struct {
	*ygot.NodePath
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/derived-from-mac-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/derived-from-mac-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/directly-received"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/directly-received"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny struct {
	*ygot.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-mobility-window"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-mobility-window"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
}

// EntryAnyVlan (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAnyVlan(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": "*"},
			n,
		),
	}
}

// EntryAnyVlan (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAnyVlan(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": "*"},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAnyMacAddress(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": Vlan},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAnyMacAddress(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": Vlan},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPath {
	return &NetworkInstance_Fdb_MacTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_AgePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_AgePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/age"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePath {
	return &NetworkInstance_Fdb_MacTable_Entry_AgePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/age"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_AgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-type"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePath {
	return &NetworkInstance_Fdb_MacTable_Entry_EntryTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-type"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPath {
	return &NetworkInstance_Fdb_MacTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_MacTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_MacTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny struct {
	*ygot.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_NdProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny struct {
	*ygot.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/enable"
func (n *NetworkInstance_Fdb_NdProxyPath) Enable() *NetworkInstance_Fdb_NdProxy_EnablePath {
	return &NetworkInstance_Fdb_NdProxy_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/enable"
func (n *NetworkInstance_Fdb_NdProxyPathAny) Enable() *NetworkInstance_Fdb_NdProxy_EnablePathAny {
	return &NetworkInstance_Fdb_NdProxy_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/nd-suppression"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPath) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPath {
	return &NetworkInstance_Fdb_NdProxy_NdSuppressionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/nd-suppression"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPathAny) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny {
	return &NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePoliciesPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePoliciesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPathAny struct {
	*ygot.NodePath
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "apply-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "apply-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny struct {
	*ygot.NodePath
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/default-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/default-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/default-import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/default-import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygot.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/export-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/export-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/import-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/import-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/id YANG schema element.
type NetworkInstance_Interface_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/id YANG schema element.
type NetworkInstance_Interface_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/interface YANG schema element.
type NetworkInstance_Interface_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/interface YANG schema element.
type NetworkInstance_Interface_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IrbAnycastGatewayPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IrbAnycastGatewayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_MacPinningPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_MacPinningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-address-families"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/associated-address-families"
func (n *NetworkInstance_InterfacePath) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPath {
	return &NetworkInstance_Interface_AssociatedAddressFamiliesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-address-families"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/associated-address-families"
func (n *NetworkInstance_InterfacePathAny) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny {
	return &NetworkInstance_Interface_AssociatedAddressFamiliesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/id"
func (n *NetworkInstance_InterfacePath) Id() *NetworkInstance_Interface_IdPath {
	return &NetworkInstance_Interface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/id"
func (n *NetworkInstance_InterfacePathAny) Id() *NetworkInstance_Interface_IdPathAny {
	return &NetworkInstance_Interface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/interface"
func (n *NetworkInstance_InterfacePath) Interface() *NetworkInstance_Interface_InterfacePath {
	return &NetworkInstance_Interface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/interface"
func (n *NetworkInstance_InterfacePathAny) Interface() *NetworkInstance_Interface_InterfacePathAny {
	return &NetworkInstance_Interface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/irb-anycast-gateway"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePath) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPath {
	return &NetworkInstance_Interface_IrbAnycastGatewayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
	}
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/irb-anycast-gateway"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePathAny) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPathAny {
	return &NetworkInstance_Interface_IrbAnycastGatewayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-pinning"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/mac-pinning"
func (n *NetworkInstance_InterfacePath) MacPinning() *NetworkInstance_Interface_MacPinningPath {
	return &NetworkInstance_Interface_MacPinningPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-pinning"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/mac-pinning"
func (n *NetworkInstance_InterfacePathAny) MacPinning() *NetworkInstance_Interface_MacPinningPathAny {
	return &NetworkInstance_Interface_MacPinningPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/subinterface"
func (n *NetworkInstance_InterfacePath) Subinterface() *NetworkInstance_Interface_SubinterfacePath {
	return &NetworkInstance_Interface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/interfaces/interface/state/subinterface"
func (n *NetworkInstance_InterfacePathAny) Subinterface() *NetworkInstance_Interface_SubinterfacePathAny {
	return &NetworkInstance_Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPath struct {
	*ygot.NodePath
}

// NetworkInstance_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPathAny struct {
	*ygot.NodePath
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPath) Global() *NetworkInstance_Mpls_GlobalPath {
	return &NetworkInstance_Mpls_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPathAny) Global() *NetworkInstance_Mpls_GlobalPathAny {
	return &NetworkInstance_Mpls_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_MplsPath) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_MplsPathAny) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_MplsPath) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePath {
	return &NetworkInstance_Mpls_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_MplsPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Lsps (container): LSP definitions and configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "lsps"
// Path from root: "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPath) Lsps() *NetworkInstance_Mpls_LspsPath {
	return &NetworkInstance_Mpls_LspsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lsps (container): LSP definitions and configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "lsps"
// Path from root: "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPathAny) Lsps() *NetworkInstance_Mpls_LspsPathAny {
	return &NetworkInstance_Mpls_LspsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocols (container): top-level signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "signaling-protocols"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPath) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPath {
	return &NetworkInstance_Mpls_SignalingProtocolsPath{
		NodePath: ygot.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocols (container): top-level signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "signaling-protocols"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPathAny) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocolsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeGlobalAttributes (container): traffic-engineering global attributes
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-global-attributes"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPath) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPath {
	return &NetworkInstance_Mpls_TeGlobalAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeGlobalAttributes (container): traffic-engineering global attributes
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-global-attributes"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPathAny) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_NullLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_NullLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_PwEncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_PwEncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_TtlPropagationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_TtlPropagationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPathAny struct {
	*ygot.NodePath
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPath) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPathAny) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPath) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePath {
	return &NetworkInstance_Mpls_Global_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NullLabel (leaf): The null-label type used, implicit or explicit
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/null-label"
// Path from root: "/network-instances/network-instance/mpls/global/state/null-label"
func (n *NetworkInstance_Mpls_GlobalPath) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPath {
	return &NetworkInstance_Mpls_Global_NullLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "null-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NullLabel (leaf): The null-label type used, implicit or explicit
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/null-label"
// Path from root: "/network-instances/network-instance/mpls/global/state/null-label"
func (n *NetworkInstance_Mpls_GlobalPathAny) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPathAny {
	return &NetworkInstance_Mpls_Global_NullLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "null-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pw-encapsulation"
// Path from root: "/network-instances/network-instance/mpls/global/state/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPath) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPath {
	return &NetworkInstance_Mpls_Global_PwEncapsulationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pw-encapsulation"
// Path from root: "/network-instances/network-instance/mpls/global/state/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPathAny) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPathAny {
	return &NetworkInstance_Mpls_Global_PwEncapsulationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId: string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPath{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ttl-propagation"
// Path from root: "/network-instances/network-instance/mpls/global/state/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPath) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPath {
	return &NetworkInstance_Mpls_Global_TtlPropagationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ttl-propagation"
// Path from root: "/network-instances/network-instance/mpls/global/state/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPathAny) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPathAny {
	return &NetworkInstance_Mpls_Global_TtlPropagationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny struct {
	*ygot.NodePath
}

// InterfaceId (leaf): Indentifier for the MPLS interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Indentifier for the MPLS interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-enabled"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePath) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPath {
	return &NetworkInstance_Mpls_Global_Interface_MplsEnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-enabled"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny {
	return &NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny struct {
	*ygot.NodePath
}

// LocalId (leaf): A local identifier for the global label block allocation.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-id"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalId (leaf): A local identifier for the global label block allocation.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-id"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lower-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lower-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lower-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lower-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/upper-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/upper-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_TeMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_TeMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPathAny struct {
	*ygot.NodePath
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group"
func (n *NetworkInstance_Mpls_InterfacePath) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPath {
	return &NetworkInstance_Mpls_Interface_AdminGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group"
func (n *NetworkInstance_Mpls_InterfacePathAny) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPathAny {
	return &NetworkInstance_Mpls_Interface_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igp-flooding-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePath) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igp-flooding-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePathAny) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/srlg-membership"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePath) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPath {
	return &NetworkInstance_Mpls_Interface_SrlgMembershipPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/srlg-membership"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePathAny) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny {
	return &NetworkInstance_Mpls_Interface_SrlgMembershipPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/te-metric"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric"
func (n *NetworkInstance_Mpls_InterfacePath) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPath {
	return &NetworkInstance_Mpls_Interface_TeMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/te-metric"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric"
func (n *NetworkInstance_Mpls_InterfacePathAny) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPathAny {
	return &NetworkInstance_Mpls_Interface_TeMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny struct {
	*ygot.NodePath
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/delta-percentage"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/delta-percentage"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/threshold-specification"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/threshold-specification"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/threshold-type"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "threshold-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/threshold-type"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "threshold-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/up-down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/up-down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/up-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/up-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_LspsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_LspsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPathAny struct {
	*ygot.NodePath
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "constrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPath) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "constrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticLspAny (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_LspsPath) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StaticLspAny (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StaticLsp (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name: string
func (n *NetworkInstance_Mpls_LspsPath) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPath {
	return &NetworkInstance_Mpls_Lsps_StaticLspPath{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// StaticLsp (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name: string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unconstrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPath) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unconstrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny struct {
	*ygot.NodePath
}

// NamedExplicitPathAny (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NamedExplicitPathAny (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NamedExplicitPath (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NamedExplicitPath (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny struct {
	*ygot.NodePath
}

// ExplicitRouteObjectAny (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObjectAny (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObject (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ExplicitRouteObject (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sid-protection-required"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sid-protection-required"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sid-selection-mode"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sid-selection-mode"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny struct {
	*ygot.NodePath
}

// Address (leaf): router hop for the LSP path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): router hop for the LSP path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopType (leaf): strict or loose hop
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hop-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopType (leaf): strict or loose hop
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hop-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): TE tunnel administrative state.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/admin-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): TE tunnel administrative state.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/admin-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/auto-generated"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/auto-generated"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): optional text description for the tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): optional text description for the tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The tunnel name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The tunnel name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The operational status of the TE tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/oper-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The operational status of the TE tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/oper-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-tunnel-attributes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-tunnel-attributes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/role"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/role"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/shortcut-eligible"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
	}
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/shortcut-eligible"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaling-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaling-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): RSVP-TE tunnel source address
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): RSVP-TE tunnel source address
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Tunnel type, p2p or p2mp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Tunnel type, p2p or p2mp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny struct {
	*ygot.NodePath
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "auto-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "auto-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/set-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/set-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaled-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaled-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/specification-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "specification-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/specification-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "specification-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny struct {
	*ygot.NodePath
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjust-interval"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjust-interval"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjust-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjust-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interval-high-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interval-high-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/min-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/min-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "overflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath{
		NodePath: ygot.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "overflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "underflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath{
		NodePath: ygot.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "underflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/overflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/overflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/underflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/underflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny struct {
	*ygot.NodePath
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bytes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath{
		NodePath: ygot.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bytes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "current-path-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "current-path-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-reoptimization-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-reoptimization-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "online-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "online-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathChanges (leaf): Number of path changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathChanges (leaf): Number of path changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateChanges (leaf): Number of state changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateChanges (leaf): Number of state changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny struct {
	*ygot.NodePath
}

// Destination (leaf): P2P tunnel destination address
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination"},
			map[string]interface{}{},
			n,
		),
	}
}

// Destination (leaf): P2P tunnel destination address
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny struct {
	*ygot.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSFP computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSFP computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygot.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny struct {
	*ygot.NodePath
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secondary-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "secondary-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygot.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny struct {
	*ygot.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSFP computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSFP computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygot.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygot.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLspPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny struct {
	*ygot.NodePath
}

// Egress (container): Static LSPs for which the router is an
//
//	egress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "egress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Egress (container): Static LSPs for which the router is an
//
//	egress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "egress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Static LSPs for which the router is an
//
//	ingress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ingress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Static LSPs for which the router is an
//
//	ingress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ingress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name to identify the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name to identify the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transit (container): Static LSPs for which the router is an
//
//	transit node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transit"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath{
		NodePath: ygot.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transit (container): Static LSPs for which the router is an
//
//	transit node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transit"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny struct {
	*ygot.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny struct {
	*ygot.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny struct {
	*ygot.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny struct {
	*ygot.NodePath
}

// PathSetupProtocol (container): select and configure the signaling method for
//
//	the LSP
//
// ----------------------------------------
// Defining module: "openconfig-mpls-igp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-setup-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath) PathSetupProtocol() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-setup-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathSetupProtocol (container): select and configure the signaling method for
//
//	the LSP
//
// ----------------------------------------
// Defining module: "openconfig-mpls-igp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-setup-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny) PathSetupProtocol() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-setup-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny struct {
	*ygot.NodePath
}

// Ldp (container): LDP signaling setup for IGP-congruent LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath) Ldp() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ldp (container): LDP signaling setup for IGP-congruent LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny) Ldp() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocolsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols YANG schema element.
type NetworkInstance_Mpls_SignalingProtocolsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocolsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols YANG schema element.
type NetworkInstance_Mpls_SignalingProtocolsPathAny struct {
	*ygot.NodePath
}

// Ldp (container): LDP global signaling configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) Ldp() *NetworkInstance_Mpls_SignalingProtocols_LdpPath {
	return &NetworkInstance_Mpls_SignalingProtocols_LdpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ldp (container): LDP global signaling configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) Ldp() *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_LdpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// RsvpTe (container): RSVP-TE global signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rsvp-te"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) RsvpTe() *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTePath{
		NodePath: ygot.NewNodePath(
			[]string{"rsvp-te"},
			map[string]interface{}{},
			n,
		),
	}
}

// RsvpTe (container): RSVP-TE global signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rsvp-te"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) RsvpTe() *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rsvp-te"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): MPLS-specific Segment Routing configuration and operational state
// parameters
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) SegmentRouting() *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): MPLS-specific Segment Routing configuration and operational state
// parameters
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) SegmentRouting() *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_LdpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_LdpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_LdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_LdpPathAny struct {
	*ygot.NodePath
}

// Global (container): Platform wide LDP configuration and state
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Global() *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): Platform wide LDP configuration and state
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Global() *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAttributes (container): Container including attributes for LDP-enabled
// interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) InterfaceAttributes() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAttributes (container): Container including attributes for LDP-enabled
// interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) InterfaceAttributes() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAnyLabelSpaceId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborAnyLabelSpaceId(LsrId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAnyLabelSpaceId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborAnyLabelSpaceId(LsrId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAnyLsrId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborAnyLsrId(LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// NeighborAnyLsrId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborAnyLsrId(LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// Neighbor (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Neighbor(LsrId string, LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// Neighbor (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Neighbor(LsrId string, LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// Targeted (container): Top container for targeted LDP state and configuration
// attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targeted"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Targeted() *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath{
		NodePath: ygot.NewNodePath(
			[]string{"targeted"},
			map[string]interface{}{},
			n,
		),
	}
}

// Targeted (container): Top container for targeted LDP state and configuration
// attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targeted"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Targeted() *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targeted"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny struct {
	*ygot.NodePath
}

// Authentication (container): Global LDP authentication
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Global LDP authentication
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Top container for LDP graceful-restart attributes
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Top container for LDP graceful-restart attributes
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// LsrId (leaf): Global label switch router identifier
// configuration.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsr-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsr-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LsrId (leaf): Global label switch router identifier
// configuration.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsr-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsr-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny struct {
	*ygot.NodePath
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-key"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-key"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables LDP authentication on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables LDP authentication on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingHoldtime (leaf): Time that defines the interval for keeping the
// node in recovery mode.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/forwarding-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) ForwardingHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forwarding-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingHoldtime (leaf): Time that defines the interval for keeping the
// node in recovery mode.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/forwarding-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) ForwardingHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forwarding-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelperEnable (leaf): Enables the graceful restart helper for LDP.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/helper-enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) HelperEnable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "helper-enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelperEnable (leaf): Enables the graceful restart helper for LDP.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/helper-enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) HelperEnable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "helper-enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReconnectTime (leaf): Interval for which the remote LDP peers
// will wait for the local node to reconnect after a
// failure
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reconnect-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) ReconnectTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reconnect-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReconnectTime (leaf): Interval for which the remote LDP peers
// will wait for the local node to reconnect after a
// failure
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reconnect-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) ReconnectTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reconnect-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// RecoveryTime (leaf): Interval used to specify the time for the remote
// peer to maintain the MPLS forwarding state after
// the local node has succesfully reconnected
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/recovery-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "recovery-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// RecoveryTime (leaf): Interval used to specify the time for the remote
// peer to maintain the MPLS forwarding state after
// the local node has succesfully reconnected
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/recovery-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "recovery-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny struct {
	*ygot.NodePath
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): list of per-interface LDP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): list of per-interface LDP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): list of per-interface LDP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): list of per-interface LDP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// AddressFamilyAny (list): List for attributes related to address-families for LDP.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
// AfiName (wildcarded): oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
}

// AddressFamilyAny (list): List for attributes related to address-families for LDP.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
// AfiName (wildcarded): oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
}

// AddressFamily (list): List for attributes related to address-families for LDP.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
// AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
}

// AddressFamily (list): List for attributes related to address-families for LDP.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
// AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
}

// Counters (container): Interface specific LDP statistics and counters
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) Counters() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Interface specific LDP statistics and counters
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) Counters() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Identifier for the interface
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Identifier for the interface
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny struct {
	*ygot.NodePath
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/afi-name"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/afi-name"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny struct {
	*ygot.NodePath
}

// Authentication (container): Global LDP authentication
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Global LDP authentication
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloAdjacencyAny (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress (wildcarded): string
// LocalAddress (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) HelloAdjacencyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": "*", "local-address": "*"},
			n,
		),
	}
}

// HelloAdjacencyAny (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress (wildcarded): string
// LocalAddress (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) HelloAdjacencyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": "*", "local-address": "*"},
			n,
		),
	}
}

// HelloAdjacencyAnyLocalAddress (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress: string
// LocalAddress (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) HelloAdjacencyAnyLocalAddress(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": RemoteAddress, "local-address": "*"},
			n,
		),
	}
}

// HelloAdjacencyAnyLocalAddress (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress: string
// LocalAddress (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) HelloAdjacencyAnyLocalAddress(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": RemoteAddress, "local-address": "*"},
			n,
		),
	}
}

// HelloAdjacencyAnyRemoteAddress (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress (wildcarded): string
// LocalAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) HelloAdjacencyAnyRemoteAddress(LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": "*", "local-address": LocalAddress},
			n,
		),
	}
}

// HelloAdjacencyAnyRemoteAddress (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress (wildcarded): string
// LocalAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) HelloAdjacencyAnyRemoteAddress(LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": "*", "local-address": LocalAddress},
			n,
		),
	}
}

// HelloAdjacency (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress: string
// LocalAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) HelloAdjacency(RemoteAddress string, LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": RemoteAddress, "local-address": LocalAddress},
			n,
		),
	}
}

// HelloAdjacency (list): List of hello adjacencies for a given LDP
// neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-adjacencies/hello-adjacency"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
// RemoteAddress: string
// LocalAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) HelloAdjacency(RemoteAddress string, LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": RemoteAddress, "local-address": LocalAddress},
			n,
		),
	}
}

// LabelSpaceId (leaf): Label space ID of the neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-space-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) LabelSpaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-space-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelSpaceId (leaf): Label space ID of the neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-space-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) LabelSpaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-space-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LsrId (leaf): Neighbor label switch router identifier.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsr-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsr-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LsrId (leaf): Neighbor label switch router identifier.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsr-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsr-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionState (leaf): Operational status of the LDP session,
// based on the state machine for session
// negotiation behavior.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/session-state"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) SessionState() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionState (leaf): Operational status of the LDP session,
// based on the state machine for session
// negotiation behavior.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/session-state"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) SessionState() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny struct {
	*ygot.NodePath
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-key"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-key"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables LDP authentication on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables LDP authentication on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny struct {
	*ygot.NodePath
}

// AdjacencyType (leaf): This attributes defines if the LDP
// adjacency is from a direct link or from
// targeted discovery.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjacency-type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) AdjacencyType() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjacencyType (leaf): This attributes defines if the LDP
// adjacency is from a direct link or from
// targeted discovery.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjacency-type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) AdjacencyType() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloDropped (leaf): Number of Hello messaged dropped by the device
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-dropped"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) HelloDropped() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-dropped"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloDropped (leaf): Number of Hello messaged dropped by the device
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-dropped"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) HelloDropped() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-dropped"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (container): Specifies the time the sending LSR will
// maintain its record of Hellos from the
// receiving LSR
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath{
		NodePath: ygot.NewNodePath(
			[]string{"hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (container): Specifies the time the sending LSR will
// maintain its record of Hellos from the
// receiving LSR
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloReceived (leaf): Number of Hello messaged received by the device
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-received"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) HelloReceived() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloReceived (leaf): Number of Hello messaged received by the device
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-received"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) HelloReceived() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters
// were cleared expressed relative to the Unix Epoch
// (January 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/last-clear"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) LastClear() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters
// were cleared expressed relative to the Unix Epoch
// (January 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/last-clear"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) LastClear() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalAddress (leaf): Within the LDP adjacency, this attribute
// shows the local address.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalAddress (leaf): Within the LDP adjacency, this attribute
// shows the local address.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteAddress (leaf): Within the LDP adjacency, this attribute
// shows the neighbor address.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/remote-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteAddress (leaf): Within the LDP adjacency, this attribute
// shows the neighbor address.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/remote-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny struct {
	*ygot.NodePath
}

// Adjacent (leaf): Hello holdtime attribute learned from the
// LDP neighbor
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjacent"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) Adjacent() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjacent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Adjacent (leaf): Hello holdtime attribute learned from the
// LDP neighbor
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/adjacent"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) Adjacent() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "adjacent"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloExpiration (leaf): Expiration time for the hello holdtime.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-expiration"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) HelloExpiration() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-expiration"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloExpiration (leaf): Expiration time for the hello holdtime.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-expiration"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) HelloExpiration() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-expiration"},
			map[string]interface{}{},
			n,
		),
	}
}

// Negotiated (leaf): Hello holdtime attribute negotiated between
// the LDP neighbor and the local router.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/negotiated"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) Negotiated() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated"},
			map[string]interface{}{},
			n,
		),
	}
}

// Negotiated (leaf): Hello holdtime attribute negotiated between
// the LDP neighbor and the local router.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/negotiated"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) Negotiated() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHello (leaf): Time when the next LDP hello will be sent to
// the adjacent neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hello"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) NextHello() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hello"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHello (leaf): Time when the next LDP hello will be sent to
// the adjacent neighbor.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hello"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) NextHello() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hello"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny struct {
	*ygot.NodePath
}

// AddressFamilyAny (list): List of address families for targeted LDP
// configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
// AfiName (wildcarded): oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
}

// AddressFamilyAny (list): List of address families for targeted LDP
// configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
// AfiName (wildcarded): oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
}

// AddressFamily (list): List of address families for targeted LDP
// configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
// AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
}

// AddressFamily (list): List of address families for targeted LDP
// configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "address-families/address-family"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
// AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
}

// HelloAccept (leaf): Enables or disables the acceptance of targeted LDP
// hello messages.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-accept"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) HelloAccept() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-accept"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloAccept (leaf): Enables or disables the acceptance of targeted LDP
// hello messages.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-accept"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) HelloAccept() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-accept"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny struct {
	*ygot.NodePath
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/afi-name"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/afi-name"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetAny (list): List of LDP targets configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
// RemoteAddress (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) TargetAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": "*"},
			n,
		),
	}
}

// TargetAny (list): List of LDP targets configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
// RemoteAddress (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) TargetAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": "*"},
			n,
		),
	}
}

// Target (list): List of LDP targets configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
// RemoteAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) Target(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": RemoteAddress},
			n,
		),
	}
}

// Target (list): List of LDP targets configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
// RemoteAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) Target(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": RemoteAddress},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-holdtime"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalAddress (leaf): Local IP address of the LDP adjacency
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalAddress (leaf): Local IP address of the LDP adjacency
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteAddress (leaf): Neighbor address of the targeted LDP adjacency
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/remote-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteAddress (leaf): Neighbor address of the targeted LDP adjacency
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/remote-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "remote-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny struct {
	*ygot.NodePath
}

// Global (container): Platform wide RSVP configuration and state
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Global() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): Platform wide RSVP configuration and state
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Global() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): list of per-interface RSVP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): list of per-interface RSVP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): list of per-interface RSVP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): list of per-interface RSVP configurations
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NeighborAny (list): List of RSVP neighbors of the local system
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
// Address (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of RSVP neighbors of the local system
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
// Address (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Neighbor (list): List of RSVP neighbors of the local system
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
// Address: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Neighbor(Address string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Neighbor (list): List of RSVP neighbors of the local system
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
// Address: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Neighbor(Address string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// SessionAny (list): List of RSVP sessions
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sessions/session"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
// LocalIndex (wildcarded): uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) SessionAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": "*"},
			n,
		),
	}
}

// SessionAny (list): List of RSVP sessions
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sessions/session"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
// LocalIndex (wildcarded): uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) SessionAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": "*"},
			n,
		),
	}
}

// Session (list): List of RSVP sessions
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sessions/session"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
// LocalIndex: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Session(LocalIndex uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath{
		NodePath: ygot.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": LocalIndex},
			n,
		),
	}
}

// Session (list): List of RSVP sessions
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sessions/session"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
// LocalIndex: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Session(LocalIndex uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": LocalIndex},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny struct {
	*ygot.NodePath
}

// Counters (container): Platform wide RSVP statistics and counters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath) Counters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Platform wide RSVP statistics and counters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny) Counters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Operational state and configuration parameters relating to
// graceful-restart for RSVP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Operational state and configuration parameters relating to
// graceful-restart for RSVP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hellos (container): Top level container for RSVP hello parameters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hellos"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath) Hellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath{
		NodePath: ygot.NewNodePath(
			[]string{"hellos"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hellos (container): Top level container for RSVP hello parameters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hellos"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny) Hellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hellos"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (container): Protocol options relating to RSVP
// soft preemption
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath) SoftPreemption() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (container): Protocol options relating to RSVP
// soft preemption
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny) SoftPreemption() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny struct {
	*ygot.NodePath
}

// Errors (container): Error counters associated with the global RSVP-TE
// instance.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "errors"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// Errors (container): Error counters associated with the global RSVP-TE
// instance.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "errors"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InHelloMessages (leaf): Number of received RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InHelloMessages (leaf): Number of received RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathMessages (leaf): Number of received RSVP Path messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathMessages (leaf): Number of received RSVP Path messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathTimeouts (leaf): The number of Path State Blocks (PSBs) that
// have been timed out by the local system.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-timeouts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) PathTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathTimeouts (leaf): The number of Path State Blocks (PSBs) that
// have been timed out by the local system.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-timeouts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) PathTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rate-limited-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rate-limited-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReservationTimeouts (leaf): The number of Reservation State Blocks (RSBs) that
// have been timed out by the local system.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reservation-timeouts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) ReservationTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath{
		NodePath: ygot.NewNodePath(
			[]string{"reservation-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReservationTimeouts (leaf): The number of Reservation State Blocks (RSBs) that
// have been timed out by the local system.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reservation-timeouts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) ReservationTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reservation-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny struct {
	*ygot.NodePath
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication-fail"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication-fail"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-checksum"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-checksum"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-format"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-format"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-length"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-length"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-of-order"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-of-order"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "received-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath{
		NodePath: ygot.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "received-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-failure"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-failure"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-queue-full"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-queue-full"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-ack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-ack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables graceful restart on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables graceful restart on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// RecoveryTime (leaf): RSVP state recovery time
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/recovery-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "recovery-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// RecoveryTime (leaf): RSVP state recovery time
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/recovery-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "recovery-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// RestartTime (leaf): Graceful restart time (seconds).
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/restart-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) RestartTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "restart-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// RestartTime (leaf): Graceful restart time (seconds).
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/restart-time"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) RestartTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "restart-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny struct {
	*ygot.NodePath
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/refresh-reduction"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
	}
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/refresh-reduction"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables soft preemption on a node.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables soft preemption on a node.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemptionTimeout (leaf): Timeout value for soft preemption to revert
// to hard preemption. The default timeout for
// soft-preemption is 30 seconds - after which
// the local system reverts to hard pre-emption.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/soft-preemption-timeout"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath) SoftPreemptionTimeout() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "soft-preemption-timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemptionTimeout (leaf): Timeout value for soft preemption to revert
// to hard preemption. The default timeout for
// soft-preemption is 30 seconds - after which
// the local system reverts to hard pre-emption.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/soft-preemption-timeout"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny) SoftPreemptionTimeout() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "soft-preemption-timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny struct {
	*ygot.NodePath
}

// Authentication (container): Configuration and state parameters relating to RSVP
// authentication as per RFC2747
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Authentication() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Configuration and state parameters relating to RSVP
// authentication as per RFC2747
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Authentication() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// BandwidthReservationAny (list): Available and reserved bandwidth by priority on
// the interface.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth-reservations/bandwidth-reservation"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
// Priority (wildcarded): [oc.UnionUint8, oc.E_BandwidthReservation_Priority_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) BandwidthReservationAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": "*"},
			n,
		),
	}
}

// BandwidthReservationAny (list): Available and reserved bandwidth by priority on
// the interface.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth-reservations/bandwidth-reservation"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
// Priority (wildcarded): [oc.UnionUint8, oc.E_BandwidthReservation_Priority_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) BandwidthReservationAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": "*"},
			n,
		),
	}
}

// BandwidthReservation (list): Available and reserved bandwidth by priority on
// the interface.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth-reservations/bandwidth-reservation"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
// Priority: [oc.UnionUint8, oc.E_BandwidthReservation_Priority_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) BandwidthReservation(Priority oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": Priority},
			n,
		),
	}
}

// BandwidthReservation (list): Available and reserved bandwidth by priority on
// the interface.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth-reservations/bandwidth-reservation"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
// Priority: [oc.UnionUint8, oc.E_BandwidthReservation_Priority_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) BandwidthReservation(Priority oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": Priority},
			n,
		),
	}
}

// Counters (container): Interface specific RSVP statistics and counters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Counters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Interface specific RSVP statistics and counters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Counters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hellos (container): Top level container for RSVP hello parameters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hellos"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Hellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath{
		NodePath: ygot.NewNodePath(
			[]string{"hellos"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hellos (container): Top level container for RSVP hello parameters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hellos"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Hellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hellos"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Identifier for the interface
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Identifier for the interface
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLinkBandwidth (leaf): The maximum link bandwidth expressed in kilobits
// per second. This value should be the same (other than
// the units) as the value that is advertised into the
// IGP traffic engineering database.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-link-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) MaxLinkBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLinkBandwidth (leaf): The maximum link bandwidth expressed in kilobits
// per second. This value should be the same (other than
// the units) as the value that is advertised into the
// IGP traffic engineering database.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-link-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) MaxLinkBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protection (container): link-protection (NHOP) related configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protection"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Protection() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath{
		NodePath: ygot.NewNodePath(
			[]string{"protection"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protection (container): link-protection (NHOP) related configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protection"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Protection() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protection"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subscription (container): Bandwidth percentage reservable by RSVP
// on an interface
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "subscription"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"subscription"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subscription (container): Bandwidth percentage reservable by RSVP
// on an interface
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "subscription"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subscription"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny struct {
	*ygot.NodePath
}

// AuthenticationKey (leaf): Authenticate RSVP signaling messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-key"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationKey (leaf): Authenticate RSVP signaling messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-key"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationType (leaf): RSVP message authentication algorithm type
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) AuthenticationType() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationType (leaf): RSVP message authentication algorithm type
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/authentication-type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) AuthenticationType() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "authentication-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables RSVP authentication on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables RSVP authentication on the node.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny struct {
	*ygot.NodePath
}

// ActiveReservationsCount (leaf): Number of active RSVP reservations in the associated
// priority, or the sum of all reservations when the priority
// level is set to ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-reservations-count"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) ActiveReservationsCount() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-reservations-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveReservationsCount (leaf): Number of active RSVP reservations in the associated
// priority, or the sum of all reservations when the priority
// level is set to ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-reservations-count"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) ActiveReservationsCount() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-reservations-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// AvailableBandwidth (leaf): Bandwidth currently available with the priority level,
// or for the entire interface when the priority is set to
// ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/available-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) AvailableBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// AvailableBandwidth (leaf): Bandwidth currently available with the priority level,
// or for the entire interface when the priority is set to
// ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/available-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) AvailableBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighwaterMark (leaf): Maximum bandwidth reserved on the interface within the
// priority, or across all priorities in the case that the
// priority level is set to ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/highwater-mark"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) HighwaterMark() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "highwater-mark"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighwaterMark (leaf): Maximum bandwidth reserved on the interface within the
// priority, or across all priorities in the case that the
// priority level is set to ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/highwater-mark"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) HighwaterMark() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "highwater-mark"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): RSVP priority level for LSPs traversing the interface
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/priority"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) Priority() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): RSVP priority level for LSPs traversing the interface
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/priority"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) Priority() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReservedBandwidth (leaf): Bandwidth currently reserved within the priority level,
// or the sum of all priority levels when the keyword is set
// to ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reserved-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) ReservedBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReservedBandwidth (leaf): Bandwidth currently reserved within the priority level,
// or the sum of all priority levels when the keyword is set
// to ALL
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reserved-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) ReservedBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny struct {
	*ygot.NodePath
}

// Errors (container): Interface specific RSVP error counters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "errors"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// Errors (container): Interface specific RSVP error counters
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "errors"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InHelloMessages (leaf): Number of received RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InHelloMessages (leaf): Number of received RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathMessages (leaf): Number of received RSVP Path messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathMessages (leaf): Number of received RSVP Path messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-ack-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-hello-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-path-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-error-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-reservation-tear-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-srefresh-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rate-limited-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rate-limited-messages"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny struct {
	*ygot.NodePath
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication-fail"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication-fail"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-checksum"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-checksum"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-format"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-format"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-length"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bad-packet-length"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-of-order"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-of-order"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "received-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath{
		NodePath: ygot.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "received-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-failure"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-failure"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-queue-full"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transmit-queue-full"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-ack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-ack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unknown-nack"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny struct {
	*ygot.NodePath
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hello-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/refresh-reduction"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
	}
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/refresh-reduction"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny struct {
	*ygot.NodePath
}

// BypassOptimizeInterval (leaf): interval between periodic optimization
// of the bypass LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bypass-optimize-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) BypassOptimizeInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bypass-optimize-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// BypassOptimizeInterval (leaf): interval between periodic optimization
// of the bypass LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bypass-optimize-interval"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) BypassOptimizeInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bypass-optimize-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkProtectionStyleRequested (leaf): Style of mpls frr protection desired:
// link, link-node, or unprotected
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/link-protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) LinkProtectionStyleRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkProtectionStyleRequested (leaf): Style of mpls frr protection desired:
// link, link-node, or unprotected
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/link-protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) LinkProtectionStyleRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny struct {
	*ygot.NodePath
}

// CalculatedAbsoluteSubscriptionBw (leaf): The calculated absolute value of the bandwidth
// which is reservable to RSVP-TE on the interface
// prior to any adjustments that may be made from
// external sources.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/calculated-absolute-subscription-bw"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) CalculatedAbsoluteSubscriptionBw() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// CalculatedAbsoluteSubscriptionBw (leaf): The calculated absolute value of the bandwidth
// which is reservable to RSVP-TE on the interface
// prior to any adjustments that may be made from
// external sources.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/calculated-absolute-subscription-bw"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) CalculatedAbsoluteSubscriptionBw() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subscription (leaf): percentage of the interface bandwidth that
// RSVP can reserve
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subscription"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subscription"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subscription (leaf): percentage of the interface bandwidth that
// RSVP can reserve
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subscription"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subscription"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny struct {
	*ygot.NodePath
}

// Address (leaf): Address of RSVP neighbor
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): Address of RSVP neighbor
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DetectedInterface (leaf): Interface where RSVP neighbor was detected
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/detected-interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) DetectedInterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "detected-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// DetectedInterface (leaf): Interface where RSVP neighbor was detected
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/detected-interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) DetectedInterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "detected-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborStatus (leaf): Enumuration of possible RSVP neighbor states
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-status"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) NeighborStatus() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborStatus (leaf): Enumuration of possible RSVP neighbor states
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-status"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) NeighborStatus() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// RefreshReduction (leaf): Suppport of neighbor for RSVP refresh reduction
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/refresh-reduction"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
	}
}

// RefreshReduction (leaf): Suppport of neighbor for RSVP refresh reduction
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/refresh-reduction"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): Destination address of RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) DestinationAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): Destination address of RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) DestinationAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitRouteObjectAny (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObjectAny (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObject (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
// Index: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ExplicitRouteObject (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
// Index: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// LabelIn (leaf): Incoming MPLS label associated with this RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-in"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LabelIn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelIn (leaf): Incoming MPLS label associated with this RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-in"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LabelIn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelOut (leaf): Outgoing MPLS label associated with this RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-out"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LabelOut() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelOut (leaf): Outgoing MPLS label associated with this RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label-out"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LabelOut() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalIndex (leaf): The index used to identify the RSVP session
// on the local network element. This index is
// generated by the device and is unique only
// to the local network element.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-index"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LocalIndex() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalIndex (leaf): The index used to identify the RSVP session
// on the local network element. This index is
// generated by the device and is unique only
// to the local network element.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/local-index"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LocalIndex() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "local-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// LspId (leaf): The LSP ID distinguishes between two LSPs
// originated from the same headend, and is
// commonly used to distinguish RSVP sessions
// during make before break operations.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsp-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LspId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsp-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LspId (leaf): The LSP ID distinguishes between two LSPs
// originated from the same headend, and is
// commonly used to distinguish RSVP sessions
// during make before break operations.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsp-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LspId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsp-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionRequested (leaf): The type of protection requested for the RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protection-requested"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ProtectionRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protection-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionRequested (leaf): The type of protection requested for the RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protection-requested"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ProtectionRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protection-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// RecordRouteObjectAny (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "record-route-objects/record-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// RecordRouteObjectAny (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "record-route-objects/record-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// RecordRouteObject (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "record-route-objects/record-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath{
		NodePath: ygot.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// RecordRouteObject (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "record-route-objects/record-route-object"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// SenderTspec (container): Operational state statistics relating to the SENDER_TSPEC
// received for the RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sender-tspec"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sender-tspec"},
			map[string]interface{}{},
			n,
		),
	}
}

// SenderTspec (container): Operational state statistics relating to the SENDER_TSPEC
// received for the RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sender-tspec"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sender-tspec"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionName (leaf): The signaled name of this RSVP session.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/session-name"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SessionName() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionName (leaf): The signaled name of this RSVP session.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/session-name"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SessionName() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Origin address of RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SourceAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Origin address of RSVP session
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SourceAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): Enumeration of RSVP session states
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/status"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) Status() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): Enumeration of RSVP session states
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/status"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) Status() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// TunnelId (leaf): The tunnel ID is an identifier used in the
// RSVP session, which remains constant over
// the life of the tunnel.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tunnel-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) TunnelId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// TunnelId (leaf): The tunnel ID is an identifier used in the
// RSVP session, which remains constant over
// the life of the tunnel.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tunnel-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) TunnelId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type/role of the RSVP session, signifing
// the session's role on the current device, such as
// a transit session vs. an ingress session.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type/role of the RSVP session, signifing
// the session's role on the current device, such as
// a transit session vs. an ingress session.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny struct {
	*ygot.NodePath
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified
// only when the ERO hop is an 2 or 4-byte AS number.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/asn"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Asn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified
// only when the ERO hop is an 2 or 4-byte AS number.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/asn"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Asn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in
// ascending order from the source to destination of the
// LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in
// ascending order from the source to destination of the
// LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): The interface ID for an unnumbered interface. Specified only
// when the ERO hop is a unnumbered interface.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): The interface ID for an unnumbered interface. Specified only
// when the ERO hop is a unnumbered interface.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The IPv4 or IPv6 prefix indicated by the ERO. Specified
// only when the ERO hop is an IPv4 or IPv6 prefix.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-prefix"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) IpPrefix() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The IPv4 or IPv6 prefix indicated by the ERO. Specified
// only when the ERO hop is an IPv4 or IPv6 prefix.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-prefix"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) IpPrefix() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): The MPLS label specified in the ERO hop. Specified only when
// the hop is an MPLS label.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Label() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): The MPLS label specified in the ERO hop. Specified only when
// the hop is an MPLS label.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Label() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Loose (leaf): When set to true, indicates that the hop of the ERO is
// a loose hop within the explicit route. If unset, indicates
// that the hop must explicitly traverse the entity specified
// in the ERO hop as the next-entity.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/loose"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Loose() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loose"},
			map[string]interface{}{},
			n,
		),
	}
}

// Loose (leaf): When set to true, indicates that the hop of the ERO is
// a loose hop within the explicit route. If unset, indicates
// that the hop must explicitly traverse the entity specified
// in the ERO hop as the next-entity.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/loose"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Loose() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loose"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of hop indicated by the ERO entry.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of hop indicated by the ERO entry.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny struct {
	*ygot.NodePath
}

// Address (leaf): IP router hop for RRO entry
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): IP router hop for RRO entry
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of object in the list. Used for ordering.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of object in the list. Used for ordering.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReportedFlags (leaf): Subobject flags for MPLS label
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reported-flags"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) ReportedFlags() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reported-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReportedFlags (leaf): Subobject flags for MPLS label
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reported-flags"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) ReportedFlags() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reported-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReportedLabel (leaf): Label reported for RRO hop
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reported-label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) ReportedLabel() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReportedLabel (leaf): Label reported for RRO hop
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reported-label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) ReportedLabel() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny struct {
	*ygot.NodePath
}

// PeakDataRate (leaf): The maximum traffic generation rate that the head-end
// device sends traffic at.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "peak-data-rate"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) PeakDataRate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"peak-data-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeakDataRate (leaf): The maximum traffic generation rate that the head-end
// device sends traffic at.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "peak-data-rate"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) PeakDataRate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"peak-data-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Rate (leaf): The rate at which the head-end device generates traffic,
// expressed in bytes per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rate"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) Rate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath{
		NodePath: ygot.NewNodePath(
			[]string{"rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Rate (leaf): The rate at which the head-end device generates traffic,
// expressed in bytes per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rate"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) Rate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The size of the token bucket that is used to determine
// the rate at which the head-end device generates traffic,
// expressed in bytes per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "size"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) Size() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath{
		NodePath: ygot.NewNodePath(
			[]string{"size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The size of the token bucket that is used to determine
// the rate at which the head-end device generates traffic,
// expressed in bytes per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "size"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) Size() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"size"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny struct {
	*ygot.NodePath
}

// AggregateSidCounterAny (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "aggregate-sid-counters/aggregate-sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
// MplsLabel (wildcarded): [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
}

// AggregateSidCounterAny (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "aggregate-sid-counters/aggregate-sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
// MplsLabel (wildcarded): [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
}

// AggregateSidCounter (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "aggregate-sid-counters/aggregate-sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
// MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath{
		NodePath: ygot.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
}

// AggregateSidCounter (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "aggregate-sid-counters/aggregate-sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
// MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
}

// InterfaceAny (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny struct {
	*ygot.NodePath
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny struct {
	*ygot.NodePath
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): A unique identifier for the interface.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): A unique identifier for the interface.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidCounterAny (list): Per segment identifier counters for the MPLS dataplane.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sid-counters/sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
// MplsLabel (wildcarded): [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
}

// SidCounterAny (list): Per segment identifier counters for the MPLS dataplane.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sid-counters/sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
// MplsLabel (wildcarded): [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
}

// SidCounter (list): Per segment identifier counters for the MPLS dataplane.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sid-counters/sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
// MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath{
		NodePath: ygot.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
}

// SidCounter (list): Per segment identifier counters for the MPLS dataplane.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sid-counters/sid-counter"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
// MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny struct {
	*ygot.NodePath
}

// ForwardingClassAny (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "forwarding-classes/forwarding-class"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
// Exp (wildcarded): uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClassAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": "*"},
			n,
		),
	}
}

// ForwardingClassAny (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "forwarding-classes/forwarding-class"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
// Exp (wildcarded): uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClassAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": "*"},
			n,
		),
	}
}

// ForwardingClass (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "forwarding-classes/forwarding-class"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
// Exp: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": Exp},
			n,
		),
	}
}

// ForwardingClass (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "forwarding-classes/forwarding-class"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
// Exp: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": Exp},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny struct {
	*ygot.NodePath
}

// Exp (leaf): The value of the MPLS EXP (experimental) or Traffic Class bits that the
// SID statistics relate to. Packets received with a MPLS label value
// equal to the SID's MPLS label and EXP bits equal to the this value
// should be counted towards the associated ingress statistics. Packets
// that are forwarded to the destination MPLS label corresponding to the
// SID should be counted towards this value. In the egress direction, where
// forwarding follows a SID value that requires PHP at the local node,
// packets should still be counted towards the egress counters.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/exp"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) Exp() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Exp (leaf): The value of the MPLS EXP (experimental) or Traffic Class bits that the
// SID statistics relate to. Packets received with a MPLS label value
// equal to the SID's MPLS label and EXP bits equal to the this value
// should be counted towards the associated ingress statistics. Packets
// that are forwarded to the destination MPLS label corresponding to the
// SID should be counted towards this value. In the egress direction, where
// forwarding follows a SID value that requires PHP at the local node,
// packets should still be counted towards the egress counters.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/exp"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) Exp() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exp"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/in-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-octets"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/out-pkts"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_TeGlobalAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributesPathAny struct {
	*ygot.NodePath
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
// AdminGroupName (wildcarded): string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroupAny() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
// AdminGroupName (wildcarded): string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroupAny() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
// AdminGroupName: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
// AdminGroupName: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
}

// SrlgAny (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) SrlgAny() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SrlgAny (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) SrlgAny() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Srlg (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
// Name: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) Srlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Srlg (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
// Name: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) Srlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TeLspTimers (container): Definition for delays associated with setup
// and cleanup of TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-lsp-timers"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) TeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath{
		NodePath: ygot.NewNodePath(
			[]string{"te-lsp-timers"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeLspTimers (container): Definition for delays associated with setup
// and cleanup of TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-lsp-timers"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) TeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-lsp-timers"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny struct {
	*ygot.NodePath
}

// AdminGroupName (leaf): name for mpls admin-group
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/admin-group-name"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) AdminGroupName() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroupName (leaf): name for mpls admin-group
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/admin-group-name"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) AdminGroupName() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bit-position"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) BitPosition() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bit-position"},
			map[string]interface{}{},
			n,
		),
	}
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bit-position"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) BitPosition() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bit-position"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny struct {
	*ygot.NodePath
}

// Cost (leaf): The cost of the SRLG to the computation
// algorithm
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cost"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Cost() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cost (leaf): The cost of the SRLG to the computation
// algorithm
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cost"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Cost() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// FloodingType (leaf): The type of SRLG, either flooded in the IGP or
// statically configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/flooding-type"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) FloodingType() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "flooding-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// FloodingType (leaf): The type of SRLG, either flooded in the IGP or
// statically configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/flooding-type"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) FloodingType() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "flooding-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// MembersListAny (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-srlg-members/members-list"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
// FromAddress (wildcarded): string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersListAny() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": "*"},
			n,
		),
	}
}

// MembersListAny (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-srlg-members/members-list"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
// FromAddress (wildcarded): string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersListAny() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": "*"},
			n,
		),
	}
}

// MembersList (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-srlg-members/members-list"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
// FromAddress: string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath{
		NodePath: ygot.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": FromAddress},
			n,
		),
	}
}

// MembersList (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-srlg-members/members-list"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
// FromAddress: string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": FromAddress},
			n,
		),
	}
}

// Name (leaf): SRLG group identifier
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Name() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): SRLG group identifier
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Name() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): group ID for the SRLG
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/value"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Value() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): group ID for the SRLG
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/value"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Value() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny struct {
	*ygot.NodePath
}

// FromAddress (leaf): IP address of the a-side of the SRLG link
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/from-address"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) FromAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "from-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// FromAddress (leaf): IP address of the a-side of the SRLG link
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/from-address"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) FromAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "from-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ToAddress (leaf): IP address of the z-side of the SRLG link
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/to-address"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) ToAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "to-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ToAddress (leaf): IP address of the z-side of the SRLG link
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/to-address"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) ToAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "to-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny struct {
	*ygot.NodePath
}

// CleanupDelay (leaf): delay the removal of old te lsp for a specified
// amount of time
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cleanup-delay"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) CleanupDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cleanup-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// CleanupDelay (leaf): delay the removal of old te lsp for a specified
// amount of time
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cleanup-delay"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) CleanupDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cleanup-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallDelay (leaf): delay the use of newly installed te lsp for a
// specified amount of time.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/install-delay"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) InstallDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "install-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallDelay (leaf): delay the use of newly installed te lsp for a
// specified amount of time.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/install-delay"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) InstallDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "install-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) ReoptimizeTimer() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwardingPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding YANG schema element.
type NetworkInstance_PolicyForwardingPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwardingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding YANG schema element.
type NetworkInstance_PolicyForwardingPathAny struct {
	*ygot.NodePath
}

// InterfaceAny (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_PolicyForwardingPath) InterfaceAny() *NetworkInstance_PolicyForwarding_InterfacePathAny {
	return &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_PolicyForwardingPathAny) InterfaceAny() *NetworkInstance_PolicyForwarding_InterfacePathAny {
	return &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_PolicyForwardingPath) Interface(InterfaceId string) *NetworkInstance_PolicyForwarding_InterfacePath {
	return &NetworkInstance_PolicyForwarding_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_PolicyForwardingPathAny) Interface(InterfaceId string) *NetworkInstance_PolicyForwarding_InterfacePathAny {
	return &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// PathSelectionGroupAny (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-selection-groups/path-selection-group"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
// GroupId (wildcarded): string
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroupAny() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
}

// PathSelectionGroupAny (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-selection-groups/path-selection-group"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
// GroupId (wildcarded): string
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroupAny() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
}

// PathSelectionGroup (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-selection-groups/path-selection-group"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
// GroupId: string
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroupPath {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
}

// PathSelectionGroup (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-selection-groups/path-selection-group"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
// GroupId: string
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
}

// PolicyAny (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policies/policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy"
// PolicyId (wildcarded): string
func (n *NetworkInstance_PolicyForwardingPath) PolicyAny() *NetworkInstance_PolicyForwarding_PolicyPathAny {
	return &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": "*"},
			n,
		),
	}
}

// PolicyAny (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policies/policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy"
// PolicyId (wildcarded): string
func (n *NetworkInstance_PolicyForwardingPathAny) PolicyAny() *NetworkInstance_PolicyForwarding_PolicyPathAny {
	return &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": "*"},
			n,
		),
	}
}

// Policy (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policies/policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy"
// PolicyId: string
func (n *NetworkInstance_PolicyForwardingPath) Policy(PolicyId string) *NetworkInstance_PolicyForwarding_PolicyPath {
	return &NetworkInstance_PolicyForwarding_PolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": PolicyId},
			n,
		),
	}
}

// Policy (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policies/policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy"
// PolicyId: string
func (n *NetworkInstance_PolicyForwardingPathAny) Policy(PolicyId string) *NetworkInstance_PolicyForwarding_PolicyPathAny {
	return &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": PolicyId},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// ApplyForwardingPolicy (leaf): The policy to be applied on the interface. Packets ingress on
// the referenced interface should be compared to the match
// criteria within the specified policy, and in the case that
// these criteria are met, the forwarding actions specified
// applied. These policies should be applied following quality of
// service classification, and ACL actions if such entities are
// referenced by the corresponding interface.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/apply-forwarding-policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) ApplyForwardingPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath {
	return &NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "apply-forwarding-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ApplyForwardingPolicy (leaf): The policy to be applied on the interface. Packets ingress on
// the referenced interface should be compared to the match
// criteria within the specified policy, and in the case that
// these criteria are met, the forwarding actions specified
// applied. These policies should be applied following quality of
// service classification, and ACL actions if such entities are
// referenced by the corresponding interface.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/apply-forwarding-policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) ApplyForwardingPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny {
	return &NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "apply-forwarding-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ApplyVrfSelectionPolicy (leaf): Apply the specific VRF selection policy on the interface. The referenced policy
// MUST be of type VRF_SELECTION_POLICY. The VRF selection policy may coexist with
// a policy-forwarding policy.
//
// The policy specified in this leaf is used to specifically choose the L3VRF network
// instance that is used for specific input criteria of packets.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/apply-vrf-selection-policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) ApplyVrfSelectionPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath {
	return &NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "apply-vrf-selection-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ApplyVrfSelectionPolicy (leaf): Apply the specific VRF selection policy on the interface. The referenced policy
// MUST be of type VRF_SELECTION_POLICY. The VRF selection policy may coexist with
// a policy-forwarding policy.
//
// The policy specified in this leaf is used to specifically choose the L3VRF network
// instance that is used for specific input criteria of packets.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/apply-vrf-selection-policy"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) ApplyVrfSelectionPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny {
	return &NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "apply-vrf-selection-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): A unique identifier for the interface.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) InterfaceId() *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): A unique identifier for the interface.
// ----------------------------------------
// Defining module: "openconfig-pf-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) InterfaceId() *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) InterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) InterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Interface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny struct {
	*ygot.NodePath
}

// GroupId (leaf): A unique name for the path-selection-group
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/group-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) GroupId() *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// GroupId (leaf): A unique name for the path-selection-group
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/group-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) GroupId() *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLsp (leaf-list): A set of MPLS constrained-path LSPs which should be
// considered for the policy forwarding next-hop. In order to
// select between the LSPs within the path-selection-group, the
// system should determine which LSP provides the best path to
// the next-hop for the routed packet.
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-lsp"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) MplsLsp() *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-lsp"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLsp (leaf-list): A set of MPLS constrained-path LSPs which should be
// considered for the policy forwarding next-hop. In order to
// select between the LSPs within the path-selection-group, the
// system should determine which LSP provides the best path to
// the next-hop for the routed packet.
// ----------------------------------------
// Defining module: "openconfig-pf-path-groups"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-lsp"
// Path from root: "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) MplsLsp() *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny {
	return &NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-lsp"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_PolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_PolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_PolicyIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_PolicyIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_TypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_TypePathAny struct {
	*ygot.NodePath
}

// PolicyId (leaf): A unique name identifying the forwarding policy. This name is
// used when applying the policy to a particular interface.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/policy-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) PolicyId() *NetworkInstance_PolicyForwarding_Policy_PolicyIdPath {
	return &NetworkInstance_PolicyForwarding_Policy_PolicyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "policy-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyId (leaf): A unique name identifying the forwarding policy. This name is
// used when applying the policy to a particular interface.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/policy-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) PolicyId() *NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "policy-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// RuleAny (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rules/rule"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
// SequenceId (wildcarded): uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPath) RuleAny() *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// RuleAny (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rules/rule"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
// SequenceId (wildcarded): uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) RuleAny() *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// Rule (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rules/rule"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
// SequenceId: uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Rule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_RulePath {
	return &NetworkInstance_PolicyForwarding_Policy_RulePath{
		NodePath: ygot.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// Rule (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rules/rule"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
// SequenceId: uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Rule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// Type (leaf): The type of the policy. By default policies are generally usable for policy-based
// routing, and have no restrictions on their implementation. Where there are alternate
// policy types, this leaf specifies that a policy is expected to conform with a subset
// of the functionality as described in the specified type.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/state/type"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Type() *NetworkInstance_PolicyForwarding_Policy_TypePath {
	return &NetworkInstance_PolicyForwarding_Policy_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of the policy. By default policies are generally usable for policy-based
// routing, and have no restrictions on their implementation. Where there are alternate
// policy types, this leaf specifies that a policy is expected to conform with a subset
// of the functionality as described in the specified type.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/state/type"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Type() *NetworkInstance_PolicyForwarding_Policy_TypePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_RulePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_RulePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny struct {
	*ygot.NodePath
}

// Action (container): The forwarding policy action to be applied for
// packets matching the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "action"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Action() *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Action (container): The forwarding policy action to be applied for
// packets matching the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "action"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Action() *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Ipv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Ipv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Ipv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Ipv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) L2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2Path{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) L2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Bytes matched by the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/matched-octets"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) MatchedOctets() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Bytes matched by the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/matched-octets"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) MatchedOctets() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPkts (leaf): Number of packets matched by the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/matched-pkts"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) MatchedPkts() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPkts (leaf): Number of packets matched by the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/matched-pkts"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) MatchedPkts() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Unique sequence number for the policy rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sequence-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) SequenceId() *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Unique sequence number for the policy rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sequence-id"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) SequenceId() *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transport"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Transport() *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transport"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Transport() *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny struct {
	*ygot.NodePath
}

// DecapsulateGre (leaf): When this leaf is set to true, the local system should remove
// the GRE header from the packet matching the rule. Following
// the decapsulation it should subsequently forward the
// encapsulated packet according to the relevant lookup (e.g., if
// the encapsulated packet is IP, the packet should be routed
// according to the IP destination).
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-gre"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateGre (leaf): When this leaf is set to true, the local system should remove
// the GRE header from the packet matching the rule. Following
// the decapsulation it should subsequently forward the
// encapsulated packet according to the relevant lookup (e.g., if
// the encapsulated packet is IP, the packet should be routed
// according to the IP destination).
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-gre"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateGue (leaf): When this leaf is set to true, the local system should remove
// the Generic UDP Encapsulation (GUE) header from the packet matching
// the rule. Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying IPv4 or IPv6 header.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-gue"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateGue() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-gue"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateGue (leaf): When this leaf is set to true, the local system should remove
// the Generic UDP Encapsulation (GUE) header from the packet matching
// the rule. Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying IPv4 or IPv6 header.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-gue"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateGue() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-gue"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateMplsInUdp (leaf): When this leaf is set to true, the local system should remove
// the UDP header from the packet matching the rule.
// Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying MPLS label.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-mpls-in-udp"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateMplsInUdp() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-mpls-in-udp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateMplsInUdp (leaf): When this leaf is set to true, the local system should remove
// the UDP header from the packet matching the rule.
// Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying MPLS label.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-mpls-in-udp"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateMplsInUdp() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-mpls-in-udp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Discard (leaf): When this leaf is set to true, the local system should drop
// packets that match the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/discard"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) Discard() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// Discard (leaf): When this leaf is set to true, the local system should drop
// packets that match the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/discard"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) Discard() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateGre (container): Packets matching the policy rule should be GRE encapsulated
// towards the set of targets defined within the target list. Where
// more than one target is specified, or the target subnet expands
// to more than one endpoint, packets should be load-balanced across
// the destination addresses within the subnets.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "encapsulate-gre"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) EncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath{
		NodePath: ygot.NewNodePath(
			[]string{"encapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateGre (container): Packets matching the policy rule should be GRE encapsulated
// towards the set of targets defined within the target list. Where
// more than one target is specified, or the target subnet expands
// to more than one endpoint, packets should be load-balanced across
// the destination addresses within the subnets.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "encapsulate-gre"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) EncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"encapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): When this leaf is set, packets matching the match criteria
// for the forwarding rule should be looked up in the
// network-instance that is referenced rather than the
// network-instance with which the interface is associated.
// Such configuration allows policy-routing into multiple
// sub-topologies from a single ingress access interface, or
// different send and receive contexts for a particular
// interface (sometimes referred to as half-duplex VRF).
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/network-instance"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) NetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): When this leaf is set, packets matching the match criteria
// for the forwarding rule should be looked up in the
// network-instance that is referenced rather than the
// network-instance with which the interface is associated.
// Such configuration allows policy-routing into multiple
// sub-topologies from a single ingress access interface, or
// different send and receive contexts for a particular
// interface (sometimes referred to as half-duplex VRF).
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/network-instance"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) NetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): When an IP next-hop is specified in the next-hop field,
// packets matching the match criteria for the forwarding rule
// should be forwarded to the next-hop IP address, bypassing any
// lookup on the local system.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) NextHop() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): When an IP next-hop is specified in the next-hop field,
// packets matching the match criteria for the forwarding rule
// should be forwarded to the next-hop IP address, bypassing any
// lookup on the local system.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) NextHop() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathSelectionGroup (leaf): When path-selection-group is set, packets matching the
// match criteria for the forwarding rule should be forwarded
// only via one of the paths that is specified within the
// referenced path-selection-group. The next-hop of the packet
// within the routing context should be used to determine between
// multiple paths that are specified within the group.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-selection-group"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) PathSelectionGroup() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-selection-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathSelectionGroup (leaf): When path-selection-group is set, packets matching the
// match criteria for the forwarding rule should be forwarded
// only via one of the paths that is specified within the
// referenced path-selection-group. The next-hop of the packet
// within the routing context should be used to determine between
// multiple paths that are specified within the group.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/path-selection-group"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) PathSelectionGroup() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path-selection-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny struct {
	*ygot.NodePath
}

// IdentifyingPrefix (leaf): An IP prefix that can be used to identify the group of
// GRE endpoints that are being encapsulated towards. Systems
// that require an IP identifier for the tunnel set
// should use this prefix as the next-hop identifier.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/identifying-prefix"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) IdentifyingPrefix() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "identifying-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IdentifyingPrefix (leaf): An IP prefix that can be used to identify the group of
// GRE endpoints that are being encapsulated towards. Systems
// that require an IP identifier for the tunnel set
// should use this prefix as the next-hop identifier.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/identifying-prefix"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) IdentifyingPrefix() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "identifying-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetAny (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
// Id (wildcarded): string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) TargetAny() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// TargetAny (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
// Id (wildcarded): string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) TargetAny() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Target (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
// Id: string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) Target(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Target (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targets/target"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
// Id: string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) Target(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny struct {
	*ygot.NodePath
}

// Destination (leaf): The set of destination addresses that should be encapsulated towards.
// Where a subnet is specified, each address within the subnet should be
// treated as an independent destination for encapsulated traffic. Packets
// should be distributed with ECMP across the set of tunnel destination
// addresses.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Destination() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination"},
			map[string]interface{}{},
			n,
		),
	}
}

// Destination (leaf): The set of destination addresses that should be encapsulated towards.
// Where a subnet is specified, each address within the subnet should be
// treated as an independent destination for encapsulated traffic. Packets
// should be distributed with ECMP across the set of tunnel destination
// addresses.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Destination() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the target.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Id() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the target.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Id() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpTtl (leaf): The TTL that should be specified in the IP header of the GRE packet
// encapsulating the packet matching the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-ttl"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) IpTtl() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpTtl (leaf): The TTL that should be specified in the IP header of the GRE packet
// encapsulating the packet matching the rule.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-ttl"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) IpTtl() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): The source IP address that should be used when encapsulating
// packets from the local system.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Source() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): The source IP address that should be used when encapsulating
// packets from the local system.
// ----------------------------------------
// Defining module: "openconfig-pf-forwarding-policies"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Source() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp-set"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp-set"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hop-limit"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hop-limit"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protocol"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protocol"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-flow-label"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-flow-label"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp-set"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp-set"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hop-limit"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/hop-limit"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protocol"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protocol"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-address"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-flow-label"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-flow-label"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2Path struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny struct {
	*ygot.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-mac"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) DestinationMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-mac"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) DestinationMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-mac-mask"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) DestinationMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-mac-mask"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) DestinationMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ethertype"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) Ethertype() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ethertype"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ethertype"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) Ethertype() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ethertype"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMac (leaf): Source IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-mac"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) SourceMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMac (leaf): Source IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-mac"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) SourceMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-mac-mask"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) SourceMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-mac-mask"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) SourceMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/tcp-flags YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPath struct {
	*ygot.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/tcp-flags YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPathAny struct {
	*ygot.NodePath
}

// DestinationPort (leaf): Destination port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-port"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) DestinationPort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationPort (leaf): Destination port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/destination-port"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) DestinationPort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-port"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) SourcePort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/source-port"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) SourcePort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// TcpFlags (leaf-list): List of TCP flags to match
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tcp-flags"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) TcpFlags() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPath {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tcp-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// TcpFlags (leaf-list): List of TCP flags to match
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tcp-flags"
// Path from root: "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) TcpFlags() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPathAny {
	return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_TcpFlagsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tcp-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol YANG schema element.
type NetworkInstance_ProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol YANG schema element.
type NetworkInstance_ProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_DefaultMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/default-metric YANG schema element.
type NetworkInstance_Protocol_DefaultMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_DefaultMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/default-metric YANG schema element.
type NetworkInstance_Protocol_DefaultMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/enabled YANG schema element.
type NetworkInstance_Protocol_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/enabled YANG schema element.
type NetworkInstance_Protocol_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_IdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/identifier YANG schema element.
type NetworkInstance_Protocol_IdentifierPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_IdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/identifier YANG schema element.
type NetworkInstance_Protocol_IdentifierPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_NamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/name YANG schema element.
type NetworkInstance_Protocol_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/name YANG schema element.
type NetworkInstance_Protocol_NamePathAny struct {
	*ygot.NodePath
}

// AggregateAny (list): List of aggregates
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local-aggregates/aggregate"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
// Prefix (wildcarded): string
func (n *NetworkInstance_ProtocolPath) AggregateAny() *NetworkInstance_Protocol_AggregatePathAny {
	return &NetworkInstance_Protocol_AggregatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// AggregateAny (list): List of aggregates
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local-aggregates/aggregate"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
// Prefix (wildcarded): string
func (n *NetworkInstance_ProtocolPathAny) AggregateAny() *NetworkInstance_Protocol_AggregatePathAny {
	return &NetworkInstance_Protocol_AggregatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Aggregate (list): List of aggregates
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local-aggregates/aggregate"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
// Prefix: string
func (n *NetworkInstance_ProtocolPath) Aggregate(Prefix string) *NetworkInstance_Protocol_AggregatePath {
	return &NetworkInstance_Protocol_AggregatePath{
		NodePath: ygot.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Aggregate (list): List of aggregates
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local-aggregates/aggregate"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
// Prefix: string
func (n *NetworkInstance_ProtocolPathAny) Aggregate(Prefix string) *NetworkInstance_Protocol_AggregatePathAny {
	return &NetworkInstance_Protocol_AggregatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Bgp (container): Top-level configuration and state for the BGP router
// ----------------------------------------
// Defining module: "openconfig-bgp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bgp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp"
func (n *NetworkInstance_ProtocolPath) Bgp() *NetworkInstance_Protocol_BgpPath {
	return &NetworkInstance_Protocol_BgpPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bgp (container): Top-level configuration and state for the BGP router
// ----------------------------------------
// Defining module: "openconfig-bgp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bgp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp"
func (n *NetworkInstance_ProtocolPathAny) Bgp() *NetworkInstance_Protocol_BgpPathAny {
	return &NetworkInstance_Protocol_BgpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultMetric (leaf): The default metric within the RIB for entries that are
// installed by this protocol instance. This value may
// be overridden by protocol specific configuration options.
// The lower the metric specified the more preferable the RIB
// entry is to be selected for use within the network instance.
// Where multiple entries have the same metric value then these
// equal cost paths should be treated according to the specified
// ECMP path selection behaviour for the instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/default-metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/default-metric"
func (n *NetworkInstance_ProtocolPath) DefaultMetric() *NetworkInstance_Protocol_DefaultMetricPath {
	return &NetworkInstance_Protocol_DefaultMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "default-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultMetric (leaf): The default metric within the RIB for entries that are
// installed by this protocol instance. This value may
// be overridden by protocol specific configuration options.
// The lower the metric specified the more preferable the RIB
// entry is to be selected for use within the network instance.
// Where multiple entries have the same metric value then these
// equal cost paths should be treated according to the specified
// ECMP path selection behaviour for the instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/default-metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/default-metric"
func (n *NetworkInstance_ProtocolPathAny) DefaultMetric() *NetworkInstance_Protocol_DefaultMetricPathAny {
	return &NetworkInstance_Protocol_DefaultMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "default-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): A boolean value indicating whether the local protocol
// instance is enabled.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/enabled"
func (n *NetworkInstance_ProtocolPath) Enabled() *NetworkInstance_Protocol_EnabledPath {
	return &NetworkInstance_Protocol_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): A boolean value indicating whether the local protocol
// instance is enabled.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/enabled"
func (n *NetworkInstance_ProtocolPathAny) Enabled() *NetworkInstance_Protocol_EnabledPathAny {
	return &NetworkInstance_Protocol_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Identifier (leaf): The protocol identifier for the instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/identifier"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/identifier"
func (n *NetworkInstance_ProtocolPath) Identifier() *NetworkInstance_Protocol_IdentifierPath {
	return &NetworkInstance_Protocol_IdentifierPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// Identifier (leaf): The protocol identifier for the instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/identifier"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/identifier"
func (n *NetworkInstance_ProtocolPathAny) Identifier() *NetworkInstance_Protocol_IdentifierPathAny {
	return &NetworkInstance_Protocol_IdentifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// Igmp (container): Top-level IGMP configuration and operational state.
// ----------------------------------------
// Defining module: "openconfig-igmp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igmp"
// Path from root: "/network-instances/network-instance/protocols/protocol/igmp"
func (n *NetworkInstance_ProtocolPath) Igmp() *NetworkInstance_Protocol_IgmpPath {
	return &NetworkInstance_Protocol_IgmpPath{
		NodePath: ygot.NewNodePath(
			[]string{"igmp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Igmp (container): Top-level IGMP configuration and operational state.
// ----------------------------------------
// Defining module: "openconfig-igmp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igmp"
// Path from root: "/network-instances/network-instance/protocols/protocol/igmp"
func (n *NetworkInstance_ProtocolPathAny) Igmp() *NetworkInstance_Protocol_IgmpPathAny {
	return &NetworkInstance_Protocol_IgmpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"igmp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Isis (container): This container defines top-level ISIS configuration and state
// information.
// ----------------------------------------
// Defining module: "openconfig-isis"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "isis"
// Path from root: "/network-instances/network-instance/protocols/protocol/isis"
func (n *NetworkInstance_ProtocolPath) Isis() *NetworkInstance_Protocol_IsisPath {
	return &NetworkInstance_Protocol_IsisPath{
		NodePath: ygot.NewNodePath(
			[]string{"isis"},
			map[string]interface{}{},
			n,
		),
	}
}

// Isis (container): This container defines top-level ISIS configuration and state
// information.
// ----------------------------------------
// Defining module: "openconfig-isis"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "isis"
// Path from root: "/network-instances/network-instance/protocols/protocol/isis"
func (n *NetworkInstance_ProtocolPathAny) Isis() *NetworkInstance_Protocol_IsisPathAny {
	return &NetworkInstance_Protocol_IsisPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"isis"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): A unique name for the protocol instance.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support single protocol instances, the
// default value is recommended for consistency and uniqueness
// per protocol instance.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/name"
func (n *NetworkInstance_ProtocolPath) Name() *NetworkInstance_Protocol_NamePath {
	return &NetworkInstance_Protocol_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): A unique name for the protocol instance.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support single protocol instances, the
// default value is recommended for consistency and uniqueness
// per protocol instance.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/protocols/protocol/state/name"
func (n *NetworkInstance_ProtocolPathAny) Name() *NetworkInstance_Protocol_NamePathAny {
	return &NetworkInstance_Protocol_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ospfv2 (container): Top-level configuration and operational state for
// Open Shortest Path First (OSPF) v2
// ----------------------------------------
// Defining module: "openconfig-ospfv2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ospfv2"
// Path from root: "/network-instances/network-instance/protocols/protocol/ospfv2"
func (n *NetworkInstance_ProtocolPath) Ospfv2() *NetworkInstance_Protocol_Ospfv2Path {
	return &NetworkInstance_Protocol_Ospfv2Path{
		NodePath: ygot.NewNodePath(
			[]string{"ospfv2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ospfv2 (container): Top-level configuration and operational state for
// Open Shortest Path First (OSPF) v2
// ----------------------------------------
// Defining module: "openconfig-ospfv2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ospfv2"
// Path from root: "/network-instances/network-instance/protocols/protocol/ospfv2"
func (n *NetworkInstance_ProtocolPathAny) Ospfv2() *NetworkInstance_Protocol_Ospfv2PathAny {
	return &NetworkInstance_Protocol_Ospfv2PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ospfv2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pcep (container): Top-level PCEP configuration and operational state.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pcep"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep"
func (n *NetworkInstance_ProtocolPath) Pcep() *NetworkInstance_Protocol_PcepPath {
	return &NetworkInstance_Protocol_PcepPath{
		NodePath: ygot.NewNodePath(
			[]string{"pcep"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pcep (container): Top-level PCEP configuration and operational state.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pcep"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep"
func (n *NetworkInstance_ProtocolPathAny) Pcep() *NetworkInstance_Protocol_PcepPathAny {
	return &NetworkInstance_Protocol_PcepPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pcep"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pim (container): Top-level PIM configuration and operational state.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pim"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim"
func (n *NetworkInstance_ProtocolPath) Pim() *NetworkInstance_Protocol_PimPath {
	return &NetworkInstance_Protocol_PimPath{
		NodePath: ygot.NewNodePath(
			[]string{"pim"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pim (container): Top-level PIM configuration and operational state.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pim"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim"
func (n *NetworkInstance_ProtocolPathAny) Pim() *NetworkInstance_Protocol_PimPathAny {
	return &NetworkInstance_Protocol_PimPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pim"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticAny (list): List of locally configured static routes
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-routes/static"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static"
// Prefix (wildcarded): string
func (n *NetworkInstance_ProtocolPath) StaticAny() *NetworkInstance_Protocol_StaticPathAny {
	return &NetworkInstance_Protocol_StaticPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// StaticAny (list): List of locally configured static routes
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-routes/static"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static"
// Prefix (wildcarded): string
func (n *NetworkInstance_ProtocolPathAny) StaticAny() *NetworkInstance_Protocol_StaticPathAny {
	return &NetworkInstance_Protocol_StaticPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Static (list): List of locally configured static routes
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-routes/static"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static"
// Prefix: string
func (n *NetworkInstance_ProtocolPath) Static(Prefix string) *NetworkInstance_Protocol_StaticPath {
	return &NetworkInstance_Protocol_StaticPath{
		NodePath: ygot.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Static (list): List of locally configured static routes
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-routes/static"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static"
// Prefix: string
func (n *NetworkInstance_ProtocolPathAny) Static(Prefix string) *NetworkInstance_Protocol_StaticPathAny {
	return &NetworkInstance_Protocol_StaticPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// NetworkInstance_Protocol_AggregatePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate YANG schema element.
type NetworkInstance_Protocol_AggregatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_AggregatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate YANG schema element.
type NetworkInstance_Protocol_AggregatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description YANG schema element.
type NetworkInstance_Protocol_Aggregate_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description YANG schema element.
type NetworkInstance_Protocol_Aggregate_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_DiscardPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard YANG schema element.
type NetworkInstance_Protocol_Aggregate_DiscardPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_DiscardPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard YANG schema element.
type NetworkInstance_Protocol_Aggregate_DiscardPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric YANG schema element.
type NetworkInstance_Protocol_Aggregate_MetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric YANG schema element.
type NetworkInstance_Protocol_Aggregate_MetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference YANG schema element.
type NetworkInstance_Protocol_Aggregate_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference YANG schema element.
type NetworkInstance_Protocol_Aggregate_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix YANG schema element.
type NetworkInstance_Protocol_Aggregate_PrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix YANG schema element.
type NetworkInstance_Protocol_Aggregate_PrefixPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_SetTagPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag YANG schema element.
type NetworkInstance_Protocol_Aggregate_SetTagPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Aggregate_SetTagPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag YANG schema element.
type NetworkInstance_Protocol_Aggregate_SetTagPathAny struct {
	*ygot.NodePath
}

// Description (leaf): An optional textual description for the route.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description"
func (n *NetworkInstance_Protocol_AggregatePath) Description() *NetworkInstance_Protocol_Aggregate_DescriptionPath {
	return &NetworkInstance_Protocol_Aggregate_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): An optional textual description for the route.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/description"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description"
func (n *NetworkInstance_Protocol_AggregatePathAny) Description() *NetworkInstance_Protocol_Aggregate_DescriptionPathAny {
	return &NetworkInstance_Protocol_Aggregate_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Discard (leaf): When true, install the aggregate route with a discard
// next-hop -- traffic destined to the aggregate will be
// discarded with no ICMP message generated.  When false,
// traffic destined to an aggregate address when no
// constituent routes are present will generate an ICMP
// unreachable message.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/discard"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard"
func (n *NetworkInstance_Protocol_AggregatePath) Discard() *NetworkInstance_Protocol_Aggregate_DiscardPath {
	return &NetworkInstance_Protocol_Aggregate_DiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// Discard (leaf): When true, install the aggregate route with a discard
// next-hop -- traffic destined to the aggregate will be
// discarded with no ICMP message generated.  When false,
// traffic destined to an aggregate address when no
// constituent routes are present will generate an ICMP
// unreachable message.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/discard"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard"
func (n *NetworkInstance_Protocol_AggregatePathAny) Discard() *NetworkInstance_Protocol_Aggregate_DiscardPathAny {
	return &NetworkInstance_Protocol_Aggregate_DiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric"
func (n *NetworkInstance_Protocol_AggregatePath) Metric() *NetworkInstance_Protocol_Aggregate_MetricPath {
	return &NetworkInstance_Protocol_Aggregate_MetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric"
func (n *NetworkInstance_Protocol_AggregatePathAny) Metric() *NetworkInstance_Protocol_Aggregate_MetricPathAny {
	return &NetworkInstance_Protocol_Aggregate_MetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference"
func (n *NetworkInstance_Protocol_AggregatePath) Preference() *NetworkInstance_Protocol_Aggregate_PreferencePath {
	return &NetworkInstance_Protocol_Aggregate_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference"
func (n *NetworkInstance_Protocol_AggregatePathAny) Preference() *NetworkInstance_Protocol_Aggregate_PreferencePathAny {
	return &NetworkInstance_Protocol_Aggregate_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): Aggregate prefix to be advertised
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix"
func (n *NetworkInstance_Protocol_AggregatePath) Prefix() *NetworkInstance_Protocol_Aggregate_PrefixPath {
	return &NetworkInstance_Protocol_Aggregate_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): Aggregate prefix to be advertised
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix"
func (n *NetworkInstance_Protocol_AggregatePathAny) Prefix() *NetworkInstance_Protocol_Aggregate_PrefixPathAny {
	return &NetworkInstance_Protocol_Aggregate_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/set-tag"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag"
func (n *NetworkInstance_Protocol_AggregatePath) SetTag() *NetworkInstance_Protocol_Aggregate_SetTagPath {
	return &NetworkInstance_Protocol_Aggregate_SetTagPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/set-tag"
// Path from root: "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag"
func (n *NetworkInstance_Protocol_AggregatePathAny) SetTag() *NetworkInstance_Protocol_Aggregate_SetTagPathAny {
	return &NetworkInstance_Protocol_Aggregate_SetTagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_BgpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp YANG schema element.
type NetworkInstance_Protocol_BgpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_BgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp YANG schema element.
type NetworkInstance_Protocol_BgpPathAny struct {
	*ygot.NodePath
}

// Global (container): Global configuration for the BGP router
// ----------------------------------------
// Defining module: "openconfig-bgp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global"
func (n *NetworkInstance_Protocol_BgpPath) Global() *NetworkInstance_Protocol_Bgp_GlobalPath {
	return &NetworkInstance_Protocol_Bgp_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): Global configuration for the BGP router
// ----------------------------------------
// Defining module: "openconfig-bgp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global"
func (n *NetworkInstance_Protocol_BgpPathAny) Global() *NetworkInstance_Protocol_Bgp_GlobalPathAny {
	return &NetworkInstance_Protocol_Bgp_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of BGP neighbors configured on the local system,
// uniquely identified by peer IPv[46] address
// ----------------------------------------
// Defining module: "openconfig-bgp-neighbor"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor"
// NeighborAddress (wildcarded): string
func (n *NetworkInstance_Protocol_BgpPath) NeighborAny() *NetworkInstance_Protocol_Bgp_NeighborPathAny {
	return &NetworkInstance_Protocol_Bgp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of BGP neighbors configured on the local system,
// uniquely identified by peer IPv[46] address
// ----------------------------------------
// Defining module: "openconfig-bgp-neighbor"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor"
// NeighborAddress (wildcarded): string
func (n *NetworkInstance_Protocol_BgpPathAny) NeighborAny() *NetworkInstance_Protocol_Bgp_NeighborPathAny {
	return &NetworkInstance_Protocol_Bgp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": "*"},
			n,
		),
	}
}

// Neighbor (list): List of BGP neighbors configured on the local system,
// uniquely identified by peer IPv[46] address
// ----------------------------------------
// Defining module: "openconfig-bgp-neighbor"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor"
// NeighborAddress: string
func (n *NetworkInstance_Protocol_BgpPath) Neighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_NeighborPath {
	return &NetworkInstance_Protocol_Bgp_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": NeighborAddress},
			n,
		),
	}
}

// Neighbor (list): List of BGP neighbors configured on the local system,
// uniquely identified by peer IPv[46] address
// ----------------------------------------
// Defining module: "openconfig-bgp-neighbor"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor"
// NeighborAddress: string
func (n *NetworkInstance_Protocol_BgpPathAny) Neighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_NeighborPathAny {
	return &NetworkInstance_Protocol_Bgp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": NeighborAddress},
			n,
		),
	}
}

// PeerGroupAny (list): List of BGP peer-groups configured on the local system -
// uniquely identified by peer-group name
// ----------------------------------------
// Defining module: "openconfig-bgp-peer-group"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "peer-groups/peer-group"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group"
// PeerGroupName (wildcarded): string
func (n *NetworkInstance_Protocol_BgpPath) PeerGroupAny() *NetworkInstance_Protocol_Bgp_PeerGroupPathAny {
	return &NetworkInstance_Protocol_Bgp_PeerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"peer-groups", "peer-group"},
			map[string]interface{}{"peer-group-name": "*"},
			n,
		),
	}
}

// PeerGroupAny (list): List of BGP peer-groups configured on the local system -
// uniquely identified by peer-group name
// ----------------------------------------
// Defining module: "openconfig-bgp-peer-group"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "peer-groups/peer-group"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group"
// PeerGroupName (wildcarded): string
func (n *NetworkInstance_Protocol_BgpPathAny) PeerGroupAny() *NetworkInstance_Protocol_Bgp_PeerGroupPathAny {
	return &NetworkInstance_Protocol_Bgp_PeerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"peer-groups", "peer-group"},
			map[string]interface{}{"peer-group-name": "*"},
			n,
		),
	}
}

// PeerGroup (list): List of BGP peer-groups configured on the local system -
// uniquely identified by peer-group name
// ----------------------------------------
// Defining module: "openconfig-bgp-peer-group"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "peer-groups/peer-group"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group"
// PeerGroupName: string
func (n *NetworkInstance_Protocol_BgpPath) PeerGroup(PeerGroupName string) *NetworkInstance_Protocol_Bgp_PeerGroupPath {
	return &NetworkInstance_Protocol_Bgp_PeerGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"peer-groups", "peer-group"},
			map[string]interface{}{"peer-group-name": PeerGroupName},
			n,
		),
	}
}

// PeerGroup (list): List of BGP peer-groups configured on the local system -
// uniquely identified by peer-group name
// ----------------------------------------
// Defining module: "openconfig-bgp-peer-group"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "peer-groups/peer-group"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group"
// PeerGroupName: string
func (n *NetworkInstance_Protocol_BgpPathAny) PeerGroup(PeerGroupName string) *NetworkInstance_Protocol_Bgp_PeerGroupPathAny {
	return &NetworkInstance_Protocol_Bgp_PeerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"peer-groups", "peer-group"},
			map[string]interface{}{"peer-group-name": PeerGroupName},
			n,
		),
	}
}

// Rib (container): Top level container for BGP RIBs
// ----------------------------------------
// Defining module: "openconfig-rib-bgp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rib"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/rib"
func (n *NetworkInstance_Protocol_BgpPath) Rib() *NetworkInstance_Protocol_Bgp_RibPath {
	return &NetworkInstance_Protocol_Bgp_RibPath{
		NodePath: ygot.NewNodePath(
			[]string{"rib"},
			map[string]interface{}{},
			n,
		),
	}
}

// Rib (container): Top level container for BGP RIBs
// ----------------------------------------
// Defining module: "openconfig-rib-bgp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rib"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/rib"
func (n *NetworkInstance_Protocol_BgpPathAny) Rib() *NetworkInstance_Protocol_Bgp_RibPathAny {
	return &NetworkInstance_Protocol_Bgp_RibPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rib"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global YANG schema element.
type NetworkInstance_Protocol_Bgp_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global YANG schema element.
type NetworkInstance_Protocol_Bgp_GlobalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/as YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/as YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/router-id YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_RouterIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/router-id YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_RouterIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_TotalPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/total-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_TotalPathsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_TotalPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/total-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_TotalPathsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/total-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/state/total-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPathAny struct {
	*ygot.NodePath
}

// AfiSafiAny (list): AFI,SAFI configuration available for the
// neighbour or group
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afi-safis/afi-safi"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi"
// AfiSafiName (wildcarded): oc.E_BgpTypes_AFI_SAFI_TYPE
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) AfiSafiAny() *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": "*"},
			n,
		),
	}
}

// AfiSafiAny (list): AFI,SAFI configuration available for the
// neighbour or group
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afi-safis/afi-safi"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi"
// AfiSafiName (wildcarded): oc.E_BgpTypes_AFI_SAFI_TYPE
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) AfiSafiAny() *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": "*"},
			n,
		),
	}
}

// AfiSafi (list): AFI,SAFI configuration available for the
// neighbour or group
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afi-safis/afi-safi"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi"
// AfiSafiName: oc.E_BgpTypes_AFI_SAFI_TYPE
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) AfiSafi(AfiSafiName oc.E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafiPath{
		NodePath: ygot.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": AfiSafiName},
			n,
		),
	}
}

// AfiSafi (list): AFI,SAFI configuration available for the
// neighbour or group
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afi-safis/afi-safi"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi"
// AfiSafiName: oc.E_BgpTypes_AFI_SAFI_TYPE
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) AfiSafi(AfiSafiName oc.E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": AfiSafiName},
			n,
		),
	}
}

// As (leaf): Local autonomous system number of the router.  Uses
// the 32-bit as-number type from the model in RFC 6991.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/as"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/as"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) As() *NetworkInstance_Protocol_Bgp_Global_AsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as"},
			map[string]interface{}{},
			n,
		),
	}
}

// As (leaf): Local autonomous system number of the router.  Uses
// the 32-bit as-number type from the model in RFC 6991.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/as"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/as"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) As() *NetworkInstance_Protocol_Bgp_Global_AsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as"},
			map[string]interface{}{},
			n,
		),
	}
}

// Confederation (container): Parameters indicating whether the local system acts as part
// of a BGP confederation
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "confederation"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/confederation"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) Confederation() *NetworkInstance_Protocol_Bgp_Global_ConfederationPath {
	return &NetworkInstance_Protocol_Bgp_Global_ConfederationPath{
		NodePath: ygot.NewNodePath(
			[]string{"confederation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Confederation (container): Parameters indicating whether the local system acts as part
// of a BGP confederation
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "confederation"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/confederation"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) Confederation() *NetworkInstance_Protocol_Bgp_Global_ConfederationPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_ConfederationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"confederation"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultRouteDistance (container): Administrative distance (or preference) assigned to
// routes received from different sources
// (external, internal, and local).
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "default-route-distance"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) DefaultRouteDistance() *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePath {
	return &NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePath{
		NodePath: ygot.NewNodePath(
			[]string{"default-route-distance"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultRouteDistance (container): Administrative distance (or preference) assigned to
// routes received from different sources
// (external, internal, and local).
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "default-route-distance"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) DefaultRouteDistance() *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePathAny {
	return &NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"default-route-distance"},
			map[string]interface{}{},
			n,
		),
	}
}

// DynamicNeighborPrefixAny (list): An individual prefix from which dynamic neighbor
// connections are allowed.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Prefix (wildcarded): string
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) DynamicNeighborPrefixAny() *NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-neighbor-prefixes", "dynamic-neighbor-prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// DynamicNeighborPrefixAny (list): An individual prefix from which dynamic neighbor
// connections are allowed.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Prefix (wildcarded): string
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) DynamicNeighborPrefixAny() *NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-neighbor-prefixes", "dynamic-neighbor-prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// DynamicNeighborPrefix (list): An individual prefix from which dynamic neighbor
// connections are allowed.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Prefix: string
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) DynamicNeighborPrefix(Prefix string) *NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPath {
	return &NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-neighbor-prefixes", "dynamic-neighbor-prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// DynamicNeighborPrefix (list): An individual prefix from which dynamic neighbor
// connections are allowed.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/dynamic-neighbor-prefixes/dynamic-neighbor-prefix"
// Prefix: string
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) DynamicNeighborPrefix(Prefix string) *NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_DynamicNeighborPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-neighbor-prefixes", "dynamic-neighbor-prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// GracefulRestart (container): Parameters relating the graceful restart mechanism for BGP
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) GracefulRestart() *NetworkInstance_Protocol_Bgp_Global_GracefulRestartPath {
	return &NetworkInstance_Protocol_Bgp_Global_GracefulRestartPath{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Parameters relating the graceful restart mechanism for BGP
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) GracefulRestart() *NetworkInstance_Protocol_Bgp_Global_GracefulRestartPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_GracefulRestartPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteSelectionOptions (container): Parameters relating to options for route selection
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-selection-options"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/route-selection-options"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) RouteSelectionOptions() *NetworkInstance_Protocol_Bgp_Global_RouteSelectionOptionsPath {
	return &NetworkInstance_Protocol_Bgp_Global_RouteSelectionOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"route-selection-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteSelectionOptions (container): Parameters relating to options for route selection
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-selection-options"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/route-selection-options"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) RouteSelectionOptions() *NetworkInstance_Protocol_Bgp_Global_RouteSelectionOptionsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_RouteSelectionOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-selection-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterId (leaf): Router id of the router - an unsigned 32-bit integer
// expressed in dotted quad notation.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/router-id"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) RouterId() *NetworkInstance_Protocol_Bgp_Global_RouterIdPath {
	return &NetworkInstance_Protocol_Bgp_Global_RouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterId (leaf): Router id of the router - an unsigned 32-bit integer
// expressed in dotted quad notation.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/router-id"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) RouterId() *NetworkInstance_Protocol_Bgp_Global_RouterIdPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_RouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPaths (leaf): Total number of BGP paths within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) TotalPaths() *NetworkInstance_Protocol_Bgp_Global_TotalPathsPath {
	return &NetworkInstance_Protocol_Bgp_Global_TotalPathsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPaths (leaf): Total number of BGP paths within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) TotalPaths() *NetworkInstance_Protocol_Bgp_Global_TotalPathsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_TotalPathsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPrefixes (leaf): Total number of BGP prefixes received within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) TotalPrefixes() *NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPrefixes (leaf): Total number of BGP prefixes received within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) TotalPrefixes() *NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_TotalPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "use-multiple-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_GlobalPath) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_Global_UseMultiplePathsPath {
	return &NetworkInstance_Protocol_Bgp_Global_UseMultiplePathsPath{
		NodePath: ygot.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "use-multiple-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_GlobalPathAny) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_Global_UseMultiplePathsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_UseMultiplePathsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafiPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/afi-safi-name YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/afi-safi-name YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPathAny struct {
	*ygot.NodePath
}

// AddPaths (container): Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
// ----------------------------------------
// Defining module: "openconfig-bgp-common-structure"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "add-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) AddPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath{
		NodePath: ygot.NewNodePath(
			[]string{"add-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// AddPaths (container): Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
// ----------------------------------------
// Defining module: "openconfig-bgp-common-structure"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "add-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) AddPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"add-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiSafiName (leaf): AFI,SAFI
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/afi-safi-name"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) AfiSafiName() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-safi-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiSafiName (leaf): AFI,SAFI
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/afi-safi-name"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) AfiSafiName() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AfiSafiNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "afi-safi-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf indicates whether the AFI-SAFI is
// enabled for the neighbor or group
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) Enabled() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf indicates whether the AFI-SAFI is
// enabled for the neighbor or group
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Parameters relating to BGP graceful-restart
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) GracefulRestart() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPath{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Parameters relating to BGP graceful-restart
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) GracefulRestart() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4LabeledUnicast (container): IPv4 Labeled Unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-labeled-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) Ipv4LabeledUnicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4LabeledUnicast (container): IPv4 Labeled Unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-labeled-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) Ipv4LabeledUnicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Unicast (container): IPv4 unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) Ipv4Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Unicast (container): IPv4 unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) Ipv4Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6LabeledUnicast (container): IPv6 Labeled Unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-labeled-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) Ipv6LabeledUnicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6LabeledUnicast (container): IPv6 Labeled Unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-labeled-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) Ipv6LabeledUnicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Unicast (container): IPv6 unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) Ipv6Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Unicast (container): IPv6 unicast configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) Ipv6Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2VpnEvpn (container): BGP EVPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2vpn-evpn"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) L2VpnEvpn() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPath{
		NodePath: ygot.NewNodePath(
			[]string{"l2vpn-evpn"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2VpnEvpn (container): BGP EVPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2vpn-evpn"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) L2VpnEvpn() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2vpn-evpn"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2VpnVpls (container): BGP-signalled VPLS configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2vpn-vpls"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) L2VpnVpls() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPath{
		NodePath: ygot.NewNodePath(
			[]string{"l2vpn-vpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2VpnVpls (container): BGP-signalled VPLS configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2vpn-vpls"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) L2VpnVpls() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2vpn-vpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv4Multicast (container): Multicast IPv4 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv4-multicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) L3VpnIpv4Multicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPath{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv4-multicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv4Multicast (container): Multicast IPv4 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv4-multicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) L3VpnIpv4Multicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv4-multicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv4Unicast (container): Unicast IPv4 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv4-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) L3VpnIpv4Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv4Unicast (container): Unicast IPv4 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv4-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) L3VpnIpv4Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv6Multicast (container): Multicast IPv6 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv6-multicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) L3VpnIpv6Multicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPath{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv6-multicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv6Multicast (container): Multicast IPv6 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv6-multicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) L3VpnIpv6Multicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv6-multicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv6Unicast (container): Unicast IPv6 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv6-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) L3VpnIpv6Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VpnIpv6Unicast (container): Unicast IPv6 L3VPN configuration options
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l3vpn-ipv6-unicast"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) L3VpnIpv6Unicast() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l3vpn-ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteSelectionOptions (container): Parameters relating to options for route selection
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-selection-options"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) RouteSelectionOptions() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"route-selection-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteSelectionOptions (container): Parameters relating to options for route selection
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-selection-options"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) RouteSelectionOptions() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-selection-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrtePolicyIpv4 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv4 Unicast.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srte-policy-ipv4"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) SrtePolicyIpv4() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4Path {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"srte-policy-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrtePolicyIpv4 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv4 Unicast.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srte-policy-ipv4"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) SrtePolicyIpv4() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4PathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srte-policy-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrtePolicyIpv6 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv6 Unicast.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srte-policy-ipv6"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) SrtePolicyIpv6() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6Path {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"srte-policy-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrtePolicyIpv6 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv6 Unicast.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srte-policy-ipv6"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) SrtePolicyIpv6() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6PathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srte-policy-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPaths (leaf): Total number of BGP paths within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) TotalPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPaths (leaf): Total number of BGP paths within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) TotalPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPathsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPrefixes (leaf): Total number of BGP prefixes received within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) TotalPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalPrefixes (leaf): Total number of BGP prefixes received within the context
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/total-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) TotalPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_TotalPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "use-multiple-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPath) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPath{
		NodePath: ygot.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "use-multiple-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafiPathAny) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/receive YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/receive YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send-max YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send-max YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPathAny struct {
	*ygot.NodePath
}

// EligiblePrefixPolicy (leaf): A reference to a routing policy which can be used to
// restrict the prefixes for which add-paths is enabled
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/eligible-prefix-policy"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath) EligiblePrefixPolicy() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "eligible-prefix-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// EligiblePrefixPolicy (leaf): A reference to a routing policy which can be used to
// restrict the prefixes for which add-paths is enabled
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/eligible-prefix-policy"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny) EligiblePrefixPolicy() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "eligible-prefix-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// Receive (leaf): Enable capability negotiation to receive multiple path
// advertisements for an NLRI from the neighbor or group
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/receive"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/receive"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath) Receive() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "receive"},
			map[string]interface{}{},
			n,
		),
	}
}

// Receive (leaf): Enable capability negotiation to receive multiple path
// advertisements for an NLRI from the neighbor or group
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/receive"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/receive"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny) Receive() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_ReceivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "receive"},
			map[string]interface{}{},
			n,
		),
	}
}

// Send (leaf): Enable capability negotiation to send multiple path
// advertisements for an NLRI from the neighbor or group
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath) Send() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send"},
			map[string]interface{}{},
			n,
		),
	}
}

// Send (leaf): Enable capability negotiation to send multiple path
// advertisements for an NLRI from the neighbor or group
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny) Send() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendMax (leaf): The maximum total number of paths to advertise to neighbors
// for a single NLRI.  This includes the single best path as
// well as additional paths advertised when add-paths is
// enabled.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send-max"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send-max"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPath) SendMax() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send-max"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendMax (leaf): The maximum total number of paths to advertise to neighbors
// for a single NLRI.  This includes the single best path as
// well as additional paths advertised when add-paths is
// enabled.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send-max"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/add-paths/state/send-max"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPathsPathAny) SendMax() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_AddPaths_SendMaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send-max"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): This leaf indicates whether graceful-restart is enabled for
// this AFI-SAFI
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPath) Enabled() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf indicates whether graceful-restart is enabled for
// this AFI-SAFI
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestartPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_GracefulRestart_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/extended-next-hop-encoding YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/extended-next-hop-encoding YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/send-default-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/send-default-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePathAny struct {
	*ygot.NodePath
}

// ExtendedNextHopEncoding (leaf): This leaf indicates whether extended next-hop encoding is enabled for
// this AFI-SAFI
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/extended-next-hop-encoding"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/extended-next-hop-encoding"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath) ExtendedNextHopEncoding() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "extended-next-hop-encoding"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtendedNextHopEncoding (leaf): This leaf indicates whether extended next-hop encoding is enabled for
// this AFI-SAFI
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/extended-next-hop-encoding"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/extended-next-hop-encoding"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny) ExtendedNextHopEncoding() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_ExtendedNextHopEncodingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "extended-next-hop-encoding"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendDefaultRoute (leaf): If set to true, send the default-route to the neighbor(s)
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send-default-route"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/send-default-route"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPath) SendDefaultRoute() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send-default-route"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendDefaultRoute (leaf): If set to true, send the default-route to the neighbor(s)
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send-default-route"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/state/send-default-route"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4UnicastPathAny) SendDefaultRoute() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_SendDefaultRoutePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send-default-route"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/state/send-default-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/state/send-default-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendDefaultRoute (leaf): If set to true, send the default-route to the neighbor(s)
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send-default-route"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/state/send-default-route"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPath) SendDefaultRoute() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send-default-route"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendDefaultRoute (leaf): If set to true, send the default-route to the neighbor(s)
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/send-default-route"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/state/send-default-route"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6UnicastPathAny) SendDefaultRoute() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_SendDefaultRoutePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "send-default-route"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpnPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVplsPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4MulticastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4UnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6MulticastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6UnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/advertise-inactive-routes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/advertise-inactive-routes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/always-compare-med YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/always-compare-med YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/enable-aigp YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/enable-aigp YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/external-compare-router-id YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/external-compare-router-id YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-as-path-length YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-as-path-length YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-next-hop-igp-metric YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-next-hop-igp-metric YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPathAny struct {
	*ygot.NodePath
}

// AdvertiseInactiveRoutes (leaf): Advertise inactive routes to external peers.  The
// default is to only advertise active routes.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/advertise-inactive-routes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/advertise-inactive-routes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath) AdvertiseInactiveRoutes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertise-inactive-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertiseInactiveRoutes (leaf): Advertise inactive routes to external peers.  The
// default is to only advertise active routes.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/advertise-inactive-routes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/advertise-inactive-routes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny) AdvertiseInactiveRoutes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AdvertiseInactiveRoutesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "advertise-inactive-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlwaysCompareMed (leaf): Compare multi-exit discriminator (MED) value from
// different ASes when selecting the best route.  The
// default behavior is to only compare MEDs for paths
// received from the same AS.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/always-compare-med"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/always-compare-med"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath) AlwaysCompareMed() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "always-compare-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlwaysCompareMed (leaf): Compare multi-exit discriminator (MED) value from
// different ASes when selecting the best route.  The
// default behavior is to only compare MEDs for paths
// received from the same AS.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/always-compare-med"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/always-compare-med"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny) AlwaysCompareMed() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_AlwaysCompareMedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "always-compare-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableAigp (leaf): Flag to enable sending / receiving accumulated IGP
// attribute in routing updates
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable-aigp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/enable-aigp"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath) EnableAigp() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-aigp"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableAigp (leaf): Flag to enable sending / receiving accumulated IGP
// attribute in routing updates
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enable-aigp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/enable-aigp"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny) EnableAigp() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_EnableAigpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enable-aigp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExternalCompareRouterId (leaf): When comparing similar routes received from external
// BGP peers, use the router-id as a criterion to select
// the active path.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/external-compare-router-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/external-compare-router-id"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath) ExternalCompareRouterId() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "external-compare-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExternalCompareRouterId (leaf): When comparing similar routes received from external
// BGP peers, use the router-id as a criterion to select
// the active path.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/external-compare-router-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/external-compare-router-id"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny) ExternalCompareRouterId() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_ExternalCompareRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "external-compare-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgnoreAsPathLength (leaf): Ignore the AS path length when selecting the best path.
// The default is to use the AS path length and prefer paths
// with shorter length.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ignore-as-path-length"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-as-path-length"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath) IgnoreAsPathLength() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ignore-as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgnoreAsPathLength (leaf): Ignore the AS path length when selecting the best path.
// The default is to use the AS path length and prefer paths
// with shorter length.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ignore-as-path-length"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-as-path-length"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny) IgnoreAsPathLength() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreAsPathLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ignore-as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgnoreNextHopIgpMetric (leaf): Ignore the IGP metric to the next-hop when calculating
// BGP best-path. The default is to select the route for
// which the metric to the next-hop is lowest
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ignore-next-hop-igp-metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-next-hop-igp-metric"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPath) IgnoreNextHopIgpMetric() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ignore-next-hop-igp-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgnoreNextHopIgpMetric (leaf): Ignore the IGP metric to the next-hop when calculating
// BGP best-path. The default is to select the route for
// which the metric to the next-hop is lowest
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ignore-next-hop-igp-metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/state/ignore-next-hop-igp-metric"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptionsPathAny) IgnoreNextHopIgpMetric() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_RouteSelectionOptions_IgnoreNextHopIgpMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ignore-next-hop-igp-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4 YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4Path struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4 YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4PathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4Path) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4PathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4Path) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4PathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6 YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6Path struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6 YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6PathAny struct {
	*ygot.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6Path) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6PathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6Path) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "prefix-limit-received"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6PathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygot.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/max-prefixes"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix-limit-exceeded"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prevent-teardown"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
// ----------------------------------------
// Defining module: "openconfig-bgp-common-multiprotocol"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/warning-threshold-pct"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPathAny struct {
	*ygot.NodePath
}

// Ebgp (container): Multipath parameters for eBGP
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ebgp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPath) Ebgp() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ebgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ebgp (container): Multipath parameters for eBGP
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ebgp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPathAny) Ebgp() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ebgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the use of multiple paths for the same NLRI is
// enabled for the neighbor. This value is overridden by
// any more specific configuration value.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPath) Enabled() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the use of multiple paths for the same NLRI is
// enabled for the neighbor. This value is overridden by
// any more specific configuration value.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ibgp (container): Multipath parameters for iBGP
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ibgp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPath) Ibgp() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ibgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ibgp (container): Multipath parameters for iBGP
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ibgp"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePathsPathAny) Ibgp() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ibgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/maximum-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/maximum-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPathAny struct {
	*ygot.NodePath
}

// AllowMultipleAs (leaf): Allow multipath to use paths from different neighbouring
// ASes.  The default is to only consider multiple paths from
// the same neighbouring AS.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/allow-multiple-as"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPath) AllowMultipleAs() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allow-multiple-as"},
			map[string]interface{}{},
			n,
		),
	}
}

// AllowMultipleAs (leaf): Allow multipath to use paths from different neighbouring
// ASes.  The default is to only consider multiple paths from
// the same neighbouring AS.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/allow-multiple-as"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPathAny) AllowMultipleAs() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allow-multiple-as"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumPaths (leaf): Maximum number of parallel paths to consider when using
// BGP multipath. The default is use a single path.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/maximum-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/maximum-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPath) MaximumPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "maximum-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumPaths (leaf): Maximum number of parallel paths to consider when using
// BGP multipath. The default is use a single path.
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/maximum-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/state/maximum-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_EbgpPathAny) MaximumPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp_MaximumPathsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "maximum-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp/state/maximum-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp/state/maximum-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPathAny struct {
	*ygot.NodePath
}

// MaximumPaths (leaf): Maximum number of parallel paths to consider when using
// iBGP multipath. The default is to use a single path
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/maximum-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp/state/maximum-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPath) MaximumPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPath {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "maximum-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumPaths (leaf): Maximum number of parallel paths to consider when using
// iBGP multipath. The default is to use a single path
// ----------------------------------------
// Defining module: "openconfig-bgp-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/maximum-paths"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp/state/maximum-paths"
func (n *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_IbgpPathAny) MaximumPaths() *NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp_MaximumPathsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "maximum-paths"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_ConfederationPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/confederation YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_ConfederationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_ConfederationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/confederation YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_ConfederationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/identifier YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/identifier YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/member-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/member-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPathAny struct {
	*ygot.NodePath
}

// Identifier (leaf): Confederation identifier for the autonomous system.
// Setting the identifier indicates that the local-AS is part
// of a BGP confederation.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/identifier"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/identifier"
func (n *NetworkInstance_Protocol_Bgp_Global_ConfederationPath) Identifier() *NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPath {
	return &NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// Identifier (leaf): Confederation identifier for the autonomous system.
// Setting the identifier indicates that the local-AS is part
// of a BGP confederation.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/identifier"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/identifier"
func (n *NetworkInstance_Protocol_Bgp_Global_ConfederationPathAny) Identifier() *NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_Confederation_IdentifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemberAs (leaf-list): Remote autonomous systems that are to be treated
// as part of the local confederation.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/member-as"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/member-as"
func (n *NetworkInstance_Protocol_Bgp_Global_ConfederationPath) MemberAs() *NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPath {
	return &NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "member-as"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemberAs (leaf-list): Remote autonomous systems that are to be treated
// as part of the local confederation.
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/member-as"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/confederation/state/member-as"
func (n *NetworkInstance_Protocol_Bgp_Global_ConfederationPathAny) MemberAs() *NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPathAny {
	return &NetworkInstance_Protocol_Bgp_Global_Confederation_MemberAsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "member-as"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/external-route-distance YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/external-route-distance YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/internal-route-distance YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/internal-route-distance YANG schema element.
type NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePathAny struct {
	*ygot.NodePath
}

// ExternalRouteDistance (leaf): Administrative distance for routes learned from external
// BGP (eBGP).
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/external-route-distance"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/external-route-distance"
func (n *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePath) ExternalRouteDistance() *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePath {
	return &NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "external-route-distance"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExternalRouteDistance (leaf): Administrative distance for routes learned from external
// BGP (eBGP).
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/external-route-distance"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/external-route-distance"
func (n *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePathAny) ExternalRouteDistance() *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePathAny {
	return &NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_ExternalRouteDistancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "external-route-distance"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalRouteDistance (leaf): Administrative distance for routes learned from internal
// BGP (iBGP).
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/internal-route-distance"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/internal-route-distance"
func (n *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePath) InternalRouteDistance() *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePath {
	return &NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "internal-route-distance"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalRouteDistance (leaf): Administrative distance for routes learned from internal
// BGP (iBGP).
// ----------------------------------------
// Defining module: "openconfig-bgp-global"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/internal-route-distance"
// Path from root: "/network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/state/internal-route-distance"
func (n *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistancePathAny) InternalRouteDistance() *NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePathAny {
	return &NetworkInstance_Protocol_Bgp_Global_DefaultRouteDistance_InternalRouteDistancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "internal-route-distance"},
			map[string]interface{}{},
			n,
		),
	}
}
