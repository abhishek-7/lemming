/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/robjs/go/pkg/mod/github.com/openconfig/ygot@v0.24.2/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"github.com/openconfig/ygot/ygot"
)

// QosPath represents the /openconfig-qos/qos YANG schema element.
type QosPath struct {
	*ygot.NodePath
}

// QosPathAny represents the wildcard version of the /openconfig-qos/qos YANG schema element.
type QosPathAny struct {
	*ygot.NodePath
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name (wildcarded): string
func (n *QosPath) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	return &Qos_BufferAllocationProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name (wildcarded): string
func (n *QosPathAny) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	return &Qos_BufferAllocationProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name: string
func (n *QosPath) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePath {
	return &Qos_BufferAllocationProfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name: string
func (n *QosPathAny) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePathAny {
	return &Qos_BufferAllocationProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ClassifierAny (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name (wildcarded): string
func (n *QosPath) ClassifierAny() *Qos_ClassifierPathAny {
	return &Qos_ClassifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ClassifierAny (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name (wildcarded): string
func (n *QosPathAny) ClassifierAny() *Qos_ClassifierPathAny {
	return &Qos_ClassifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Classifier (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name: string
func (n *QosPath) Classifier(Name string) *Qos_ClassifierPath {
	return &Qos_ClassifierPath{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Classifier (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name: string
func (n *QosPathAny) Classifier(Name string) *Qos_ClassifierPathAny {
	return &Qos_ClassifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name (wildcarded): string
func (n *QosPath) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	return &Qos_ForwardingGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name (wildcarded): string
func (n *QosPathAny) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	return &Qos_ForwardingGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name: string
func (n *QosPath) ForwardingGroup(Name string) *Qos_ForwardingGroupPath {
	return &Qos_ForwardingGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name: string
func (n *QosPathAny) ForwardingGroup(Name string) *Qos_ForwardingGroupPathAny {
	return &Qos_ForwardingGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *QosPath) InterfaceAny() *Qos_InterfacePathAny {
	return &Qos_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *QosPathAny) InterfaceAny() *Qos_InterfacePathAny {
	return &Qos_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces referenced by QoS entities.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId: string
func (n *QosPath) Interface(InterfaceId string) *Qos_InterfacePath {
	return &Qos_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of interfaces referenced by QoS entities.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId: string
func (n *QosPathAny) Interface(InterfaceId string) *Qos_InterfacePathAny {
	return &Qos_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// QueueAny (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name (wildcarded): string
func (n *QosPath) QueueAny() *Qos_QueuePathAny {
	return &Qos_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueAny (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name (wildcarded): string
func (n *QosPathAny) QueueAny() *Qos_QueuePathAny {
	return &Qos_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Queue (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name: string
func (n *QosPath) Queue(Name string) *Qos_QueuePath {
	return &Qos_QueuePath{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Queue (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name: string
func (n *QosPathAny) Queue(Name string) *Qos_QueuePathAny {
	return &Qos_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name (wildcarded): string
func (n *QosPath) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	return &Qos_QueueManagementProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name (wildcarded): string
func (n *QosPathAny) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	return &Qos_QueueManagementProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name: string
func (n *QosPath) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePath {
	return &Qos_QueueManagementProfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name: string
func (n *QosPathAny) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePathAny {
	return &Qos_QueueManagementProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name (wildcarded): string
func (n *QosPath) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	return &Qos_SchedulerPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name (wildcarded): string
func (n *QosPathAny) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	return &Qos_SchedulerPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name: string
func (n *QosPath) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPath {
	return &Qos_SchedulerPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name: string
func (n *QosPathAny) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPathAny {
	return &Qos_SchedulerPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Qos_BufferAllocationProfilePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name YANG schema element.
type Qos_BufferAllocationProfile_NamePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name YANG schema element.
type Qos_BufferAllocationProfile_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name"
func (n *Qos_BufferAllocationProfilePath) Name() *Qos_BufferAllocationProfile_NamePath {
	return &Qos_BufferAllocationProfile_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name"
func (n *Qos_BufferAllocationProfilePathAny) Name() *Qos_BufferAllocationProfile_NamePathAny {
	return &Qos_BufferAllocationProfile_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name (wildcarded): string
func (n *Qos_BufferAllocationProfilePath) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	return &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name (wildcarded): string
func (n *Qos_BufferAllocationProfilePathAny) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	return &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name: string
func (n *Qos_BufferAllocationProfilePath) Queue(Name string) *Qos_BufferAllocationProfile_QueuePath {
	return &Qos_BufferAllocationProfile_QueuePath{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name: string
func (n *Qos_BufferAllocationProfilePathAny) Queue(Name string) *Qos_BufferAllocationProfile_QueuePathAny {
	return &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Qos_BufferAllocationProfile_QueuePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny struct {
	*ygot.NodePath
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dedicated-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath {
	return &Qos_BufferAllocationProfile_Queue_DedicatedBufferPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dedicated-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny {
	return &Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dynamic-limit-scaling-factor"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePath) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath {
	return &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
	}
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dynamic-limit-scaling-factor"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny {
	return &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name"
func (n *Qos_BufferAllocationProfile_QueuePath) Name() *Qos_BufferAllocationProfile_Queue_NamePath {
	return &Qos_BufferAllocationProfile_Queue_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name"
func (n *Qos_BufferAllocationProfile_QueuePathAny) Name() *Qos_BufferAllocationProfile_Queue_NamePathAny {
	return &Qos_BufferAllocationProfile_Queue_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/shared-buffer-limit-type"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePath) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath {
	return &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/shared-buffer-limit-type"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePathAny) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny {
	return &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/static-shared-buffer-limit"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePath) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath {
	return &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/static-shared-buffer-limit"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePathAny) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny {
	return &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/use-shared-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath {
	return &Qos_BufferAllocationProfile_Queue_UseSharedBufferPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/use-shared-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny {
	return &Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_ClassifierPath represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPath struct {
	*ygot.NodePath
}

// Qos_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_NamePath represents the /openconfig-qos/qos/classifiers/classifier/state/name YANG schema element.
type Qos_Classifier_NamePath struct {
	*ygot.NodePath
}

// Qos_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/state/name YANG schema element.
type Qos_Classifier_NamePathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_TypePath represents the /openconfig-qos/qos/classifiers/classifier/state/type YANG schema element.
type Qos_Classifier_TypePath struct {
	*ygot.NodePath
}

// Qos_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/state/type YANG schema element.
type Qos_Classifier_TypePathAny struct {
	*ygot.NodePath
}

// Name (leaf): User-assigned name of the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/classifiers/classifier/state/name"
func (n *Qos_ClassifierPath) Name() *Qos_Classifier_NamePath {
	return &Qos_Classifier_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): User-assigned name of the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/name"
// Path from root: "/qos/classifiers/classifier/state/name"
func (n *Qos_ClassifierPathAny) Name() *Qos_Classifier_NamePathAny {
	return &Qos_Classifier_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TermAny (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id (wildcarded): string
func (n *Qos_ClassifierPath) TermAny() *Qos_Classifier_TermPathAny {
	return &Qos_Classifier_TermPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// TermAny (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id (wildcarded): string
func (n *Qos_ClassifierPathAny) TermAny() *Qos_Classifier_TermPathAny {
	return &Qos_Classifier_TermPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Term (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id: string
func (n *Qos_ClassifierPath) Term(Id string) *Qos_Classifier_TermPath {
	return &Qos_Classifier_TermPath{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Term (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id: string
func (n *Qos_ClassifierPathAny) Term(Id string) *Qos_Classifier_TermPathAny {
	return &Qos_Classifier_TermPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Type (leaf): Type of classifier.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/type"
// Path from root: "/qos/classifiers/classifier/state/type"
func (n *Qos_ClassifierPath) Type() *Qos_Classifier_TypePath {
	return &Qos_Classifier_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of classifier.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/type"
// Path from root: "/qos/classifiers/classifier/state/type"
func (n *Qos_ClassifierPathAny) Type() *Qos_Classifier_TypePathAny {
	return &Qos_Classifier_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_TermPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPath struct {
	*ygot.NodePath
}

// Qos_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_IdPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Classifier_Term_IdPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Classifier_Term_IdPathAny struct {
	*ygot.NodePath
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "actions"
// Path from root: "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPath) Actions() *Qos_Classifier_Term_ActionsPath {
	return &Qos_Classifier_Term_ActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "actions"
// Path from root: "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPathAny) Actions() *Qos_Classifier_Term_ActionsPathAny {
	return &Qos_Classifier_Term_ActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conditions"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPath) Conditions() *Qos_Classifier_Term_ConditionsPath {
	return &Qos_Classifier_Term_ConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conditions"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPathAny) Conditions() *Qos_Classifier_Term_ConditionsPathAny {
	return &Qos_Classifier_Term_ConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Identifier for the match term
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/id"
// Path from root: "/qos/classifiers/classifier/terms/term/state/id"
func (n *Qos_Classifier_TermPath) Id() *Qos_Classifier_Term_IdPath {
	return &Qos_Classifier_Term_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Identifier for the match term
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/id"
// Path from root: "/qos/classifiers/classifier/terms/term/state/id"
func (n *Qos_Classifier_TermPathAny) Id() *Qos_Classifier_Term_IdPathAny {
	return &Qos_Classifier_Term_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_ActionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_ActionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_TargetGroupPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/state/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_TargetGroupPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/state/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPathAny struct {
	*ygot.NodePath
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "remark"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPath) Remark() *Qos_Classifier_Term_Actions_RemarkPath {
	return &Qos_Classifier_Term_Actions_RemarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "remark"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPathAny) Remark() *Qos_Classifier_Term_Actions_RemarkPathAny {
	return &Qos_Classifier_Term_Actions_RemarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/target-group"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/state/target-group"
func (n *Qos_Classifier_Term_ActionsPath) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPath {
	return &Qos_Classifier_Term_Actions_TargetGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "target-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/target-group"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/state/target-group"
func (n *Qos_Classifier_Term_ActionsPathAny) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPathAny {
	return &Qos_Classifier_Term_Actions_TargetGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "target-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_Actions_RemarkPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_RemarkPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny struct {
	*ygot.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPath {
	return &Qos_Classifier_Term_Actions_Remark_SetDot1PPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dot1p"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny {
	return &Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPath {
	return &Qos_Classifier_Term_Actions_Remark_SetDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny {
	return &Qos_Classifier_Term_Actions_Remark_SetDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath {
	return &Qos_Classifier_Term_Actions_Remark_SetMplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/set-mpls-tc"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny {
	return &Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_ConditionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_ConditionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPathAny struct {
	*ygot.NodePath
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv4"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4Path {
	return &Qos_Classifier_Term_Conditions_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv4"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4PathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv6"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6Path {
	return &Qos_Classifier_Term_Conditions_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv6"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6PathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "l2"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPath) L2() *Qos_Classifier_Term_Conditions_L2Path {
	return &Qos_Classifier_Term_Conditions_L2Path{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "l2"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPathAny) L2() *Qos_Classifier_Term_Conditions_L2PathAny {
	return &Qos_Classifier_Term_Conditions_L2PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "mpls"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPath) Mpls() *Qos_Classifier_Term_Conditions_MplsPath {
	return &Qos_Classifier_Term_Conditions_MplsPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "mpls"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPathAny) Mpls() *Qos_Classifier_Term_Conditions_MplsPathAny {
	return &Qos_Classifier_Term_Conditions_MplsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "transport"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPath) Transport() *Qos_Classifier_Term_Conditions_TransportPath {
	return &Qos_Classifier_Term_Conditions_TransportPath{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "transport"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPathAny) Transport() *Qos_Classifier_Term_Conditions_TransportPathAny {
	return &Qos_Classifier_Term_Conditions_TransportPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_Conditions_Ipv4Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4Path struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4PathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath {
	return &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Dscp() *Qos_Classifier_Term_Conditions_Ipv4_DscpPath {
	return &Qos_Classifier_Term_Conditions_Ipv4_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Dscp() *Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp-set"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DscpSet() *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath {
	return &Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp-set"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DscpSet() *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/hop-limit"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) HopLimit() *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath {
	return &Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/hop-limit"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) HopLimit() *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/protocol"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Protocol() *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath {
	return &Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/protocol"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Protocol() *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath {
	return &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_Conditions_Ipv6Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6Path struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6PathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-flow-label"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-flow-label"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Dscp() *Qos_Classifier_Term_Conditions_Ipv6_DscpPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Dscp() *Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp-set"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DscpSet() *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/dscp-set"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DscpSet() *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/hop-limit"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) HopLimit() *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/hop-limit"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) HopLimit() *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/protocol"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Protocol() *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/protocol"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Protocol() *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-address"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-flow-label"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath {
	return &Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-flow-label"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_Conditions_L2Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2Path struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2PathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_EthertypePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype YANG schema element.
type Qos_Classifier_Term_Conditions_L2_EthertypePath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_EthertypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype YANG schema element.
type Qos_Classifier_Term_Conditions_L2_EthertypePathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_SourceMacPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_SourceMacPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny struct {
	*ygot.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-mac"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2Path) DestinationMac() *Qos_Classifier_Term_Conditions_L2_DestinationMacPath {
	return &Qos_Classifier_Term_Conditions_L2_DestinationMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-mac"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) DestinationMac() *Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny {
	return &Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-mac-mask"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2Path) DestinationMacMask() *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath {
	return &Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/destination-mac-mask"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) DestinationMacMask() *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny {
	return &Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/ethertype"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2Path) Ethertype() *Qos_Classifier_Term_Conditions_L2_EthertypePath {
	return &Qos_Classifier_Term_Conditions_L2_EthertypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ethertype"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/ethertype"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) Ethertype() *Qos_Classifier_Term_Conditions_L2_EthertypePathAny {
	return &Qos_Classifier_Term_Conditions_L2_EthertypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ethertype"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMac (leaf): Source IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-mac"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2Path) SourceMac() *Qos_Classifier_Term_Conditions_L2_SourceMacPath {
	return &Qos_Classifier_Term_Conditions_L2_SourceMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMac (leaf): Source IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-mac"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) SourceMac() *Qos_Classifier_Term_Conditions_L2_SourceMacPathAny {
	return &Qos_Classifier_Term_Conditions_L2_SourceMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-mac-mask"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2Path) SourceMacMask() *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath {
	return &Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/source-mac-mask"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) SourceMacMask() *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny {
	return &Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_Conditions_MplsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_MplsPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_MplsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_MplsPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_TtlValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TtlValuePath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny struct {
	*ygot.NodePath
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/end-label-value"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) EndLabelValue() *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath {
	return &Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "end-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/end-label-value"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) EndLabelValue() *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny {
	return &Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "end-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/start-label-value"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) StartLabelValue() *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath {
	return &Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/start-label-value"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) StartLabelValue() *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny {
	return &Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/traffic-class"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"
func (n *Qos_Classifier_Term_Conditions_MplsPath) TrafficClass() *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath {
	return &Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "traffic-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/traffic-class"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) TrafficClass() *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny {
	return &Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "traffic-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/ttl-value"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) TtlValue() *Qos_Classifier_Term_Conditions_Mpls_TtlValuePath {
	return &Qos_Classifier_Term_Conditions_Mpls_TtlValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "state/ttl-value"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) TtlValue() *Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny {
	return &Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl-value"},
			map[string]interface{}{},
			n,
		),
	}
}
