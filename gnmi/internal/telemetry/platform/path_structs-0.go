/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/robjs/go/pkg/mod/github.com/openconfig/ygot@v0.24.2/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"github.com/openconfig/ygot/ygot"
)

// ComponentPath represents the /openconfig-platform/components/component YANG schema element.
type ComponentPath struct {
	*ygot.NodePath
}

// ComponentPathAny represents the wildcard version of the /openconfig-platform/components/component YANG schema element.
type ComponentPathAny struct {
	*ygot.NodePath
}

// Component_AllocatedPowerPath represents the /openconfig-platform/components/component/state/allocated-power YANG schema element.
type Component_AllocatedPowerPath struct {
	*ygot.NodePath
}

// Component_AllocatedPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/allocated-power YANG schema element.
type Component_AllocatedPowerPathAny struct {
	*ygot.NodePath
}

// Component_DescriptionPath represents the /openconfig-platform/components/component/state/description YANG schema element.
type Component_DescriptionPath struct {
	*ygot.NodePath
}

// Component_DescriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/description YANG schema element.
type Component_DescriptionPathAny struct {
	*ygot.NodePath
}

// Component_EmptyPath represents the /openconfig-platform/components/component/state/empty YANG schema element.
type Component_EmptyPath struct {
	*ygot.NodePath
}

// Component_EmptyPathAny represents the wildcard version of the /openconfig-platform/components/component/state/empty YANG schema element.
type Component_EmptyPathAny struct {
	*ygot.NodePath
}

// Component_EquipmentFailurePath represents the /openconfig-platform/components/component/state/equipment-failure YANG schema element.
type Component_EquipmentFailurePath struct {
	*ygot.NodePath
}

// Component_EquipmentFailurePathAny represents the wildcard version of the /openconfig-platform/components/component/state/equipment-failure YANG schema element.
type Component_EquipmentFailurePathAny struct {
	*ygot.NodePath
}

// Component_EquipmentMismatchPath represents the /openconfig-platform/components/component/state/equipment-mismatch YANG schema element.
type Component_EquipmentMismatchPath struct {
	*ygot.NodePath
}

// Component_EquipmentMismatchPathAny represents the wildcard version of the /openconfig-platform/components/component/state/equipment-mismatch YANG schema element.
type Component_EquipmentMismatchPathAny struct {
	*ygot.NodePath
}

// Component_FirmwareVersionPath represents the /openconfig-platform/components/component/state/firmware-version YANG schema element.
type Component_FirmwareVersionPath struct {
	*ygot.NodePath
}

// Component_FirmwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/firmware-version YANG schema element.
type Component_FirmwareVersionPathAny struct {
	*ygot.NodePath
}

// Component_HardwareVersionPath represents the /openconfig-platform/components/component/state/hardware-version YANG schema element.
type Component_HardwareVersionPath struct {
	*ygot.NodePath
}

// Component_HardwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/hardware-version YANG schema element.
type Component_HardwareVersionPathAny struct {
	*ygot.NodePath
}

// Component_IdPath represents the /openconfig-platform/components/component/state/id YANG schema element.
type Component_IdPath struct {
	*ygot.NodePath
}

// Component_IdPathAny represents the wildcard version of the /openconfig-platform/components/component/state/id YANG schema element.
type Component_IdPathAny struct {
	*ygot.NodePath
}

// Component_LastRebootReasonPath represents the /openconfig-platform/components/component/state/last-reboot-reason YANG schema element.
type Component_LastRebootReasonPath struct {
	*ygot.NodePath
}

// Component_LastRebootReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-reboot-reason YANG schema element.
type Component_LastRebootReasonPathAny struct {
	*ygot.NodePath
}

// Component_LastRebootTimePath represents the /openconfig-platform/components/component/state/last-reboot-time YANG schema element.
type Component_LastRebootTimePath struct {
	*ygot.NodePath
}

// Component_LastRebootTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-reboot-time YANG schema element.
type Component_LastRebootTimePathAny struct {
	*ygot.NodePath
}

// Component_LastSwitchoverTimePath represents the /openconfig-platform/components/component/state/last-switchover-time YANG schema element.
type Component_LastSwitchoverTimePath struct {
	*ygot.NodePath
}

// Component_LastSwitchoverTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-time YANG schema element.
type Component_LastSwitchoverTimePathAny struct {
	*ygot.NodePath
}

// Component_LocationPath represents the /openconfig-platform/components/component/state/location YANG schema element.
type Component_LocationPath struct {
	*ygot.NodePath
}

// Component_LocationPathAny represents the wildcard version of the /openconfig-platform/components/component/state/location YANG schema element.
type Component_LocationPathAny struct {
	*ygot.NodePath
}

// Component_MfgDatePath represents the /openconfig-platform/components/component/state/mfg-date YANG schema element.
type Component_MfgDatePath struct {
	*ygot.NodePath
}

// Component_MfgDatePathAny represents the wildcard version of the /openconfig-platform/components/component/state/mfg-date YANG schema element.
type Component_MfgDatePathAny struct {
	*ygot.NodePath
}

// Component_MfgNamePath represents the /openconfig-platform/components/component/state/mfg-name YANG schema element.
type Component_MfgNamePath struct {
	*ygot.NodePath
}

// Component_MfgNamePathAny represents the wildcard version of the /openconfig-platform/components/component/state/mfg-name YANG schema element.
type Component_MfgNamePathAny struct {
	*ygot.NodePath
}

// Component_NamePath represents the /openconfig-platform/components/component/state/name YANG schema element.
type Component_NamePath struct {
	*ygot.NodePath
}

// Component_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/state/name YANG schema element.
type Component_NamePathAny struct {
	*ygot.NodePath
}

// Component_OperStatusPath represents the /openconfig-platform/components/component/state/oper-status YANG schema element.
type Component_OperStatusPath struct {
	*ygot.NodePath
}

// Component_OperStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/state/oper-status YANG schema element.
type Component_OperStatusPathAny struct {
	*ygot.NodePath
}

// Component_ParentPath represents the /openconfig-platform/components/component/state/parent YANG schema element.
type Component_ParentPath struct {
	*ygot.NodePath
}

// Component_ParentPathAny represents the wildcard version of the /openconfig-platform/components/component/state/parent YANG schema element.
type Component_ParentPathAny struct {
	*ygot.NodePath
}

// Component_PartNoPath represents the /openconfig-platform/components/component/state/part-no YANG schema element.
type Component_PartNoPath struct {
	*ygot.NodePath
}

// Component_PartNoPathAny represents the wildcard version of the /openconfig-platform/components/component/state/part-no YANG schema element.
type Component_PartNoPathAny struct {
	*ygot.NodePath
}

// Component_RedundantRolePath represents the /openconfig-platform/components/component/state/redundant-role YANG schema element.
type Component_RedundantRolePath struct {
	*ygot.NodePath
}

// Component_RedundantRolePathAny represents the wildcard version of the /openconfig-platform/components/component/state/redundant-role YANG schema element.
type Component_RedundantRolePathAny struct {
	*ygot.NodePath
}

// Component_RemovablePath represents the /openconfig-platform/components/component/state/removable YANG schema element.
type Component_RemovablePath struct {
	*ygot.NodePath
}

// Component_RemovablePathAny represents the wildcard version of the /openconfig-platform/components/component/state/removable YANG schema element.
type Component_RemovablePathAny struct {
	*ygot.NodePath
}

// Component_SerialNoPath represents the /openconfig-platform/components/component/state/serial-no YANG schema element.
type Component_SerialNoPath struct {
	*ygot.NodePath
}

// Component_SerialNoPathAny represents the wildcard version of the /openconfig-platform/components/component/state/serial-no YANG schema element.
type Component_SerialNoPathAny struct {
	*ygot.NodePath
}

// Component_SoftwareVersionPath represents the /openconfig-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPath struct {
	*ygot.NodePath
}

// Component_SoftwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPathAny struct {
	*ygot.NodePath
}

// Component_SwitchoverReadyPath represents the /openconfig-platform/components/component/state/switchover-ready YANG schema element.
type Component_SwitchoverReadyPath struct {
	*ygot.NodePath
}

// Component_SwitchoverReadyPathAny represents the wildcard version of the /openconfig-platform/components/component/state/switchover-ready YANG schema element.
type Component_SwitchoverReadyPathAny struct {
	*ygot.NodePath
}

// Component_TypePath represents the /openconfig-platform/components/component/state/type YANG schema element.
type Component_TypePath struct {
	*ygot.NodePath
}

// Component_TypePathAny represents the wildcard version of the /openconfig-platform/components/component/state/type YANG schema element.
type Component_TypePathAny struct {
	*ygot.NodePath
}

// Component_UsedPowerPath represents the /openconfig-platform/components/component/state/used-power YANG schema element.
type Component_UsedPowerPath struct {
	*ygot.NodePath
}

// Component_UsedPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/used-power YANG schema element.
type Component_UsedPowerPathAny struct {
	*ygot.NodePath
}

// AllocatedPower (leaf): Power allocated by the system for the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/allocated-power"
// Path from root: "/components/component/state/allocated-power"
func (n *ComponentPath) AllocatedPower() *Component_AllocatedPowerPath {
	return &Component_AllocatedPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allocated-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// AllocatedPower (leaf): Power allocated by the system for the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/allocated-power"
// Path from root: "/components/component/state/allocated-power"
func (n *ComponentPathAny) AllocatedPower() *Component_AllocatedPowerPathAny {
	return &Component_AllocatedPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allocated-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// Backplane (container): Data for backplane components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane"
// Path from root: "/components/component/backplane"
func (n *ComponentPath) Backplane() *Component_BackplanePath {
	return &Component_BackplanePath{
		NodePath: ygot.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
}

// Backplane (container): Data for backplane components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane"
// Path from root: "/components/component/backplane"
func (n *ComponentPathAny) Backplane() *Component_BackplanePathAny {
	return &Component_BackplanePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
}

// Chassis (container): Data for chassis components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "chassis"
// Path from root: "/components/component/chassis"
func (n *ComponentPath) Chassis() *Component_ChassisPath {
	return &Component_ChassisPath{
		NodePath: ygot.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
}

// Chassis (container): Data for chassis components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "chassis"
// Path from root: "/components/component/chassis"
func (n *ComponentPathAny) Chassis() *Component_ChassisPathAny {
	return &Component_ChassisPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
}

// ControllerCard (container): Data for controller card components, i.e., for components
// with type=CONTROLLER_CARD
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "controller-card"
// Path from root: "/components/component/controller-card"
func (n *ComponentPath) ControllerCard() *Component_ControllerCardPath {
	return &Component_ControllerCardPath{
		NodePath: ygot.NewNodePath(
			[]string{"controller-card"},
			map[string]interface{}{},
			n,
		),
	}
}

// ControllerCard (container): Data for controller card components, i.e., for components
// with type=CONTROLLER_CARD
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "controller-card"
// Path from root: "/components/component/controller-card"
func (n *ComponentPathAny) ControllerCard() *Component_ControllerCardPathAny {
	return &Component_ControllerCardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"controller-card"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (container): Data for cpu components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "cpu"
// Path from root: "/components/component/cpu"
func (n *ComponentPath) Cpu() *Component_CpuPath {
	return &Component_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (container): Data for cpu components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "cpu"
// Path from root: "/components/component/cpu"
func (n *ComponentPathAny) Cpu() *Component_CpuPathAny {
	return &Component_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): System-supplied description of the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/description"
// Path from root: "/components/component/state/description"
func (n *ComponentPath) Description() *Component_DescriptionPath {
	return &Component_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): System-supplied description of the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/description"
// Path from root: "/components/component/state/description"
func (n *ComponentPathAny) Description() *Component_DescriptionPathAny {
	return &Component_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Empty (leaf): The empty leaf may be used by the device to indicate that a
// component position exists but is not populated.  Using this
// flag, it is possible for the management system to learn how
// many positions are available (e.g., occupied vs. empty
// linecard slots in a chassis).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/empty"
// Path from root: "/components/component/state/empty"
func (n *ComponentPath) Empty() *Component_EmptyPath {
	return &Component_EmptyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "empty"},
			map[string]interface{}{},
			n,
		),
	}
}

// Empty (leaf): The empty leaf may be used by the device to indicate that a
// component position exists but is not populated.  Using this
// flag, it is possible for the management system to learn how
// many positions are available (e.g., occupied vs. empty
// linecard slots in a chassis).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/empty"
// Path from root: "/components/component/state/empty"
func (n *ComponentPathAny) Empty() *Component_EmptyPathAny {
	return &Component_EmptyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "empty"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentFailure (leaf): If true, the hardware indicates that the component's physical equipment
// has failed
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-failure"
// Path from root: "/components/component/state/equipment-failure"
func (n *ComponentPath) EquipmentFailure() *Component_EquipmentFailurePath {
	return &Component_EquipmentFailurePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentFailure (leaf): If true, the hardware indicates that the component's physical equipment
// has failed
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-failure"
// Path from root: "/components/component/state/equipment-failure"
func (n *ComponentPathAny) EquipmentFailure() *Component_EquipmentFailurePathAny {
	return &Component_EquipmentFailurePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentMismatch (leaf): If true, the hardware indicates that the component inserted into the
// affected component's physical location is of a different type than what
// is configured
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-mismatch"
// Path from root: "/components/component/state/equipment-mismatch"
func (n *ComponentPath) EquipmentMismatch() *Component_EquipmentMismatchPath {
	return &Component_EquipmentMismatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentMismatch (leaf): If true, the hardware indicates that the component inserted into the
// affected component's physical location is of a different type than what
// is configured
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-mismatch"
// Path from root: "/components/component/state/equipment-mismatch"
func (n *ComponentPathAny) EquipmentMismatch() *Component_EquipmentMismatchPathAny {
	return &Component_EquipmentMismatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fabric (container): Data for fabric components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fabric"
// Path from root: "/components/component/fabric"
func (n *ComponentPath) Fabric() *Component_FabricPath {
	return &Component_FabricPath{
		NodePath: ygot.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fabric (container): Data for fabric components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fabric"
// Path from root: "/components/component/fabric"
func (n *ComponentPathAny) Fabric() *Component_FabricPathAny {
	return &Component_FabricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fan (container): Data for fan components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fan"
// Path from root: "/components/component/fan"
func (n *ComponentPath) Fan() *Component_FanPath {
	return &Component_FanPath{
		NodePath: ygot.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fan (container): Data for fan components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fan"
// Path from root: "/components/component/fan"
func (n *ComponentPathAny) Fan() *Component_FanPathAny {
	return &Component_FanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirmwareVersion (leaf): For hardware components, this is the version of associated
// firmware that is running on the component, if applicable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/firmware-version"
// Path from root: "/components/component/state/firmware-version"
func (n *ComponentPath) FirmwareVersion() *Component_FirmwareVersionPath {
	return &Component_FirmwareVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "firmware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirmwareVersion (leaf): For hardware components, this is the version of associated
// firmware that is running on the component, if applicable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/firmware-version"
// Path from root: "/components/component/state/firmware-version"
func (n *ComponentPathAny) FirmwareVersion() *Component_FirmwareVersionPathAny {
	return &Component_FirmwareVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "firmware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwareVersion (leaf): For hardware components, this is the hardware revision of
// the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/hardware-version"
// Path from root: "/components/component/state/hardware-version"
func (n *ComponentPath) HardwareVersion() *Component_HardwareVersionPath {
	return &Component_HardwareVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwareVersion (leaf): For hardware components, this is the hardware revision of
// the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/hardware-version"
// Path from root: "/components/component/state/hardware-version"
func (n *ComponentPathAny) HardwareVersion() *Component_HardwareVersionPathAny {
	return &Component_HardwareVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Unique identifier assigned by the system for the
// component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/id"
// Path from root: "/components/component/state/id"
func (n *ComponentPath) Id() *Component_IdPath {
	return &Component_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Unique identifier assigned by the system for the
// component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/id"
// Path from root: "/components/component/state/id"
func (n *ComponentPathAny) Id() *Component_IdPathAny {
	return &Component_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "integrated-circuit"
// Path from root: "/components/component/integrated-circuit"
func (n *ComponentPath) IntegratedCircuit() *Component_IntegratedCircuitPath {
	return &Component_IntegratedCircuitPath{
		NodePath: ygot.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "integrated-circuit"
// Path from root: "/components/component/integrated-circuit"
func (n *ComponentPathAny) IntegratedCircuit() *Component_IntegratedCircuitPathAny {
	return &Component_IntegratedCircuitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootReason (leaf): This reports the reason of the last reboot of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-reason"
// Path from root: "/components/component/state/last-reboot-reason"
func (n *ComponentPath) LastRebootReason() *Component_LastRebootReasonPath {
	return &Component_LastRebootReasonPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootReason (leaf): This reports the reason of the last reboot of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-reason"
// Path from root: "/components/component/state/last-reboot-reason"
func (n *ComponentPathAny) LastRebootReason() *Component_LastRebootReasonPathAny {
	return &Component_LastRebootReasonPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootTime (leaf): This reports the time of the last reboot of the component. The
// value is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-time"
// Path from root: "/components/component/state/last-reboot-time"
func (n *ComponentPath) LastRebootTime() *Component_LastRebootTimePath {
	return &Component_LastRebootTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootTime (leaf): This reports the time of the last reboot of the component. The
// value is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-time"
// Path from root: "/components/component/state/last-reboot-time"
func (n *ComponentPathAny) LastRebootTime() *Component_LastRebootTimePathAny {
	return &Component_LastRebootTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverReason (container): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the reason of the last change of the
// component's role.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-reason"
// Path from root: "/components/component/state/last-switchover-reason"
func (n *ComponentPath) LastSwitchoverReason() *Component_LastSwitchoverReasonPath {
	return &Component_LastSwitchoverReasonPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverReason (container): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the reason of the last change of the
// component's role.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-reason"
// Path from root: "/components/component/state/last-switchover-reason"
func (n *ComponentPathAny) LastSwitchoverReason() *Component_LastSwitchoverReasonPathAny {
	return &Component_LastSwitchoverReasonPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverTime (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as
// secondary), this reports the time of the last change of
// the component's role. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-time"
// Path from root: "/components/component/state/last-switchover-time"
func (n *ComponentPath) LastSwitchoverTime() *Component_LastSwitchoverTimePath {
	return &Component_LastSwitchoverTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverTime (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as
// secondary), this reports the time of the last change of
// the component's role. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-time"
// Path from root: "/components/component/state/last-switchover-time"
func (n *ComponentPathAny) LastSwitchoverTime() *Component_LastSwitchoverTimePathAny {
	return &Component_LastSwitchoverTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Location (leaf): System-supplied description of the location of the
// component within the system. This could be a bay position,
// slot number, socket location, etc. For component types that
// have an explicit slot-id attribute, such as linecards, the
// system should populate the more specific slot-id.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/location"
// Path from root: "/components/component/state/location"
func (n *ComponentPath) Location() *Component_LocationPath {
	return &Component_LocationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "location"},
			map[string]interface{}{},
			n,
		),
	}
}

// Location (leaf): System-supplied description of the location of the
// component within the system. This could be a bay position,
// slot number, socket location, etc. For component types that
// have an explicit slot-id attribute, such as linecards, the
// system should populate the more specific slot-id.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/location"
// Path from root: "/components/component/state/location"
func (n *ComponentPathAny) Location() *Component_LocationPathAny {
	return &Component_LocationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "location"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): For components that have associated memory, these values
// report information about available and utilized memory.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/memory"
// Path from root: "/components/component/state/memory"
func (n *ComponentPath) Memory() *Component_MemoryPath {
	return &Component_MemoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): For components that have associated memory, these values
// report information about available and utilized memory.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/memory"
// Path from root: "/components/component/state/memory"
func (n *ComponentPathAny) Memory() *Component_MemoryPathAny {
	return &Component_MemoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgDate (leaf): System-supplied representation of the component's
// manufacturing date.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-date"
// Path from root: "/components/component/state/mfg-date"
func (n *ComponentPath) MfgDate() *Component_MfgDatePath {
	return &Component_MfgDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgDate (leaf): System-supplied representation of the component's
// manufacturing date.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-date"
// Path from root: "/components/component/state/mfg-date"
func (n *ComponentPathAny) MfgDate() *Component_MfgDatePathAny {
	return &Component_MfgDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgName (leaf): System-supplied identifier for the manufacturer of the
// component.  This data is particularly useful when a
// component manufacturer is different than the overall
// device vendor.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-name"
// Path from root: "/components/component/state/mfg-name"
func (n *ComponentPath) MfgName() *Component_MfgNamePath {
	return &Component_MfgNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgName (leaf): System-supplied identifier for the manufacturer of the
// component.  This data is particularly useful when a
// component manufacturer is different than the overall
// device vendor.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-name"
// Path from root: "/components/component/state/mfg-name"
func (n *ComponentPathAny) MfgName() *Component_MfgNamePathAny {
	return &Component_MfgNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/name"
// Path from root: "/components/component/state/name"
func (n *ComponentPath) Name() *Component_NamePath {
	return &Component_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/name"
// Path from root: "/components/component/state/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	return &Component_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): If applicable, this reports the current operational status
// of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/oper-status"
// Path from root: "/components/component/state/oper-status"
func (n *ComponentPath) OperStatus() *Component_OperStatusPath {
	return &Component_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): If applicable, this reports the current operational status
// of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/oper-status"
// Path from root: "/components/component/state/oper-status"
func (n *ComponentPathAny) OperStatus() *Component_OperStatusPathAny {
	return &Component_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent (leaf): Reference to the name of the parent component.  Note that
// this reference must be kept synchronized with the
// corresponding subcomponent reference from the parent
// component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/parent"
// Path from root: "/components/component/state/parent"
func (n *ComponentPath) Parent() *Component_ParentPath {
	return &Component_ParentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent (leaf): Reference to the name of the parent component.  Note that
// this reference must be kept synchronized with the
// corresponding subcomponent reference from the parent
// component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/parent"
// Path from root: "/components/component/state/parent"
func (n *ComponentPathAny) Parent() *Component_ParentPathAny {
	return &Component_ParentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartNo (leaf): System-assigned part number for the component.  This should
// be present in particular if the component is also an FRU
// (field replaceable unit)
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/part-no"
// Path from root: "/components/component/state/part-no"
func (n *ComponentPath) PartNo() *Component_PartNoPath {
	return &Component_PartNoPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "part-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartNo (leaf): System-assigned part number for the component.  This should
// be present in particular if the component is also an FRU
// (field replaceable unit)
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/part-no"
// Path from root: "/components/component/state/part-no"
func (n *ComponentPathAny) PartNo() *Component_PartNoPathAny {
	return &Component_PartNoPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "part-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pcie (container): Components that are connected to the system over the Peripheral
// Component Interconnect Express (PCIe), report the fatal, non-fatal
// and correctable PCIe error counts.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/pcie"
// Path from root: "/components/component/state/pcie"
func (n *ComponentPath) Pcie() *Component_PciePath {
	return &Component_PciePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pcie"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pcie (container): Components that are connected to the system over the Peripheral
// Component Interconnect Express (PCIe), report the fatal, non-fatal
// and correctable PCIe error counts.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/pcie"
// Path from root: "/components/component/state/pcie"
func (n *ComponentPathAny) Pcie() *Component_PciePathAny {
	return &Component_PciePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pcie"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (container): Data for physical port components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "port"
// Path from root: "/components/component/port"
func (n *ComponentPath) Port() *Component_PortPath {
	return &Component_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (container): Data for physical port components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "port"
// Path from root: "/components/component/port"
func (n *ComponentPathAny) Port() *Component_PortPathAny {
	return &Component_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
}

// PowerSupply (container): Data for power supply components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "power-supply"
// Path from root: "/components/component/power-supply"
func (n *ComponentPath) PowerSupply() *Component_PowerSupplyPath {
	return &Component_PowerSupplyPath{
		NodePath: ygot.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
}

// PowerSupply (container): Data for power supply components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "power-supply"
// Path from root: "/components/component/power-supply"
func (n *ComponentPathAny) PowerSupply() *Component_PowerSupplyPathAny {
	return &Component_PowerSupplyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
}

// PropertyAny (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name (wildcarded): string
func (n *ComponentPath) PropertyAny() *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PropertyAny (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name (wildcarded): string
func (n *ComponentPathAny) PropertyAny() *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Property (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name: string
func (n *ComponentPath) Property(Name string) *Component_PropertyPath {
	return &Component_PropertyPath{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Property (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name: string
func (n *ComponentPathAny) Property(Name string) *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RedundantRole (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the role of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/redundant-role"
// Path from root: "/components/component/state/redundant-role"
func (n *ComponentPath) RedundantRole() *Component_RedundantRolePath {
	return &Component_RedundantRolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "redundant-role"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedundantRole (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the role of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/redundant-role"
// Path from root: "/components/component/state/redundant-role"
func (n *ComponentPathAny) RedundantRole() *Component_RedundantRolePathAny {
	return &Component_RedundantRolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "redundant-role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Removable (leaf): If true, this component is removable or is a field
// replaceable unit
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/removable"
// Path from root: "/components/component/state/removable"
func (n *ComponentPath) Removable() *Component_RemovablePath {
	return &Component_RemovablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "removable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Removable (leaf): If true, this component is removable or is a field
// replaceable unit
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/removable"
// Path from root: "/components/component/state/removable"
func (n *ComponentPathAny) Removable() *Component_RemovablePathAny {
	return &Component_RemovablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "removable"},
			map[string]interface{}{},
			n,
		),
	}
}

// SerialNo (leaf): System-assigned serial number of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/serial-no"
// Path from root: "/components/component/state/serial-no"
func (n *ComponentPath) SerialNo() *Component_SerialNoPath {
	return &Component_SerialNoPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// SerialNo (leaf): System-assigned serial number of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/serial-no"
// Path from root: "/components/component/state/serial-no"
func (n *ComponentPathAny) SerialNo() *Component_SerialNoPathAny {
	return &Component_SerialNoPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "software-module"
// Path from root: "/components/component/software-module"
func (n *ComponentPath) SoftwareModule() *Component_SoftwareModulePath {
	return &Component_SoftwareModulePath{
		NodePath: ygot.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "software-module"
// Path from root: "/components/component/software-module"
func (n *ComponentPathAny) SoftwareModule() *Component_SoftwareModulePathAny {
	return &Component_SoftwareModulePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareVersion (leaf): For software components such as operating system or other
// software module, this is the version of the currently
// running software.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/software-version"
// Path from root: "/components/component/state/software-version"
func (n *ComponentPath) SoftwareVersion() *Component_SoftwareVersionPath {
	return &Component_SoftwareVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareVersion (leaf): For software components such as operating system or other
// software module, this is the version of the currently
// running software.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/software-version"
// Path from root: "/components/component/state/software-version"
func (n *ComponentPathAny) SoftwareVersion() *Component_SoftwareVersionPathAny {
	return &Component_SoftwareVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Storage (container): Data for storage components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "storage"
// Path from root: "/components/component/storage"
func (n *ComponentPath) Storage() *Component_StoragePath {
	return &Component_StoragePath{
		NodePath: ygot.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
}

// Storage (container): Data for storage components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "storage"
// Path from root: "/components/component/storage"
func (n *ComponentPathAny) Storage() *Component_StoragePathAny {
	return &Component_StoragePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
}

// SubcomponentAny (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name (wildcarded): string
func (n *ComponentPath) SubcomponentAny() *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SubcomponentAny (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name (wildcarded): string
func (n *ComponentPathAny) SubcomponentAny() *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Subcomponent (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name: string
func (n *ComponentPath) Subcomponent(Name string) *Component_SubcomponentPath {
	return &Component_SubcomponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Subcomponent (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name: string
func (n *ComponentPathAny) Subcomponent(Name string) *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SwitchoverReady (leaf): For components that have redundant roles, this reports a value
// that indicates if the component is ready to support failover.
//
// The components with a redundant-role should reflect the overall
// system's switchover status.  For example, two supervisors in a
// device, one as primary and the other as secondary, should both
// report the same value.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/switchover-ready"
// Path from root: "/components/component/state/switchover-ready"
func (n *ComponentPath) SwitchoverReady() *Component_SwitchoverReadyPath {
	return &Component_SwitchoverReadyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "switchover-ready"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchoverReady (leaf): For components that have redundant roles, this reports a value
// that indicates if the component is ready to support failover.
//
// The components with a redundant-role should reflect the overall
// system's switchover status.  For example, two supervisors in a
// device, one as primary and the other as secondary, should both
// report the same value.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/switchover-ready"
// Path from root: "/components/component/state/switchover-ready"
func (n *ComponentPathAny) SwitchoverReady() *Component_SwitchoverReadyPathAny {
	return &Component_SwitchoverReadyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "switchover-ready"},
			map[string]interface{}{},
			n,
		),
	}
}

// Temperature (container): Temperature in degrees Celsius of the component. Values include
// the instantaneous, average, minimum, and maximum statistics. If
// avg/min/max statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/temperature"
// Path from root: "/components/component/state/temperature"
func (n *ComponentPath) Temperature() *Component_TemperaturePath {
	return &Component_TemperaturePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temperature"},
			map[string]interface{}{},
			n,
		),
	}
}

// Temperature (container): Temperature in degrees Celsius of the component. Values include
// the instantaneous, average, minimum, and maximum statistics. If
// avg/min/max statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/temperature"
// Path from root: "/components/component/state/temperature"
func (n *ComponentPathAny) Temperature() *Component_TemperaturePathAny {
	return &Component_TemperaturePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temperature"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (container): Top-level container for client port transceiver data
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "transceiver"
// Path from root: "/components/component/transceiver"
func (n *ComponentPath) Transceiver() *Component_TransceiverPath {
	return &Component_TransceiverPath{
		NodePath: ygot.NewNodePath(
			[]string{"transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (container): Top-level container for client port transceiver data
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-platform"
// Path from parent: "transceiver"
// Path from root: "/components/component/transceiver"
func (n *ComponentPathAny) Transceiver() *Component_TransceiverPathAny {
	return &Component_TransceiverPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of component as identified by the system
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/type"
// Path from root: "/components/component/state/type"
func (n *ComponentPath) Type() *Component_TypePath {
	return &Component_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of component as identified by the system
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/type"
// Path from root: "/components/component/state/type"
func (n *ComponentPathAny) Type() *Component_TypePathAny {
	return &Component_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// UsedPower (leaf): Actual power used by the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used-power"
// Path from root: "/components/component/state/used-power"
func (n *ComponentPath) UsedPower() *Component_UsedPowerPath {
	return &Component_UsedPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// UsedPower (leaf): Actual power used by the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used-power"
// Path from root: "/components/component/state/used-power"
func (n *ComponentPathAny) UsedPower() *Component_UsedPowerPathAny {
	return &Component_UsedPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_BackplanePath represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePath struct {
	*ygot.NodePath
}

// Component_BackplanePathAny represents the wildcard version of the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePathAny struct {
	*ygot.NodePath
}

// Component_ChassisPath represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPath struct {
	*ygot.NodePath
}

// Component_ChassisPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPathAny struct {
	*ygot.NodePath
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/chassis/utilization"
func (n *Component_ChassisPath) Utilization() *Component_Chassis_UtilizationPath {
	return &Component_Chassis_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/chassis/utilization"
func (n *Component_ChassisPathAny) Utilization() *Component_Chassis_UtilizationPathAny {
	return &Component_Chassis_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Chassis_UtilizationPath represents the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPath struct {
	*ygot.NodePath
}

// Component_Chassis_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPathAny struct {
	*ygot.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_Chassis_UtilizationPath) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_Chassis_UtilizationPathAny) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name: string
func (n *Component_Chassis_UtilizationPath) Resource(Name string) *Component_Chassis_Utilization_ResourcePath {
	return &Component_Chassis_Utilization_ResourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name: string
func (n *Component_Chassis_UtilizationPathAny) Resource(Name string) *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Component_Chassis_Utilization_ResourcePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/committed YANG schema element.
type Component_Chassis_Utilization_Resource_CommittedPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/committed YANG schema element.
type Component_Chassis_Utilization_Resource_CommittedPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/free YANG schema element.
type Component_Chassis_Utilization_Resource_FreePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/free YANG schema element.
type Component_Chassis_Utilization_Resource_FreePathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_HighWatermarkPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_HighWatermarkPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_LastHighWatermarkPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Chassis_Utilization_Resource_MaxLimitPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Chassis_Utilization_Resource_MaxLimitPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPathAny struct {
	*ygot.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/committed"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePath) Committed() *Component_Chassis_Utilization_Resource_CommittedPath {
	return &Component_Chassis_Utilization_Resource_CommittedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/committed"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePathAny) Committed() *Component_Chassis_Utilization_Resource_CommittedPathAny {
	return &Component_Chassis_Utilization_Resource_CommittedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Number of entries available to use.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/free"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePath) Free() *Component_Chassis_Utilization_Resource_FreePath {
	return &Component_Chassis_Utilization_Resource_FreePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Number of entries available to use.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/free"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePathAny) Free() *Component_Chassis_Utilization_Resource_FreePathAny {
	return &Component_Chassis_Utilization_Resource_FreePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPath {
	return &Component_Chassis_Utilization_Resource_HighWatermarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPathAny {
	return &Component_Chassis_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastHighWatermark (leaf): The time when the high-watermark was last updated
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPath {
	return &Component_Chassis_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastHighWatermark (leaf): The time when the high-watermark was last updated
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny {
	return &Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-limit"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePath) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPath {
	return &Component_Chassis_Utilization_Resource_MaxLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-limit"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePathAny) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPathAny {
	return &Component_Chassis_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/name"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/name"
func (n *Component_Chassis_Utilization_ResourcePath) Name() *Component_Chassis_Utilization_Resource_NamePath {
	return &Component_Chassis_Utilization_Resource_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/name"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/name"
func (n *Component_Chassis_Utilization_ResourcePathAny) Name() *Component_Chassis_Utilization_Resource_NamePathAny {
	return &Component_Chassis_Utilization_Resource_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Number of entries currently in use for the resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePath) Used() *Component_Chassis_Utilization_Resource_UsedPath {
	return &Component_Chassis_Utilization_Resource_UsedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Number of entries currently in use for the resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePathAny) Used() *Component_Chassis_Utilization_Resource_UsedPathAny {
	return &Component_Chassis_Utilization_Resource_UsedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_ControllerCardPath represents the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCardPath struct {
	*ygot.NodePath
}

// Component_ControllerCardPathAny represents the wildcard version of the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCardPathAny struct {
	*ygot.NodePath
}

// Component_CpuPath represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPath struct {
	*ygot.NodePath
}

// Component_CpuPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPathAny struct {
	*ygot.NodePath
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
// ----------------------------------------
// Defining module: "openconfig-platform-cpu"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/cpu/utilization"
func (n *Component_CpuPath) Utilization() *Component_Cpu_UtilizationPath {
	return &Component_Cpu_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
// ----------------------------------------
// Defining module: "openconfig-platform-cpu"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/cpu/utilization"
func (n *Component_CpuPathAny) Utilization() *Component_Cpu_UtilizationPathAny {
	return &Component_Cpu_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Cpu_UtilizationPath represents the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPath struct {
	*ygot.NodePath
}

// Component_Cpu_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPathAny struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_AvgPath represents the /openconfig-platform/components/component/cpu/utilization/state/avg YANG schema element.
type Component_Cpu_Utilization_AvgPath struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/avg YANG schema element.
type Component_Cpu_Utilization_AvgPathAny struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_InstantPath represents the /openconfig-platform/components/component/cpu/utilization/state/instant YANG schema element.
type Component_Cpu_Utilization_InstantPath struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/instant YANG schema element.
type Component_Cpu_Utilization_InstantPathAny struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_IntervalPath represents the /openconfig-platform/components/component/cpu/utilization/state/interval YANG schema element.
type Component_Cpu_Utilization_IntervalPath struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/interval YANG schema element.
type Component_Cpu_Utilization_IntervalPathAny struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MaxPath represents the /openconfig-platform/components/component/cpu/utilization/state/max YANG schema element.
type Component_Cpu_Utilization_MaxPath struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/max YANG schema element.
type Component_Cpu_Utilization_MaxPathAny struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MaxTimePath represents the /openconfig-platform/components/component/cpu/utilization/state/max-time YANG schema element.
type Component_Cpu_Utilization_MaxTimePath struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/max-time YANG schema element.
type Component_Cpu_Utilization_MaxTimePathAny struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MinPath represents the /openconfig-platform/components/component/cpu/utilization/state/min YANG schema element.
type Component_Cpu_Utilization_MinPath struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/min YANG schema element.
type Component_Cpu_Utilization_MinPathAny struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MinTimePath represents the /openconfig-platform/components/component/cpu/utilization/state/min-time YANG schema element.
type Component_Cpu_Utilization_MinTimePath struct {
	*ygot.NodePath
}

// Component_Cpu_Utilization_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/min-time YANG schema element.
type Component_Cpu_Utilization_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/avg"
// Path from root: "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_UtilizationPath) Avg() *Component_Cpu_Utilization_AvgPath {
	return &Component_Cpu_Utilization_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/avg"
// Path from root: "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_UtilizationPathAny) Avg() *Component_Cpu_Utilization_AvgPathAny {
	return &Component_Cpu_Utilization_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/instant"
// Path from root: "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_UtilizationPath) Instant() *Component_Cpu_Utilization_InstantPath {
	return &Component_Cpu_Utilization_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/instant"
// Path from root: "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_UtilizationPathAny) Instant() *Component_Cpu_Utilization_InstantPathAny {
	return &Component_Cpu_Utilization_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/interval"
// Path from root: "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_UtilizationPath) Interval() *Component_Cpu_Utilization_IntervalPath {
	return &Component_Cpu_Utilization_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/interval"
// Path from root: "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_UtilizationPathAny) Interval() *Component_Cpu_Utilization_IntervalPathAny {
	return &Component_Cpu_Utilization_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max"
// Path from root: "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_UtilizationPath) Max() *Component_Cpu_Utilization_MaxPath {
	return &Component_Cpu_Utilization_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max"
// Path from root: "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_UtilizationPathAny) Max() *Component_Cpu_Utilization_MaxPathAny {
	return &Component_Cpu_Utilization_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-time"
// Path from root: "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_UtilizationPath) MaxTime() *Component_Cpu_Utilization_MaxTimePath {
	return &Component_Cpu_Utilization_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-time"
// Path from root: "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_UtilizationPathAny) MaxTime() *Component_Cpu_Utilization_MaxTimePathAny {
	return &Component_Cpu_Utilization_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/min"
// Path from root: "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_UtilizationPath) Min() *Component_Cpu_Utilization_MinPath {
	return &Component_Cpu_Utilization_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/min"
// Path from root: "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_UtilizationPathAny) Min() *Component_Cpu_Utilization_MinPathAny {
	return &Component_Cpu_Utilization_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/min-time"
// Path from root: "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_UtilizationPath) MinTime() *Component_Cpu_Utilization_MinTimePath {
	return &Component_Cpu_Utilization_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/min-time"
// Path from root: "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_UtilizationPathAny) MinTime() *Component_Cpu_Utilization_MinTimePathAny {
	return &Component_Cpu_Utilization_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_FabricPath represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPath struct {
	*ygot.NodePath
}

// Component_FabricPathAny represents the wildcard version of the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPathAny struct {
	*ygot.NodePath
}

// Component_FanPath represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPath struct {
	*ygot.NodePath
}

// Component_FanPathAny represents the wildcard version of the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuitPath represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPathAny struct {
	*ygot.NodePath
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane-facing-capacity"
// Path from root: "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPath) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPath {
	return &Component_IntegratedCircuit_BackplaneFacingCapacityPath{
		NodePath: ygot.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane-facing-capacity"
// Path from root: "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPathAny) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny {
	return &Component_IntegratedCircuit_BackplaneFacingCapacityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Container for integrated circuit memory.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "memory"
// Path from root: "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPath) Memory() *Component_IntegratedCircuit_MemoryPath {
	return &Component_IntegratedCircuit_MemoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Container for integrated circuit memory.
// ----------------------------------------
// Defining module: "openconfig-platform-integrated-circuit"
// Instantiating module: "openconfig-platform"
// Path from parent: "memory"
// Path from root: "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPathAny) Memory() *Component_IntegratedCircuit_MemoryPathAny {
	return &Component_IntegratedCircuit_MemoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPath) Utilization() *Component_IntegratedCircuit_UtilizationPath {
	return &Component_IntegratedCircuit_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPathAny) Utilization() *Component_IntegratedCircuit_UtilizationPathAny {
	return &Component_IntegratedCircuit_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}
