/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/wenbli/gocode/pkg/mod/github.com/openconfig/ygot@v0.24.2/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	oc "github.com/openconfig/lemming/gnmi/internal/telemetry"
	"github.com/openconfig/ygot/ygot"
)

// AclPath represents the /openconfig-acl/acl YANG schema element.
type AclPath struct {
	*ygot.NodePath
}

// AclPathAny represents the wildcard version of the /openconfig-acl/acl YANG schema element.
type AclPathAny struct {
	*ygot.NodePath
}

// Acl_CounterCapabilityPath represents the /openconfig-acl/acl/state/counter-capability YANG schema element.
type Acl_CounterCapabilityPath struct {
	*ygot.NodePath
}

// Acl_CounterCapabilityPathAny represents the wildcard version of the /openconfig-acl/acl/state/counter-capability YANG schema element.
type Acl_CounterCapabilityPathAny struct {
	*ygot.NodePath
}

// AclSetAny (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *AclPath) AclSetAny() *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": "*"},
			n,
		),
	}
}

// AclSetAny (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *AclPathAny) AclSetAny() *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": "*"},
			n,
		),
	}
}

// AclSetAnyType (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *AclPath) AclSetAnyType(Name string) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": "*"},
			n,
		),
	}
}

// AclSetAnyType (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type (wildcarded): oc.E_Acl_ACL_TYPE
func (n *AclPathAny) AclSetAnyType(Name string) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": "*"},
			n,
		),
	}
}

// AclSetAnyName (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type: oc.E_Acl_ACL_TYPE
func (n *AclPath) AclSetAnyName(Type oc.E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": Type},
			n,
		),
	}
}

// AclSetAnyName (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type: oc.E_Acl_ACL_TYPE
func (n *AclPathAny) AclSetAnyName(Type oc.E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": Type},
			n,
		),
	}
}

// AclSet (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type: oc.E_Acl_ACL_TYPE
func (n *AclPath) AclSet(Name string, Type oc.E_Acl_ACL_TYPE) *Acl_AclSetPath {
	return &Acl_AclSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": Type},
			n,
		),
	}
}

// AclSet (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type: oc.E_Acl_ACL_TYPE
func (n *AclPathAny) AclSet(Name string, Type oc.E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": Type},
			n,
		),
	}
}

// CounterCapability (leaf): System reported indication of how ACL counters are reported
// by the target
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/counter-capability"
// Path from root: "/acl/state/counter-capability"
func (n *AclPath) CounterCapability() *Acl_CounterCapabilityPath {
	return &Acl_CounterCapabilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counter-capability"},
			map[string]interface{}{},
			n,
		),
	}
}

// CounterCapability (leaf): System reported indication of how ACL counters are reported
// by the target
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/counter-capability"
// Path from root: "/acl/state/counter-capability"
func (n *AclPathAny) CounterCapability() *Acl_CounterCapabilityPathAny {
	return &Acl_CounterCapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counter-capability"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id (wildcarded): string
func (n *AclPath) InterfaceAny() *Acl_InterfacePathAny {
	return &Acl_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id (wildcarded): string
func (n *AclPathAny) InterfaceAny() *Acl_InterfacePathAny {
	return &Acl_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id: string
func (n *AclPath) Interface(Id string) *Acl_InterfacePath {
	return &Acl_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Interface (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id: string
func (n *AclPathAny) Interface(Id string) *Acl_InterfacePathAny {
	return &Acl_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Acl_AclSetPath represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPath struct {
	*ygot.NodePath
}

// Acl_AclSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_DescriptionPath represents the /openconfig-acl/acl/acl-sets/acl-set/state/description YANG schema element.
type Acl_AclSet_DescriptionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_DescriptionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/state/description YANG schema element.
type Acl_AclSet_DescriptionPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_NamePath represents the /openconfig-acl/acl/acl-sets/acl-set/state/name YANG schema element.
type Acl_AclSet_NamePath struct {
	*ygot.NodePath
}

// Acl_AclSet_NamePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/state/name YANG schema element.
type Acl_AclSet_NamePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_TypePath represents the /openconfig-acl/acl/acl-sets/acl-set/state/type YANG schema element.
type Acl_AclSet_TypePath struct {
	*ygot.NodePath
}

// Acl_AclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/state/type YANG schema element.
type Acl_AclSet_TypePathAny struct {
	*ygot.NodePath
}

// AclEntryAny (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_AclSetPath) AclEntryAny() *Acl_AclSet_AclEntryPathAny {
	return &Acl_AclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntryAny (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_AclSetPathAny) AclEntryAny() *Acl_AclSet_AclEntryPathAny {
	return &Acl_AclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_AclSetPath) AclEntry(SequenceId uint32) *Acl_AclSet_AclEntryPath {
	return &Acl_AclSet_AclEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_AclSetPathAny) AclEntry(SequenceId uint32) *Acl_AclSet_AclEntryPathAny {
	return &Acl_AclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// Description (leaf): Description, or comment, for the ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/description"
// Path from root: "/acl/acl-sets/acl-set/state/description"
func (n *Acl_AclSetPath) Description() *Acl_AclSet_DescriptionPath {
	return &Acl_AclSet_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description, or comment, for the ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/description"
// Path from root: "/acl/acl-sets/acl-set/state/description"
func (n *Acl_AclSetPathAny) Description() *Acl_AclSet_DescriptionPathAny {
	return &Acl_AclSet_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the access-list set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/name"
// Path from root: "/acl/acl-sets/acl-set/state/name"
func (n *Acl_AclSetPath) Name() *Acl_AclSet_NamePath {
	return &Acl_AclSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the access-list set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/name"
// Path from root: "/acl/acl-sets/acl-set/state/name"
func (n *Acl_AclSetPathAny) Name() *Acl_AclSet_NamePathAny {
	return &Acl_AclSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type determines the fields allowed in the ACL entries
// belonging to the ACL set (e.g., IPv4, IPv6, etc.)
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/type"
// Path from root: "/acl/acl-sets/acl-set/state/type"
func (n *Acl_AclSetPath) Type() *Acl_AclSet_TypePath {
	return &Acl_AclSet_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type determines the fields allowed in the ACL entries
// belonging to the ACL set (e.g., IPv4, IPv6, etc.)
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/type"
// Path from root: "/acl/acl-sets/acl-set/state/type"
func (n *Acl_AclSetPathAny) Type() *Acl_AclSet_TypePathAny {
	return &Acl_AclSet_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntryPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_DescriptionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description YANG schema element.
type Acl_AclSet_AclEntry_DescriptionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_DescriptionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description YANG schema element.
type Acl_AclSet_AclEntry_DescriptionPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_AclSet_AclEntry_MatchedOctetsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_AclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_AclSet_AclEntry_MatchedPacketsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_AclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_AclSet_AclEntry_SequenceIdPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_AclSet_AclEntry_SequenceIdPathAny struct {
	*ygot.NodePath
}

// Actions (container): Enclosing container for list of ACL actions associated
// with an entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "actions"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions"
func (n *Acl_AclSet_AclEntryPath) Actions() *Acl_AclSet_AclEntry_ActionsPath {
	return &Acl_AclSet_AclEntry_ActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Actions (container): Enclosing container for list of ACL actions associated
// with an entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "actions"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions"
func (n *Acl_AclSet_AclEntryPathAny) Actions() *Acl_AclSet_AclEntry_ActionsPathAny {
	return &Acl_AclSet_AclEntry_ActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A user-defined description, or comment, for this Access List
// Entry.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/description"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description"
func (n *Acl_AclSet_AclEntryPath) Description() *Acl_AclSet_AclEntry_DescriptionPath {
	return &Acl_AclSet_AclEntry_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A user-defined description, or comment, for this Access List
// Entry.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/description"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/description"
func (n *Acl_AclSet_AclEntryPathAny) Description() *Acl_AclSet_AclEntry_DescriptionPathAny {
	return &Acl_AclSet_AclEntry_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputInterface (container): Input interface container
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "input-interface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface"
func (n *Acl_AclSet_AclEntryPath) InputInterface() *Acl_AclSet_AclEntry_InputInterfacePath {
	return &Acl_AclSet_AclEntry_InputInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"input-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputInterface (container): Input interface container
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "input-interface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface"
func (n *Acl_AclSet_AclEntryPathAny) InputInterface() *Acl_AclSet_AclEntry_InputInterfacePathAny {
	return &Acl_AclSet_AclEntry_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv4"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4"
func (n *Acl_AclSet_AclEntryPath) Ipv4() *Acl_AclSet_AclEntry_Ipv4Path {
	return &Acl_AclSet_AclEntry_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv4"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4"
func (n *Acl_AclSet_AclEntryPathAny) Ipv4() *Acl_AclSet_AclEntry_Ipv4PathAny {
	return &Acl_AclSet_AclEntry_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv6"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6"
func (n *Acl_AclSet_AclEntryPath) Ipv6() *Acl_AclSet_AclEntry_Ipv6Path {
	return &Acl_AclSet_AclEntry_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv6"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6"
func (n *Acl_AclSet_AclEntryPathAny) Ipv6() *Acl_AclSet_AclEntry_Ipv6PathAny {
	return &Acl_AclSet_AclEntry_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "l2"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2"
func (n *Acl_AclSet_AclEntryPath) L2() *Acl_AclSet_AclEntry_L2Path {
	return &Acl_AclSet_AclEntry_L2Path{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "l2"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2"
func (n *Acl_AclSet_AclEntryPathAny) L2() *Acl_AclSet_AclEntry_L2PathAny {
	return &Acl_AclSet_AclEntry_L2PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntryPath) MatchedOctets() *Acl_AclSet_AclEntry_MatchedOctetsPath {
	return &Acl_AclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntryPathAny) MatchedOctets() *Acl_AclSet_AclEntry_MatchedOctetsPathAny {
	return &Acl_AclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntryPath) MatchedPackets() *Acl_AclSet_AclEntry_MatchedPacketsPath {
	return &Acl_AclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntryPathAny) MatchedPackets() *Acl_AclSet_AclEntry_MatchedPacketsPathAny {
	return &Acl_AclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "mpls"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls"
func (n *Acl_AclSet_AclEntryPath) Mpls() *Acl_AclSet_AclEntry_MplsPath {
	return &Acl_AclSet_AclEntry_MplsPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "mpls"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls"
func (n *Acl_AclSet_AclEntryPathAny) Mpls() *Acl_AclSet_AclEntry_MplsPathAny {
	return &Acl_AclSet_AclEntry_MplsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): The sequence id determines the order in which ACL entries
// are applied.  The sequence id must be unique for each entry
// in an ACL set.  Target devices should apply the ACL entry
// rules in ascending order determined by sequence id (low to
// high), rather than the relying only on order in the list.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_AclSet_AclEntryPath) SequenceId() *Acl_AclSet_AclEntry_SequenceIdPath {
	return &Acl_AclSet_AclEntry_SequenceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): The sequence id determines the order in which ACL entries
// are applied.  The sequence id must be unique for each entry
// in an ACL set.  Target devices should apply the ACL entry
// rules in ascending order determined by sequence id (low to
// high), rather than the relying only on order in the list.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_AclSet_AclEntryPathAny) SequenceId() *Acl_AclSet_AclEntry_SequenceIdPathAny {
	return &Acl_AclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "transport"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport"
func (n *Acl_AclSet_AclEntryPath) Transport() *Acl_AclSet_AclEntry_TransportPath {
	return &Acl_AclSet_AclEntry_TransportPath{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "transport"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport"
func (n *Acl_AclSet_AclEntryPathAny) Transport() *Acl_AclSet_AclEntry_TransportPathAny {
	return &Acl_AclSet_AclEntry_TransportPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_ActionsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_ActionsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_ForwardingActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_LogActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_LogActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPathAny struct {
	*ygot.NodePath
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/forwarding-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPath {
	return &Acl_AclSet_AclEntry_Actions_ForwardingActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/forwarding-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny {
	return &Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/log-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPath {
	return &Acl_AclSet_AclEntry_Actions_LogActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "log-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/log-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPathAny {
	return &Acl_AclSet_AclEntry_Actions_LogActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "log-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_InputInterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_InputInterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePathAny struct {
	*ygot.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePath) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}
