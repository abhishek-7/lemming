/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/robjs/go/pkg/mod/github.com/openconfig/ygot@v0.24.2/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"github.com/openconfig/ygot/ygot"
)

// RoutingPolicyPath represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPath struct {
	*ygot.NodePath
}

// RoutingPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPathAny struct {
	*ygot.NodePath
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "defined-sets"
// Path from root: "/routing-policy/defined-sets"
func (n *RoutingPolicyPath) DefinedSets() *RoutingPolicy_DefinedSetsPath {
	return &RoutingPolicy_DefinedSetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "defined-sets"
// Path from root: "/routing-policy/defined-sets"
func (n *RoutingPolicyPathAny) DefinedSets() *RoutingPolicy_DefinedSetsPathAny {
	return &RoutingPolicy_DefinedSetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name (wildcarded): string
func (n *RoutingPolicyPath) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name (wildcarded): string
func (n *RoutingPolicyPathAny) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name: string
func (n *RoutingPolicyPath) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPath {
	return &RoutingPolicy_PolicyDefinitionPath{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "policy-definitions/policy-definition"
// Path from root: "/routing-policy/policy-definitions/policy-definition"
// Name: string
func (n *RoutingPolicyPathAny) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPathAny {
	return &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_DefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPathAny struct {
	*ygot.NodePath
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-defined-sets"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPath) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-defined-sets"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPathAny) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPath {
	return &RoutingPolicy_DefinedSets_NeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "neighbor-sets/neighbor-set"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PrefixSetAny (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PrefixSetAny (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PrefixSet (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPath {
	return &RoutingPolicy_DefinedSets_PrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PrefixSet (list): List of the defined prefix sets
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefix-sets/prefix-set"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TagSetAny (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPath) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TagSetAny (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name (wildcarded): string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TagSet (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPath) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPath {
	return &RoutingPolicy_DefinedSets_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TagSet (list): List of tag set definitions.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "tag-sets/tag-set"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set"
// Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPathAny {
	return &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny struct {
	*ygot.NodePath
}

// AsPathSetAny (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
}

// AsPathSetAny (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
}

// AsPathSet (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
}

// AsPathSet (list): List of defined AS path sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-sets/as-path-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
// AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
}

// CommunitySetAny (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
}

// CommunitySetAny (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
}

// CommunitySet (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
}

// CommunitySet (list): List of defined BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-sets/community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
// CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName (wildcarded): string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
}

// ExtCommunitySet (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
}

// ExtCommunitySet (list): List of defined extended BGP community sets
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ext-community-sets/ext-community-set"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
// ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny struct {
	*ygot.NodePath
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/as-path-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// CommunityMember (leaf-list): members of the community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityMember (leaf-list): members of the community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// ExtCommunityMember (leaf-list): members of the extended community set
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunityMember (leaf-list): members of the extended community set
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-member"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ext-community-set-name"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/match-set-options"
// Path from root: "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny {
	return &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePathAny struct {
	*ygot.NodePath
}

// Address (leaf-list): List of IP addresses in the neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/address"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPath {
	return &RoutingPolicy_DefinedSets_NeighborSet_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf-list): List of IP addresses in the neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/address"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny {
	return &RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePath {
	return &RoutingPolicy_DefinedSets_NeighborSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_NeighborSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/mode"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/name"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyMasklengthRange (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAnyMasklengthRange(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyMasklengthRange (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange (wildcarded): string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAnyMasklengthRange(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": "*"},
			n,
		),
	}
}

// PrefixAnyIpPrefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAnyIpPrefix(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": MasklengthRange},
			n,
		),
	}
}

// PrefixAnyIpPrefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix (wildcarded): string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAnyIpPrefix(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": MasklengthRange},
			n,
		),
	}
}

// Prefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
}

// Prefix (list): List of prefixes in the prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "prefixes/prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
// IpPrefix: string
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny struct {
	*ygot.NodePath
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ip-prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/ip-prefix"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/masklength-range"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "masklength-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "state/masklength-range"
// Path from root: "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny {
	return &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "masklength-range"},
			map[string]interface{}{},
			n,
		),
	}
}
